
Control_Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006704  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080068a0  080068a0  000168a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006910  08006910  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08006910  08006910  00016910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006918  08006918  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006918  08006918  00016918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800691c  0800691c  0001691c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006920  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f0  2000007c  0800699c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000056c  0800699c  0002056c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d720  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019c5  00000000  00000000  0002d7cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be8  00000000  00000000  0002f198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b60  00000000  00000000  0002fd80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e92  00000000  00000000  000308e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cf04  00000000  00000000  00046772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d69b  00000000  00000000  00053676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0d11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037f0  00000000  00000000  000e0d64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000007c 	.word	0x2000007c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006884 	.word	0x08006884

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000080 	.word	0x20000080
 80001d4:	08006884 	.word	0x08006884

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295
 8000b64:	f000 b974 	b.w	8000e50 <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9d08      	ldr	r5, [sp, #32]
 8000b86:	4604      	mov	r4, r0
 8000b88:	468e      	mov	lr, r1
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d14d      	bne.n	8000c2a <__udivmoddi4+0xaa>
 8000b8e:	428a      	cmp	r2, r1
 8000b90:	4694      	mov	ip, r2
 8000b92:	d969      	bls.n	8000c68 <__udivmoddi4+0xe8>
 8000b94:	fab2 f282 	clz	r2, r2
 8000b98:	b152      	cbz	r2, 8000bb0 <__udivmoddi4+0x30>
 8000b9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b9e:	f1c2 0120 	rsb	r1, r2, #32
 8000ba2:	fa20 f101 	lsr.w	r1, r0, r1
 8000ba6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000baa:	ea41 0e03 	orr.w	lr, r1, r3
 8000bae:	4094      	lsls	r4, r2
 8000bb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb4:	0c21      	lsrs	r1, r4, #16
 8000bb6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bba:	fa1f f78c 	uxth.w	r7, ip
 8000bbe:	fb08 e316 	mls	r3, r8, r6, lr
 8000bc2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bc6:	fb06 f107 	mul.w	r1, r6, r7
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	d90a      	bls.n	8000be4 <__udivmoddi4+0x64>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bd6:	f080 811f 	bcs.w	8000e18 <__udivmoddi4+0x298>
 8000bda:	4299      	cmp	r1, r3
 8000bdc:	f240 811c 	bls.w	8000e18 <__udivmoddi4+0x298>
 8000be0:	3e02      	subs	r6, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	1a5b      	subs	r3, r3, r1
 8000be6:	b2a4      	uxth	r4, r4
 8000be8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bec:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf4:	fb00 f707 	mul.w	r7, r0, r7
 8000bf8:	42a7      	cmp	r7, r4
 8000bfa:	d90a      	bls.n	8000c12 <__udivmoddi4+0x92>
 8000bfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c04:	f080 810a 	bcs.w	8000e1c <__udivmoddi4+0x29c>
 8000c08:	42a7      	cmp	r7, r4
 8000c0a:	f240 8107 	bls.w	8000e1c <__udivmoddi4+0x29c>
 8000c0e:	4464      	add	r4, ip
 8000c10:	3802      	subs	r0, #2
 8000c12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c16:	1be4      	subs	r4, r4, r7
 8000c18:	2600      	movs	r6, #0
 8000c1a:	b11d      	cbz	r5, 8000c24 <__udivmoddi4+0xa4>
 8000c1c:	40d4      	lsrs	r4, r2
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e9c5 4300 	strd	r4, r3, [r5]
 8000c24:	4631      	mov	r1, r6
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d909      	bls.n	8000c42 <__udivmoddi4+0xc2>
 8000c2e:	2d00      	cmp	r5, #0
 8000c30:	f000 80ef 	beq.w	8000e12 <__udivmoddi4+0x292>
 8000c34:	2600      	movs	r6, #0
 8000c36:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3a:	4630      	mov	r0, r6
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	fab3 f683 	clz	r6, r3
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d14a      	bne.n	8000ce0 <__udivmoddi4+0x160>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xd4>
 8000c4e:	4282      	cmp	r2, r0
 8000c50:	f200 80f9 	bhi.w	8000e46 <__udivmoddi4+0x2c6>
 8000c54:	1a84      	subs	r4, r0, r2
 8000c56:	eb61 0303 	sbc.w	r3, r1, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	469e      	mov	lr, r3
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	d0e0      	beq.n	8000c24 <__udivmoddi4+0xa4>
 8000c62:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c66:	e7dd      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000c68:	b902      	cbnz	r2, 8000c6c <__udivmoddi4+0xec>
 8000c6a:	deff      	udf	#255	; 0xff
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	f040 8092 	bne.w	8000d9a <__udivmoddi4+0x21a>
 8000c76:	eba1 010c 	sub.w	r1, r1, ip
 8000c7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7e:	fa1f fe8c 	uxth.w	lr, ip
 8000c82:	2601      	movs	r6, #1
 8000c84:	0c20      	lsrs	r0, r4, #16
 8000c86:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c8a:	fb07 1113 	mls	r1, r7, r3, r1
 8000c8e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c92:	fb0e f003 	mul.w	r0, lr, r3
 8000c96:	4288      	cmp	r0, r1
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x12c>
 8000c9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c9e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x12a>
 8000ca4:	4288      	cmp	r0, r1
 8000ca6:	f200 80cb 	bhi.w	8000e40 <__udivmoddi4+0x2c0>
 8000caa:	4643      	mov	r3, r8
 8000cac:	1a09      	subs	r1, r1, r0
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cb8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x156>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ccc:	d202      	bcs.n	8000cd4 <__udivmoddi4+0x154>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	f200 80bb 	bhi.w	8000e4a <__udivmoddi4+0x2ca>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	eba4 040e 	sub.w	r4, r4, lr
 8000cda:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cde:	e79c      	b.n	8000c1a <__udivmoddi4+0x9a>
 8000ce0:	f1c6 0720 	rsb	r7, r6, #32
 8000ce4:	40b3      	lsls	r3, r6
 8000ce6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cee:	fa20 f407 	lsr.w	r4, r0, r7
 8000cf2:	fa01 f306 	lsl.w	r3, r1, r6
 8000cf6:	431c      	orrs	r4, r3
 8000cf8:	40f9      	lsrs	r1, r7
 8000cfa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cfe:	fa00 f306 	lsl.w	r3, r0, r6
 8000d02:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d06:	0c20      	lsrs	r0, r4, #16
 8000d08:	fa1f fe8c 	uxth.w	lr, ip
 8000d0c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d14:	fb08 f00e 	mul.w	r0, r8, lr
 8000d18:	4288      	cmp	r0, r1
 8000d1a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d1e:	d90b      	bls.n	8000d38 <__udivmoddi4+0x1b8>
 8000d20:	eb1c 0101 	adds.w	r1, ip, r1
 8000d24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d28:	f080 8088 	bcs.w	8000e3c <__udivmoddi4+0x2bc>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f240 8085 	bls.w	8000e3c <__udivmoddi4+0x2bc>
 8000d32:	f1a8 0802 	sub.w	r8, r8, #2
 8000d36:	4461      	add	r1, ip
 8000d38:	1a09      	subs	r1, r1, r0
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d40:	fb09 1110 	mls	r1, r9, r0, r1
 8000d44:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d4c:	458e      	cmp	lr, r1
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1e2>
 8000d50:	eb1c 0101 	adds.w	r1, ip, r1
 8000d54:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d58:	d26c      	bcs.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5a:	458e      	cmp	lr, r1
 8000d5c:	d96a      	bls.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	4461      	add	r1, ip
 8000d62:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d66:	fba0 9402 	umull	r9, r4, r0, r2
 8000d6a:	eba1 010e 	sub.w	r1, r1, lr
 8000d6e:	42a1      	cmp	r1, r4
 8000d70:	46c8      	mov	r8, r9
 8000d72:	46a6      	mov	lr, r4
 8000d74:	d356      	bcc.n	8000e24 <__udivmoddi4+0x2a4>
 8000d76:	d053      	beq.n	8000e20 <__udivmoddi4+0x2a0>
 8000d78:	b15d      	cbz	r5, 8000d92 <__udivmoddi4+0x212>
 8000d7a:	ebb3 0208 	subs.w	r2, r3, r8
 8000d7e:	eb61 010e 	sbc.w	r1, r1, lr
 8000d82:	fa01 f707 	lsl.w	r7, r1, r7
 8000d86:	fa22 f306 	lsr.w	r3, r2, r6
 8000d8a:	40f1      	lsrs	r1, r6
 8000d8c:	431f      	orrs	r7, r3
 8000d8e:	e9c5 7100 	strd	r7, r1, [r5]
 8000d92:	2600      	movs	r6, #0
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	f1c2 0320 	rsb	r3, r2, #32
 8000d9e:	40d8      	lsrs	r0, r3
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	fa21 f303 	lsr.w	r3, r1, r3
 8000da8:	4091      	lsls	r1, r2
 8000daa:	4301      	orrs	r1, r0
 8000dac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000db8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dbc:	0c0b      	lsrs	r3, r1, #16
 8000dbe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dc2:	fb00 f60e 	mul.w	r6, r0, lr
 8000dc6:	429e      	cmp	r6, r3
 8000dc8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x260>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dd6:	d22f      	bcs.n	8000e38 <__udivmoddi4+0x2b8>
 8000dd8:	429e      	cmp	r6, r3
 8000dda:	d92d      	bls.n	8000e38 <__udivmoddi4+0x2b8>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	4463      	add	r3, ip
 8000de0:	1b9b      	subs	r3, r3, r6
 8000de2:	b289      	uxth	r1, r1
 8000de4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000de8:	fb07 3316 	mls	r3, r7, r6, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb06 f30e 	mul.w	r3, r6, lr
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x28a>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e00:	d216      	bcs.n	8000e30 <__udivmoddi4+0x2b0>
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d914      	bls.n	8000e30 <__udivmoddi4+0x2b0>
 8000e06:	3e02      	subs	r6, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	1ac9      	subs	r1, r1, r3
 8000e0c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e10:	e738      	b.n	8000c84 <__udivmoddi4+0x104>
 8000e12:	462e      	mov	r6, r5
 8000e14:	4628      	mov	r0, r5
 8000e16:	e705      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	e6e3      	b.n	8000be4 <__udivmoddi4+0x64>
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	e6f8      	b.n	8000c12 <__udivmoddi4+0x92>
 8000e20:	454b      	cmp	r3, r9
 8000e22:	d2a9      	bcs.n	8000d78 <__udivmoddi4+0x1f8>
 8000e24:	ebb9 0802 	subs.w	r8, r9, r2
 8000e28:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e2c:	3801      	subs	r0, #1
 8000e2e:	e7a3      	b.n	8000d78 <__udivmoddi4+0x1f8>
 8000e30:	4646      	mov	r6, r8
 8000e32:	e7ea      	b.n	8000e0a <__udivmoddi4+0x28a>
 8000e34:	4620      	mov	r0, r4
 8000e36:	e794      	b.n	8000d62 <__udivmoddi4+0x1e2>
 8000e38:	4640      	mov	r0, r8
 8000e3a:	e7d1      	b.n	8000de0 <__udivmoddi4+0x260>
 8000e3c:	46d0      	mov	r8, sl
 8000e3e:	e77b      	b.n	8000d38 <__udivmoddi4+0x1b8>
 8000e40:	3b02      	subs	r3, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	e732      	b.n	8000cac <__udivmoddi4+0x12c>
 8000e46:	4630      	mov	r0, r6
 8000e48:	e709      	b.n	8000c5e <__udivmoddi4+0xde>
 8000e4a:	4464      	add	r4, ip
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	e742      	b.n	8000cd6 <__udivmoddi4+0x156>

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <Create_Matrix>:
}Matrix;

Matrix A, C, R, Q, x_k0, x_k1, z_k, xp_k, pp_k, p_k0, p_k1, A_T, C_T, y_k, s_k, s_k_inv, K, I, test;

Matrix Create_Matrix(int rows, int cols, float b[9])
{
 8000e54:	b4b0      	push	{r4, r5, r7}
 8000e56:	b095      	sub	sp, #84	; 0x54
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
 8000e60:	603b      	str	r3, [r7, #0]
	Matrix a;
	a.rows = rows;
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	637b      	str	r3, [r7, #52]	; 0x34
	a.cols = cols;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	63bb      	str	r3, [r7, #56]	; 0x38

	for (int i = 0; i < 3; i++)
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e6e:	e018      	b.n	8000ea2 <Create_Matrix+0x4e>
	{
		for (int j = 0; j < 3; j++)
 8000e70:	2300      	movs	r3, #0
 8000e72:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e74:	e00f      	b.n	8000e96 <Create_Matrix+0x42>
		{
			a.data[i][j] = 0;
 8000e76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000e78:	4613      	mov	r3, r2
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	4413      	add	r3, r2
 8000e7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000e80:	4413      	add	r3, r2
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	3350      	adds	r3, #80	; 0x50
 8000e86:	443b      	add	r3, r7
 8000e88:	3b40      	subs	r3, #64	; 0x40
 8000e8a:	f04f 0200 	mov.w	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 3; j++)
 8000e90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e92:	3301      	adds	r3, #1
 8000e94:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	ddec      	ble.n	8000e76 <Create_Matrix+0x22>
	for (int i = 0; i < 3; i++)
 8000e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	dde3      	ble.n	8000e70 <Create_Matrix+0x1c>
		}
	}

	int n = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	647b      	str	r3, [r7, #68]	; 0x44
	for (int i = 0; i < rows; i++)
 8000eac:	2300      	movs	r3, #0
 8000eae:	643b      	str	r3, [r7, #64]	; 0x40
 8000eb0:	e02c      	b.n	8000f0c <Create_Matrix+0xb8>
	{
		for (int j = 0; j < cols; j++)
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000eb6:	e022      	b.n	8000efe <Create_Matrix+0xaa>
		{
			a.data[i][j] = 0;
 8000eb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000eba:	4613      	mov	r3, r2
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	4413      	add	r3, r2
 8000ec0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000ec2:	4413      	add	r3, r2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	3350      	adds	r3, #80	; 0x50
 8000ec8:	443b      	add	r3, r7
 8000eca:	3b40      	subs	r3, #64	; 0x40
 8000ecc:	f04f 0200 	mov.w	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
			a.data[i][j] = b[n];
 8000ed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	683a      	ldr	r2, [r7, #0]
 8000ed8:	4413      	add	r3, r2
 8000eda:	6819      	ldr	r1, [r3, #0]
 8000edc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000ede:	4613      	mov	r3, r2
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	4413      	add	r3, r2
 8000ee4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000ee6:	4413      	add	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	3350      	adds	r3, #80	; 0x50
 8000eec:	443b      	add	r3, r7
 8000eee:	3b40      	subs	r3, #64	; 0x40
 8000ef0:	6019      	str	r1, [r3, #0]
			n++;
 8000ef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	647b      	str	r3, [r7, #68]	; 0x44
		for (int j = 0; j < cols; j++)
 8000ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000efa:	3301      	adds	r3, #1
 8000efc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000efe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	dbd8      	blt.n	8000eb8 <Create_Matrix+0x64>
	for (int i = 0; i < rows; i++)
 8000f06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f08:	3301      	adds	r3, #1
 8000f0a:	643b      	str	r3, [r7, #64]	; 0x40
 8000f0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	dbce      	blt.n	8000eb2 <Create_Matrix+0x5e>
		}
	}
	return a;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	461d      	mov	r5, r3
 8000f18:	f107 0410 	add.w	r4, r7, #16
 8000f1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f24:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000f28:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000f2c:	68f8      	ldr	r0, [r7, #12]
 8000f2e:	3754      	adds	r7, #84	; 0x54
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bcb0      	pop	{r4, r5, r7}
 8000f34:	4770      	bx	lr

08000f36 <Multiply>:

Matrix Multiply(Matrix a, Matrix b)
{
 8000f36:	b084      	sub	sp, #16
 8000f38:	b4b0      	push	{r4, r5, r7}
 8000f3a:	b093      	sub	sp, #76	; 0x4c
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8000f44:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Matrix c;
	c.rows = a.rows;
 8000f48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	c.cols = b.cols;
 8000f4e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000f52:	633b      	str	r3, [r7, #48]	; 0x30
	for (int i = 0; i < 3; i++)
 8000f54:	2300      	movs	r3, #0
 8000f56:	647b      	str	r3, [r7, #68]	; 0x44
 8000f58:	e018      	b.n	8000f8c <Multiply+0x56>
	{
		for (int j = 0; j < 3; j++)
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	643b      	str	r3, [r7, #64]	; 0x40
 8000f5e:	e00f      	b.n	8000f80 <Multiply+0x4a>
		{
			c.data[i][j] = 0;
 8000f60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000f62:	4613      	mov	r3, r2
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	4413      	add	r3, r2
 8000f68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000f6a:	4413      	add	r3, r2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	3348      	adds	r3, #72	; 0x48
 8000f70:	443b      	add	r3, r7
 8000f72:	3b40      	subs	r3, #64	; 0x40
 8000f74:	f04f 0200 	mov.w	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 3; j++)
 8000f7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	643b      	str	r3, [r7, #64]	; 0x40
 8000f80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	ddec      	ble.n	8000f60 <Multiply+0x2a>
	for (int i = 0; i < 3; i++)
 8000f86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f88:	3301      	adds	r3, #1
 8000f8a:	647b      	str	r3, [r7, #68]	; 0x44
 8000f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	dde3      	ble.n	8000f5a <Multiply+0x24>
		}
	}

	for (int i = 0; i < a.rows; i++)
 8000f92:	2300      	movs	r3, #0
 8000f94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f96:	e04c      	b.n	8001032 <Multiply+0xfc>
	{
		for (int j = 0; j < b.cols; j++)
 8000f98:	2300      	movs	r3, #0
 8000f9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f9c:	e041      	b.n	8001022 <Multiply+0xec>
		{
			for (int k = 0; k < b.rows; k++)
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	637b      	str	r3, [r7, #52]	; 0x34
 8000fa2:	e036      	b.n	8001012 <Multiply+0xdc>
			{
				c.data[i][j] += a.data[i][k] * b.data[k][j];
 8000fa4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	4413      	add	r3, r2
 8000fac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000fae:	4413      	add	r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	3348      	adds	r3, #72	; 0x48
 8000fb4:	443b      	add	r3, r7
 8000fb6:	3b40      	subs	r3, #64	; 0x40
 8000fb8:	ed93 7a00 	vldr	s14, [r3]
 8000fbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	4413      	add	r3, r2
 8000fc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000fc6:	4413      	add	r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	3358      	adds	r3, #88	; 0x58
 8000fcc:	443b      	add	r3, r7
 8000fce:	3304      	adds	r3, #4
 8000fd0:	edd3 6a00 	vldr	s13, [r3]
 8000fd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	4413      	add	r3, r2
 8000fdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000fde:	4413      	add	r3, r2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	3358      	adds	r3, #88	; 0x58
 8000fe4:	443b      	add	r3, r7
 8000fe6:	3330      	adds	r3, #48	; 0x30
 8000fe8:	edd3 7a00 	vldr	s15, [r3]
 8000fec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ff0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ff4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	4413      	add	r3, r2
 8000ffc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000ffe:	4413      	add	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	3348      	adds	r3, #72	; 0x48
 8001004:	443b      	add	r3, r7
 8001006:	3b40      	subs	r3, #64	; 0x40
 8001008:	edc3 7a00 	vstr	s15, [r3]
			for (int k = 0; k < b.rows; k++)
 800100c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800100e:	3301      	adds	r3, #1
 8001010:	637b      	str	r3, [r7, #52]	; 0x34
 8001012:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001016:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001018:	429a      	cmp	r2, r3
 800101a:	dbc3      	blt.n	8000fa4 <Multiply+0x6e>
		for (int j = 0; j < b.cols; j++)
 800101c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800101e:	3301      	adds	r3, #1
 8001020:	63bb      	str	r3, [r7, #56]	; 0x38
 8001022:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001026:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001028:	429a      	cmp	r2, r3
 800102a:	dbb8      	blt.n	8000f9e <Multiply+0x68>
	for (int i = 0; i < a.rows; i++)
 800102c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800102e:	3301      	adds	r3, #1
 8001030:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001032:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001036:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001038:	429a      	cmp	r2, r3
 800103a:	dbad      	blt.n	8000f98 <Multiply+0x62>
			}
		}
	}
	return c;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	461d      	mov	r5, r3
 8001040:	f107 0408 	add.w	r4, r7, #8
 8001044:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001046:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001048:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800104a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800104c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001050:	e885 0007 	stmia.w	r5, {r0, r1, r2}

}
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	374c      	adds	r7, #76	; 0x4c
 8001058:	46bd      	mov	sp, r7
 800105a:	bcb0      	pop	{r4, r5, r7}
 800105c:	b004      	add	sp, #16
 800105e:	4770      	bx	lr

08001060 <Sum>:

Matrix Sum(Matrix a, Matrix b)
{
 8001060:	b084      	sub	sp, #16
 8001062:	b4b0      	push	{r4, r5, r7}
 8001064:	b093      	sub	sp, #76	; 0x4c
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
 800106a:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800106e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Matrix c;
	c.rows = a.rows;
 8001072:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001076:	633b      	str	r3, [r7, #48]	; 0x30
	c.cols = b.cols;
 8001078:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800107c:	637b      	str	r3, [r7, #52]	; 0x34

	for (int i = 0; i < 3; i++)
 800107e:	2300      	movs	r3, #0
 8001080:	647b      	str	r3, [r7, #68]	; 0x44
 8001082:	e018      	b.n	80010b6 <Sum+0x56>
	{
		for (int j = 0; j < 3; j++)
 8001084:	2300      	movs	r3, #0
 8001086:	643b      	str	r3, [r7, #64]	; 0x40
 8001088:	e00f      	b.n	80010aa <Sum+0x4a>
		{
			c.data[i][j] = 0;
 800108a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800108c:	4613      	mov	r3, r2
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	4413      	add	r3, r2
 8001092:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001094:	4413      	add	r3, r2
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	3348      	adds	r3, #72	; 0x48
 800109a:	443b      	add	r3, r7
 800109c:	3b3c      	subs	r3, #60	; 0x3c
 800109e:	f04f 0200 	mov.w	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 3; j++)
 80010a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010a6:	3301      	adds	r3, #1
 80010a8:	643b      	str	r3, [r7, #64]	; 0x40
 80010aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	ddec      	ble.n	800108a <Sum+0x2a>
	for (int i = 0; i < 3; i++)
 80010b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010b2:	3301      	adds	r3, #1
 80010b4:	647b      	str	r3, [r7, #68]	; 0x44
 80010b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	dde3      	ble.n	8001084 <Sum+0x24>
		}
	}

	for (int i = 0; i < a.rows; i++)
 80010bc:	2300      	movs	r3, #0
 80010be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010c0:	e033      	b.n	800112a <Sum+0xca>
	{
		for (int j = 0; j < a.cols; j++)
 80010c2:	2300      	movs	r3, #0
 80010c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80010c6:	e028      	b.n	800111a <Sum+0xba>
		{
			c.data[i][j] = a.data[i][j] + b.data[i][j];
 80010c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80010ca:	4613      	mov	r3, r2
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	4413      	add	r3, r2
 80010d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010d2:	4413      	add	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	3358      	adds	r3, #88	; 0x58
 80010d8:	443b      	add	r3, r7
 80010da:	3304      	adds	r3, #4
 80010dc:	ed93 7a00 	vldr	s14, [r3]
 80010e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80010e2:	4613      	mov	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4413      	add	r3, r2
 80010e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010ea:	4413      	add	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	3358      	adds	r3, #88	; 0x58
 80010f0:	443b      	add	r3, r7
 80010f2:	3330      	adds	r3, #48	; 0x30
 80010f4:	edd3 7a00 	vldr	s15, [r3]
 80010f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80010fe:	4613      	mov	r3, r2
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	4413      	add	r3, r2
 8001104:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001106:	4413      	add	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	3348      	adds	r3, #72	; 0x48
 800110c:	443b      	add	r3, r7
 800110e:	3b3c      	subs	r3, #60	; 0x3c
 8001110:	edc3 7a00 	vstr	s15, [r3]
		for (int j = 0; j < a.cols; j++)
 8001114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001116:	3301      	adds	r3, #1
 8001118:	63bb      	str	r3, [r7, #56]	; 0x38
 800111a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800111e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001120:	429a      	cmp	r2, r3
 8001122:	dbd1      	blt.n	80010c8 <Sum+0x68>
	for (int i = 0; i < a.rows; i++)
 8001124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001126:	3301      	adds	r3, #1
 8001128:	63fb      	str	r3, [r7, #60]	; 0x3c
 800112a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800112e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001130:	429a      	cmp	r2, r3
 8001132:	dbc6      	blt.n	80010c2 <Sum+0x62>
		}
	}

	return c;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	461d      	mov	r5, r3
 8001138:	f107 040c 	add.w	r4, r7, #12
 800113c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800113e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001142:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001144:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001148:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	374c      	adds	r7, #76	; 0x4c
 8001150:	46bd      	mov	sp, r7
 8001152:	bcb0      	pop	{r4, r5, r7}
 8001154:	b004      	add	sp, #16
 8001156:	4770      	bx	lr

08001158 <Minus>:

Matrix Minus(Matrix a, Matrix b)
{
 8001158:	b084      	sub	sp, #16
 800115a:	b4b0      	push	{r4, r5, r7}
 800115c:	b093      	sub	sp, #76	; 0x4c
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
 8001162:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8001166:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Matrix c;
	c.rows = a.rows;
 800116a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800116e:	633b      	str	r3, [r7, #48]	; 0x30
	c.cols = b.cols;
 8001170:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001174:	637b      	str	r3, [r7, #52]	; 0x34

	for (int i = 0; i < 3; i++)
 8001176:	2300      	movs	r3, #0
 8001178:	647b      	str	r3, [r7, #68]	; 0x44
 800117a:	e018      	b.n	80011ae <Minus+0x56>
	{
		for (int j = 0; j < 3; j++)
 800117c:	2300      	movs	r3, #0
 800117e:	643b      	str	r3, [r7, #64]	; 0x40
 8001180:	e00f      	b.n	80011a2 <Minus+0x4a>
		{
			c.data[i][j] = 0;
 8001182:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001184:	4613      	mov	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	4413      	add	r3, r2
 800118a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800118c:	4413      	add	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	3348      	adds	r3, #72	; 0x48
 8001192:	443b      	add	r3, r7
 8001194:	3b3c      	subs	r3, #60	; 0x3c
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 3; j++)
 800119c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800119e:	3301      	adds	r3, #1
 80011a0:	643b      	str	r3, [r7, #64]	; 0x40
 80011a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	ddec      	ble.n	8001182 <Minus+0x2a>
	for (int i = 0; i < 3; i++)
 80011a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011aa:	3301      	adds	r3, #1
 80011ac:	647b      	str	r3, [r7, #68]	; 0x44
 80011ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	dde3      	ble.n	800117c <Minus+0x24>
		}
	}

	for (int i = 0; i < a.rows; i++)
 80011b4:	2300      	movs	r3, #0
 80011b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011b8:	e033      	b.n	8001222 <Minus+0xca>
	{
		for (int j = 0; j < a.cols; j++)
 80011ba:	2300      	movs	r3, #0
 80011bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80011be:	e028      	b.n	8001212 <Minus+0xba>
		{
			c.data[i][j] = a.data[i][j] - b.data[i][j];
 80011c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80011c2:	4613      	mov	r3, r2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	4413      	add	r3, r2
 80011c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80011ca:	4413      	add	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	3358      	adds	r3, #88	; 0x58
 80011d0:	443b      	add	r3, r7
 80011d2:	3304      	adds	r3, #4
 80011d4:	ed93 7a00 	vldr	s14, [r3]
 80011d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80011da:	4613      	mov	r3, r2
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	4413      	add	r3, r2
 80011e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80011e2:	4413      	add	r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	3358      	adds	r3, #88	; 0x58
 80011e8:	443b      	add	r3, r7
 80011ea:	3330      	adds	r3, #48	; 0x30
 80011ec:	edd3 7a00 	vldr	s15, [r3]
 80011f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80011f6:	4613      	mov	r3, r2
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	4413      	add	r3, r2
 80011fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80011fe:	4413      	add	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	3348      	adds	r3, #72	; 0x48
 8001204:	443b      	add	r3, r7
 8001206:	3b3c      	subs	r3, #60	; 0x3c
 8001208:	edc3 7a00 	vstr	s15, [r3]
		for (int j = 0; j < a.cols; j++)
 800120c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800120e:	3301      	adds	r3, #1
 8001210:	63bb      	str	r3, [r7, #56]	; 0x38
 8001212:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001216:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001218:	429a      	cmp	r2, r3
 800121a:	dbd1      	blt.n	80011c0 <Minus+0x68>
	for (int i = 0; i < a.rows; i++)
 800121c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800121e:	3301      	adds	r3, #1
 8001220:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001222:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001226:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001228:	429a      	cmp	r2, r3
 800122a:	dbc6      	blt.n	80011ba <Minus+0x62>
		}
	}

	return c;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	461d      	mov	r5, r3
 8001230:	f107 040c 	add.w	r4, r7, #12
 8001234:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001236:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001238:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800123a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800123c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001240:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	374c      	adds	r7, #76	; 0x4c
 8001248:	46bd      	mov	sp, r7
 800124a:	bcb0      	pop	{r4, r5, r7}
 800124c:	b004      	add	sp, #16
 800124e:	4770      	bx	lr

08001250 <Transpose>:

Matrix Transpose(Matrix a)
{
 8001250:	b084      	sub	sp, #16
 8001252:	b4b0      	push	{r4, r5, r7}
 8001254:	b093      	sub	sp, #76	; 0x4c
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
 800125a:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800125e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Matrix c;
	c.rows = a.rows;
 8001262:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001266:	633b      	str	r3, [r7, #48]	; 0x30
	c.cols = a.cols;
 8001268:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800126c:	637b      	str	r3, [r7, #52]	; 0x34

	for (int i = 0; i < 3; i++)
 800126e:	2300      	movs	r3, #0
 8001270:	647b      	str	r3, [r7, #68]	; 0x44
 8001272:	e018      	b.n	80012a6 <Transpose+0x56>
	{
		for (int j = 0; j < 3; j++)
 8001274:	2300      	movs	r3, #0
 8001276:	643b      	str	r3, [r7, #64]	; 0x40
 8001278:	e00f      	b.n	800129a <Transpose+0x4a>
		{
			c.data[i][j] = 0;
 800127a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800127c:	4613      	mov	r3, r2
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	4413      	add	r3, r2
 8001282:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001284:	4413      	add	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	3348      	adds	r3, #72	; 0x48
 800128a:	443b      	add	r3, r7
 800128c:	3b3c      	subs	r3, #60	; 0x3c
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 3; j++)
 8001294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001296:	3301      	adds	r3, #1
 8001298:	643b      	str	r3, [r7, #64]	; 0x40
 800129a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800129c:	2b02      	cmp	r3, #2
 800129e:	ddec      	ble.n	800127a <Transpose+0x2a>
	for (int i = 0; i < 3; i++)
 80012a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012a2:	3301      	adds	r3, #1
 80012a4:	647b      	str	r3, [r7, #68]	; 0x44
 80012a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	dde3      	ble.n	8001274 <Transpose+0x24>
		}
	}

	for (int i = 0; i < a.rows; i++)
 80012ac:	2300      	movs	r3, #0
 80012ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012b0:	e023      	b.n	80012fa <Transpose+0xaa>
	{
		for (int j = 0; j < a.cols; j++)
 80012b2:	2300      	movs	r3, #0
 80012b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80012b6:	e018      	b.n	80012ea <Transpose+0x9a>
		{
			c.data[i][j] = a.data[j][i];
 80012b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80012ba:	4613      	mov	r3, r2
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4413      	add	r3, r2
 80012c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80012c2:	4413      	add	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	3358      	adds	r3, #88	; 0x58
 80012c8:	443b      	add	r3, r7
 80012ca:	3304      	adds	r3, #4
 80012cc:	6819      	ldr	r1, [r3, #0]
 80012ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80012d0:	4613      	mov	r3, r2
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	4413      	add	r3, r2
 80012d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80012d8:	4413      	add	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	3348      	adds	r3, #72	; 0x48
 80012de:	443b      	add	r3, r7
 80012e0:	3b3c      	subs	r3, #60	; 0x3c
 80012e2:	6019      	str	r1, [r3, #0]
		for (int j = 0; j < a.cols; j++)
 80012e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012e6:	3301      	adds	r3, #1
 80012e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80012ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80012f0:	429a      	cmp	r2, r3
 80012f2:	dbe1      	blt.n	80012b8 <Transpose+0x68>
	for (int i = 0; i < a.rows; i++)
 80012f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012f6:	3301      	adds	r3, #1
 80012f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80012fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001300:	429a      	cmp	r2, r3
 8001302:	dbd6      	blt.n	80012b2 <Transpose+0x62>
		}
	}
	return c;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	461d      	mov	r5, r3
 8001308:	f107 040c 	add.w	r4, r7, #12
 800130c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800130e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001310:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001312:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001314:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001318:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	374c      	adds	r7, #76	; 0x4c
 8001320:	46bd      	mov	sp, r7
 8001322:	bcb0      	pop	{r4, r5, r7}
 8001324:	b004      	add	sp, #16
 8001326:	4770      	bx	lr

08001328 <Inverse>:

Matrix Inverse(Matrix a)
{
 8001328:	b084      	sub	sp, #16
 800132a:	b4b0      	push	{r4, r5, r7}
 800132c:	b093      	sub	sp, #76	; 0x4c
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8001336:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//this function is for only 1x1 matrix
	Matrix c;
	c.rows = a.rows;
 800133a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800133e:	633b      	str	r3, [r7, #48]	; 0x30
	c.cols = a.cols;
 8001340:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001344:	637b      	str	r3, [r7, #52]	; 0x34

	for (int i = 0; i < 3; i++)
 8001346:	2300      	movs	r3, #0
 8001348:	647b      	str	r3, [r7, #68]	; 0x44
 800134a:	e018      	b.n	800137e <Inverse+0x56>
	{
		for (int j = 0; j < 3; j++)
 800134c:	2300      	movs	r3, #0
 800134e:	643b      	str	r3, [r7, #64]	; 0x40
 8001350:	e00f      	b.n	8001372 <Inverse+0x4a>
		{
			c.data[i][j] = 0;
 8001352:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001354:	4613      	mov	r3, r2
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	4413      	add	r3, r2
 800135a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800135c:	4413      	add	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	3348      	adds	r3, #72	; 0x48
 8001362:	443b      	add	r3, r7
 8001364:	3b3c      	subs	r3, #60	; 0x3c
 8001366:	f04f 0200 	mov.w	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 3; j++)
 800136c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800136e:	3301      	adds	r3, #1
 8001370:	643b      	str	r3, [r7, #64]	; 0x40
 8001372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001374:	2b02      	cmp	r3, #2
 8001376:	ddec      	ble.n	8001352 <Inverse+0x2a>
	for (int i = 0; i < 3; i++)
 8001378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800137a:	3301      	adds	r3, #1
 800137c:	647b      	str	r3, [r7, #68]	; 0x44
 800137e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001380:	2b02      	cmp	r3, #2
 8001382:	dde3      	ble.n	800134c <Inverse+0x24>
		}
	}

	for (int i = 0; i < a.rows; i++)
 8001384:	2300      	movs	r3, #0
 8001386:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001388:	e029      	b.n	80013de <Inverse+0xb6>
	{
		for (int j = 0; j < a.cols; j++)
 800138a:	2300      	movs	r3, #0
 800138c:	63bb      	str	r3, [r7, #56]	; 0x38
 800138e:	e01e      	b.n	80013ce <Inverse+0xa6>
		{
			c.data[i][j] = 1/(a.data[i][j]);
 8001390:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001392:	4613      	mov	r3, r2
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	4413      	add	r3, r2
 8001398:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800139a:	4413      	add	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	3358      	adds	r3, #88	; 0x58
 80013a0:	443b      	add	r3, r7
 80013a2:	3304      	adds	r3, #4
 80013a4:	ed93 7a00 	vldr	s14, [r3]
 80013a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80013ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80013b2:	4613      	mov	r3, r2
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	4413      	add	r3, r2
 80013b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80013ba:	4413      	add	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	3348      	adds	r3, #72	; 0x48
 80013c0:	443b      	add	r3, r7
 80013c2:	3b3c      	subs	r3, #60	; 0x3c
 80013c4:	edc3 7a00 	vstr	s15, [r3]
		for (int j = 0; j < a.cols; j++)
 80013c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013ca:	3301      	adds	r3, #1
 80013cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80013ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80013d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80013d4:	429a      	cmp	r2, r3
 80013d6:	dbdb      	blt.n	8001390 <Inverse+0x68>
	for (int i = 0; i < a.rows; i++)
 80013d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013da:	3301      	adds	r3, #1
 80013dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80013e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80013e4:	429a      	cmp	r2, r3
 80013e6:	dbd0      	blt.n	800138a <Inverse+0x62>
		}
	}
	return c;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	461d      	mov	r5, r3
 80013ec:	f107 040c 	add.w	r4, r7, #12
 80013f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013f8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80013fc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	374c      	adds	r7, #76	; 0x4c
 8001404:	46bd      	mov	sp, r7
 8001406:	bcb0      	pop	{r4, r5, r7}
 8001408:	b004      	add	sp, #16
 800140a:	4770      	bx	lr

0800140c <Store>:

Matrix Store(Matrix a)
{
 800140c:	b084      	sub	sp, #16
 800140e:	b4b0      	push	{r4, r5, r7}
 8001410:	b093      	sub	sp, #76	; 0x4c
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
 8001416:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800141a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Matrix c;
	c.rows = a.rows;
 800141e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001422:	633b      	str	r3, [r7, #48]	; 0x30
	c.cols = a.cols;
 8001424:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001428:	637b      	str	r3, [r7, #52]	; 0x34

	for (int i = 0; i < 3; i++)
 800142a:	2300      	movs	r3, #0
 800142c:	647b      	str	r3, [r7, #68]	; 0x44
 800142e:	e018      	b.n	8001462 <Store+0x56>
	{
		for (int j = 0; j < 3; j++)
 8001430:	2300      	movs	r3, #0
 8001432:	643b      	str	r3, [r7, #64]	; 0x40
 8001434:	e00f      	b.n	8001456 <Store+0x4a>
		{
			c.data[i][j] = 0;
 8001436:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001438:	4613      	mov	r3, r2
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	4413      	add	r3, r2
 800143e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001440:	4413      	add	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	3348      	adds	r3, #72	; 0x48
 8001446:	443b      	add	r3, r7
 8001448:	3b3c      	subs	r3, #60	; 0x3c
 800144a:	f04f 0200 	mov.w	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 3; j++)
 8001450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001452:	3301      	adds	r3, #1
 8001454:	643b      	str	r3, [r7, #64]	; 0x40
 8001456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001458:	2b02      	cmp	r3, #2
 800145a:	ddec      	ble.n	8001436 <Store+0x2a>
	for (int i = 0; i < 3; i++)
 800145c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800145e:	3301      	adds	r3, #1
 8001460:	647b      	str	r3, [r7, #68]	; 0x44
 8001462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001464:	2b02      	cmp	r3, #2
 8001466:	dde3      	ble.n	8001430 <Store+0x24>
		}
	}

	for (int i = 0; i < a.rows; i++)
 8001468:	2300      	movs	r3, #0
 800146a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800146c:	e023      	b.n	80014b6 <Store+0xaa>
	{
		for (int j = 0; j < a.cols; j++)
 800146e:	2300      	movs	r3, #0
 8001470:	63bb      	str	r3, [r7, #56]	; 0x38
 8001472:	e018      	b.n	80014a6 <Store+0x9a>
		{
			c.data[i][j] = (a.data[i][j]);
 8001474:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001476:	4613      	mov	r3, r2
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	4413      	add	r3, r2
 800147c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800147e:	4413      	add	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	3358      	adds	r3, #88	; 0x58
 8001484:	443b      	add	r3, r7
 8001486:	3304      	adds	r3, #4
 8001488:	6819      	ldr	r1, [r3, #0]
 800148a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800148c:	4613      	mov	r3, r2
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	4413      	add	r3, r2
 8001492:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001494:	4413      	add	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	3348      	adds	r3, #72	; 0x48
 800149a:	443b      	add	r3, r7
 800149c:	3b3c      	subs	r3, #60	; 0x3c
 800149e:	6019      	str	r1, [r3, #0]
		for (int j = 0; j < a.cols; j++)
 80014a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014a2:	3301      	adds	r3, #1
 80014a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80014a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80014aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80014ac:	429a      	cmp	r2, r3
 80014ae:	dbe1      	blt.n	8001474 <Store+0x68>
	for (int i = 0; i < a.rows; i++)
 80014b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014b2:	3301      	adds	r3, #1
 80014b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80014ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80014bc:	429a      	cmp	r2, r3
 80014be:	dbd6      	blt.n	800146e <Store+0x62>
		}
	}
	return c;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	461d      	mov	r5, r3
 80014c4:	f107 040c 	add.w	r4, r7, #12
 80014c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014d0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80014d4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	374c      	adds	r7, #76	; 0x4c
 80014dc:	46bd      	mov	sp, r7
 80014de:	bcb0      	pop	{r4, r5, r7}
 80014e0:	b004      	add	sp, #16
 80014e2:	4770      	bx	lr
 80014e4:	0000      	movs	r0, r0
	...

080014e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ea:	b0c7      	sub	sp, #284	; 0x11c
 80014ec:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ee:	f001 feb5 	bl	800325c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014f2:	f000 fb6d 	bl	8001bd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014f6:	f000 fd3f 	bl	8001f78 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014fa:	f000 fd13 	bl	8001f24 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80014fe:	f000 fbcf 	bl	8001ca0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001502:	f000 fc6d 	bl	8001de0 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001506:	f000 fcbf 	bl	8001e88 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 800150a:	213c      	movs	r1, #60	; 0x3c
 800150c:	48e6      	ldr	r0, [pc, #920]	; (80018a8 <main+0x3c0>)
 800150e:	f003 f8c1 	bl	8004694 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001512:	2100      	movs	r1, #0
 8001514:	48e5      	ldr	r0, [pc, #916]	; (80018ac <main+0x3c4>)
 8001516:	f002 ff67 	bl	80043e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800151a:	2104      	movs	r1, #4
 800151c:	48e3      	ldr	r0, [pc, #908]	; (80018ac <main+0x3c4>)
 800151e:	f002 ff63 	bl	80043e8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8001522:	48e3      	ldr	r0, [pc, #908]	; (80018b0 <main+0x3c8>)
 8001524:	f002 fea4 	bl	8004270 <HAL_TIM_Base_Start_IT>

  endtime = (2.0*t_acc) + t_constant;
 8001528:	4be2      	ldr	r3, [pc, #904]	; (80018b4 <main+0x3cc>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7fe ffb7 	bl	80004a0 <__aeabi_f2d>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	f7fe fe55 	bl	80001e4 <__adddf3>
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	4614      	mov	r4, r2
 8001540:	461d      	mov	r5, r3
 8001542:	4bdd      	ldr	r3, [pc, #884]	; (80018b8 <main+0x3d0>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f7fe ffaa 	bl	80004a0 <__aeabi_f2d>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4620      	mov	r0, r4
 8001552:	4629      	mov	r1, r5
 8001554:	f7fe fe46 	bl	80001e4 <__adddf3>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4610      	mov	r0, r2
 800155e:	4619      	mov	r1, r3
 8001560:	f7ff faa6 	bl	8000ab0 <__aeabi_d2f>
 8001564:	4603      	mov	r3, r0
 8001566:	4ad5      	ldr	r2, [pc, #852]	; (80018bc <main+0x3d4>)
 8001568:	6013      	str	r3, [r2, #0]
  v_max = 2.0*theta/(t_constant + endtime);
 800156a:	4bd5      	ldr	r3, [pc, #852]	; (80018c0 <main+0x3d8>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe ff96 	bl	80004a0 <__aeabi_f2d>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	f7fe fe34 	bl	80001e4 <__adddf3>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4614      	mov	r4, r2
 8001582:	461d      	mov	r5, r3
 8001584:	4bcc      	ldr	r3, [pc, #816]	; (80018b8 <main+0x3d0>)
 8001586:	ed93 7a00 	vldr	s14, [r3]
 800158a:	4bcc      	ldr	r3, [pc, #816]	; (80018bc <main+0x3d4>)
 800158c:	edd3 7a00 	vldr	s15, [r3]
 8001590:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001594:	ee17 0a90 	vmov	r0, s15
 8001598:	f7fe ff82 	bl	80004a0 <__aeabi_f2d>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4620      	mov	r0, r4
 80015a2:	4629      	mov	r1, r5
 80015a4:	f7ff f8fe 	bl	80007a4 <__aeabi_ddiv>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4610      	mov	r0, r2
 80015ae:	4619      	mov	r1, r3
 80015b0:	f7ff fa7e 	bl	8000ab0 <__aeabi_d2f>
 80015b4:	4603      	mov	r3, r0
 80015b6:	4ac3      	ldr	r2, [pc, #780]	; (80018c4 <main+0x3dc>)
 80015b8:	6013      	str	r3, [r2, #0]
  a = v_max/t_acc;
 80015ba:	4bc2      	ldr	r3, [pc, #776]	; (80018c4 <main+0x3dc>)
 80015bc:	edd3 6a00 	vldr	s13, [r3]
 80015c0:	4bbc      	ldr	r3, [pc, #752]	; (80018b4 <main+0x3cc>)
 80015c2:	ed93 7a00 	vldr	s14, [r3]
 80015c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015ca:	4bbf      	ldr	r3, [pc, #764]	; (80018c8 <main+0x3e0>)
 80015cc:	edc3 7a00 	vstr	s15, [r3]


  float dt = 1/100.0;
 80015d0:	4bbe      	ldr	r3, [pc, #760]	; (80018cc <main+0x3e4>)
 80015d2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  float mat_a[9] = { 1, dt, (0.5 * (pow(dt,2))), 0, 1, dt, 0, 0, 1 };
 80015d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80015da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80015de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80015e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80015e6:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 80015ea:	f7fe ff59 	bl	80004a0 <__aeabi_f2d>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	ed9f 1ba1 	vldr	d1, [pc, #644]	; 8001878 <main+0x390>
 80015f6:	ec43 2b10 	vmov	d0, r2, r3
 80015fa:	f004 fa27 	bl	8005a4c <pow>
 80015fe:	ec51 0b10 	vmov	r0, r1, d0
 8001602:	f04f 0200 	mov.w	r2, #0
 8001606:	4bb2      	ldr	r3, [pc, #712]	; (80018d0 <main+0x3e8>)
 8001608:	f7fe ffa2 	bl	8000550 <__aeabi_dmul>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4610      	mov	r0, r2
 8001612:	4619      	mov	r1, r3
 8001614:	f7ff fa4c 	bl	8000ab0 <__aeabi_d2f>
 8001618:	4603      	mov	r3, r0
 800161a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800161e:	f04f 0300 	mov.w	r3, #0
 8001622:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001626:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800162a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800162e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001632:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001636:	f04f 0300 	mov.w	r3, #0
 800163a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800163e:	f04f 0300 	mov.w	r3, #0
 8001642:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001646:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800164a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  float mat_c[3] = { 1, 0, 0 };
 800164e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001652:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001656:	f04f 0300 	mov.w	r3, #0
 800165a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800165e:	f04f 0300 	mov.w	r3, #0
 8001662:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  float mat_r[1] = { 0.000961807 };
 8001666:	4b9b      	ldr	r3, [pc, #620]	; (80018d4 <main+0x3ec>)
 8001668:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  float eye[9] = { 1, 0, 0, 0, 1, 0, 0, 0, 1 };
 800166c:	4b9a      	ldr	r3, [pc, #616]	; (80018d8 <main+0x3f0>)
 800166e:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8001672:	461d      	mov	r5, r3
 8001674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800167a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800167c:	682b      	ldr	r3, [r5, #0]
 800167e:	6023      	str	r3, [r4, #0]
  float zero[9] = { 0 };
 8001680:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001684:	2224      	movs	r2, #36	; 0x24
 8001686:	2100      	movs	r1, #0
 8001688:	4618      	mov	r0, r3
 800168a:	f004 f9d7 	bl	8005a3c <memset>
  float var_jerk = 10;
 800168e:	4b93      	ldr	r3, [pc, #588]	; (80018dc <main+0x3f4>)
 8001690:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  float var_theta = (pow(((1 / 6.0) * pow(dt,3)), 2))*var_jerk;
 8001694:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8001698:	f7fe ff02 	bl	80004a0 <__aeabi_f2d>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	ed9f 1b77 	vldr	d1, [pc, #476]	; 8001880 <main+0x398>
 80016a4:	ec43 2b10 	vmov	d0, r2, r3
 80016a8:	f004 f9d0 	bl	8005a4c <pow>
 80016ac:	ec51 0b10 	vmov	r0, r1, d0
 80016b0:	a375      	add	r3, pc, #468	; (adr r3, 8001888 <main+0x3a0>)
 80016b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b6:	f7fe ff4b 	bl	8000550 <__aeabi_dmul>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	ec43 2b17 	vmov	d7, r2, r3
 80016c2:	ed9f 1b6d 	vldr	d1, [pc, #436]	; 8001878 <main+0x390>
 80016c6:	eeb0 0a47 	vmov.f32	s0, s14
 80016ca:	eef0 0a67 	vmov.f32	s1, s15
 80016ce:	f004 f9bd 	bl	8005a4c <pow>
 80016d2:	ec55 4b10 	vmov	r4, r5, d0
 80016d6:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 80016da:	f7fe fee1 	bl	80004a0 <__aeabi_f2d>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	4620      	mov	r0, r4
 80016e4:	4629      	mov	r1, r5
 80016e6:	f7fe ff33 	bl	8000550 <__aeabi_dmul>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	4610      	mov	r0, r2
 80016f0:	4619      	mov	r1, r3
 80016f2:	f7ff f9dd 	bl	8000ab0 <__aeabi_d2f>
 80016f6:	4603      	mov	r3, r0
 80016f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  float var_omega = (pow(((1 / 2.0) * pow(dt, 2)), 2)) * var_jerk;
 80016fc:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8001700:	f7fe fece 	bl	80004a0 <__aeabi_f2d>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	ed9f 1b5b 	vldr	d1, [pc, #364]	; 8001878 <main+0x390>
 800170c:	ec43 2b10 	vmov	d0, r2, r3
 8001710:	f004 f99c 	bl	8005a4c <pow>
 8001714:	ec51 0b10 	vmov	r0, r1, d0
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	4b6c      	ldr	r3, [pc, #432]	; (80018d0 <main+0x3e8>)
 800171e:	f7fe ff17 	bl	8000550 <__aeabi_dmul>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	ec43 2b17 	vmov	d7, r2, r3
 800172a:	ed9f 1b53 	vldr	d1, [pc, #332]	; 8001878 <main+0x390>
 800172e:	eeb0 0a47 	vmov.f32	s0, s14
 8001732:	eef0 0a67 	vmov.f32	s1, s15
 8001736:	f004 f989 	bl	8005a4c <pow>
 800173a:	ec55 4b10 	vmov	r4, r5, d0
 800173e:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8001742:	f7fe fead 	bl	80004a0 <__aeabi_f2d>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4620      	mov	r0, r4
 800174c:	4629      	mov	r1, r5
 800174e:	f7fe feff 	bl	8000550 <__aeabi_dmul>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	4610      	mov	r0, r2
 8001758:	4619      	mov	r1, r3
 800175a:	f7ff f9a9 	bl	8000ab0 <__aeabi_d2f>
 800175e:	4603      	mov	r3, r0
 8001760:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  float var_alpha = (pow(dt, 2)) * var_jerk;
 8001764:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8001768:	f7fe fe9a 	bl	80004a0 <__aeabi_f2d>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	ed9f 1b41 	vldr	d1, [pc, #260]	; 8001878 <main+0x390>
 8001774:	ec43 2b10 	vmov	d0, r2, r3
 8001778:	f004 f968 	bl	8005a4c <pow>
 800177c:	ec55 4b10 	vmov	r4, r5, d0
 8001780:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8001784:	f7fe fe8c 	bl	80004a0 <__aeabi_f2d>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4620      	mov	r0, r4
 800178e:	4629      	mov	r1, r5
 8001790:	f7fe fede 	bl	8000550 <__aeabi_dmul>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4610      	mov	r0, r2
 800179a:	4619      	mov	r1, r3
 800179c:	f7ff f988 	bl	8000ab0 <__aeabi_d2f>
 80017a0:	4603      	mov	r3, r0
 80017a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  float var_theta_omega = ((1 / 12.0) * pow(dt, 5)) * var_jerk;
 80017a6:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 80017aa:	f7fe fe79 	bl	80004a0 <__aeabi_f2d>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	ed9f 1b37 	vldr	d1, [pc, #220]	; 8001890 <main+0x3a8>
 80017b6:	ec43 2b10 	vmov	d0, r2, r3
 80017ba:	f004 f947 	bl	8005a4c <pow>
 80017be:	ec51 0b10 	vmov	r0, r1, d0
 80017c2:	a335      	add	r3, pc, #212	; (adr r3, 8001898 <main+0x3b0>)
 80017c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c8:	f7fe fec2 	bl	8000550 <__aeabi_dmul>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4614      	mov	r4, r2
 80017d2:	461d      	mov	r5, r3
 80017d4:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 80017d8:	f7fe fe62 	bl	80004a0 <__aeabi_f2d>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4620      	mov	r0, r4
 80017e2:	4629      	mov	r1, r5
 80017e4:	f7fe feb4 	bl	8000550 <__aeabi_dmul>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4610      	mov	r0, r2
 80017ee:	4619      	mov	r1, r3
 80017f0:	f7ff f95e 	bl	8000ab0 <__aeabi_d2f>
 80017f4:	4603      	mov	r3, r0
 80017f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  float var_theta_alpha = ((1 / 6.0) * pow(dt, 4)) * var_jerk;
 80017fa:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 80017fe:	f7fe fe4f 	bl	80004a0 <__aeabi_f2d>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	ed9f 1b26 	vldr	d1, [pc, #152]	; 80018a0 <main+0x3b8>
 800180a:	ec43 2b10 	vmov	d0, r2, r3
 800180e:	f004 f91d 	bl	8005a4c <pow>
 8001812:	ec51 0b10 	vmov	r0, r1, d0
 8001816:	a31c      	add	r3, pc, #112	; (adr r3, 8001888 <main+0x3a0>)
 8001818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181c:	f7fe fe98 	bl	8000550 <__aeabi_dmul>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4614      	mov	r4, r2
 8001826:	461d      	mov	r5, r3
 8001828:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800182c:	f7fe fe38 	bl	80004a0 <__aeabi_f2d>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4620      	mov	r0, r4
 8001836:	4629      	mov	r1, r5
 8001838:	f7fe fe8a 	bl	8000550 <__aeabi_dmul>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4610      	mov	r0, r2
 8001842:	4619      	mov	r1, r3
 8001844:	f7ff f934 	bl	8000ab0 <__aeabi_d2f>
 8001848:	4603      	mov	r3, r0
 800184a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  float var_omega_alpha = ((1 / 2.0) * pow(dt, 3))* var_jerk;
 800184e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8001852:	f7fe fe25 	bl	80004a0 <__aeabi_f2d>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	ed9f 1b09 	vldr	d1, [pc, #36]	; 8001880 <main+0x398>
 800185e:	ec43 2b10 	vmov	d0, r2, r3
 8001862:	f004 f8f3 	bl	8005a4c <pow>
 8001866:	ec51 0b10 	vmov	r0, r1, d0
 800186a:	f04f 0200 	mov.w	r2, #0
 800186e:	4b18      	ldr	r3, [pc, #96]	; (80018d0 <main+0x3e8>)
 8001870:	f7fe fe6e 	bl	8000550 <__aeabi_dmul>
 8001874:	e034      	b.n	80018e0 <main+0x3f8>
 8001876:	bf00      	nop
 8001878:	00000000 	.word	0x00000000
 800187c:	40000000 	.word	0x40000000
 8001880:	00000000 	.word	0x00000000
 8001884:	40080000 	.word	0x40080000
 8001888:	55555555 	.word	0x55555555
 800188c:	3fc55555 	.word	0x3fc55555
 8001890:	00000000 	.word	0x00000000
 8001894:	40140000 	.word	0x40140000
 8001898:	55555555 	.word	0x55555555
 800189c:	3fb55555 	.word	0x3fb55555
 80018a0:	00000000 	.word	0x00000000
 80018a4:	40100000 	.word	0x40100000
 80018a8:	200000e0 	.word	0x200000e0
 80018ac:	20000098 	.word	0x20000098
 80018b0:	20000128 	.word	0x20000128
 80018b4:	20000004 	.word	0x20000004
 80018b8:	20000008 	.word	0x20000008
 80018bc:	200001e0 	.word	0x200001e0
 80018c0:	20000000 	.word	0x20000000
 80018c4:	200001e4 	.word	0x200001e4
 80018c8:	200001e8 	.word	0x200001e8
 80018cc:	3c23d70a 	.word	0x3c23d70a
 80018d0:	3fe00000 	.word	0x3fe00000
 80018d4:	3a7c21c6 	.word	0x3a7c21c6
 80018d8:	080068a0 	.word	0x080068a0
 80018dc:	41200000 	.word	0x41200000
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4614      	mov	r4, r2
 80018e6:	461d      	mov	r5, r3
 80018e8:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 80018ec:	f7fe fdd8 	bl	80004a0 <__aeabi_f2d>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4620      	mov	r0, r4
 80018f6:	4629      	mov	r1, r5
 80018f8:	f7fe fe2a 	bl	8000550 <__aeabi_dmul>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4610      	mov	r0, r2
 8001902:	4619      	mov	r1, r3
 8001904:	f7ff f8d4 	bl	8000ab0 <__aeabi_d2f>
 8001908:	4603      	mov	r3, r0
 800190a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  float mat_q[9] = {var_theta, var_theta_omega, var_theta_alpha, var_theta_omega, var_omega, var_omega_alpha, var_theta_alpha, var_omega_alpha, var_alpha };
 800190e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001912:	63bb      	str	r3, [r7, #56]	; 0x38
 8001914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001918:	63fb      	str	r3, [r7, #60]	; 0x3c
 800191a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800191e:	643b      	str	r3, [r7, #64]	; 0x40
 8001920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001924:	647b      	str	r3, [r7, #68]	; 0x44
 8001926:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800192a:	64bb      	str	r3, [r7, #72]	; 0x48
 800192c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001930:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001936:	653b      	str	r3, [r7, #80]	; 0x50
 8001938:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800193c:	657b      	str	r3, [r7, #84]	; 0x54
 800193e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001942:	65bb      	str	r3, [r7, #88]	; 0x58

  A = Create_Matrix(3, 3, mat_a);
 8001944:	4c92      	ldr	r4, [pc, #584]	; (8001b90 <main+0x6a8>)
 8001946:	f107 0008 	add.w	r0, r7, #8
 800194a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800194e:	2203      	movs	r2, #3
 8001950:	2103      	movs	r1, #3
 8001952:	f7ff fa7f 	bl	8000e54 <Create_Matrix>
 8001956:	4625      	mov	r5, r4
 8001958:	f107 0408 	add.w	r4, r7, #8
 800195c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800195e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001960:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001962:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001964:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001968:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  A_T = Transpose(A);
 800196c:	4b89      	ldr	r3, [pc, #548]	; (8001b94 <main+0x6ac>)
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	f107 0c08 	add.w	ip, r7, #8
 8001974:	4e86      	ldr	r6, [pc, #536]	; (8001b90 <main+0x6a8>)
 8001976:	466d      	mov	r5, sp
 8001978:	f106 040c 	add.w	r4, r6, #12
 800197c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800197e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001980:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001984:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001988:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800198c:	4660      	mov	r0, ip
 800198e:	f7ff fc5f 	bl	8001250 <Transpose>
 8001992:	687d      	ldr	r5, [r7, #4]
 8001994:	f107 0408 	add.w	r4, r7, #8
 8001998:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800199a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800199c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800199e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019a0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80019a4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  C = Create_Matrix(1, 3, mat_c);
 80019a8:	4c7b      	ldr	r4, [pc, #492]	; (8001b98 <main+0x6b0>)
 80019aa:	f107 0008 	add.w	r0, r7, #8
 80019ae:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80019b2:	2203      	movs	r2, #3
 80019b4:	2101      	movs	r1, #1
 80019b6:	f7ff fa4d 	bl	8000e54 <Create_Matrix>
 80019ba:	4625      	mov	r5, r4
 80019bc:	f107 0408 	add.w	r4, r7, #8
 80019c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80019cc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  C_T = Transpose(C);
 80019d0:	4b72      	ldr	r3, [pc, #456]	; (8001b9c <main+0x6b4>)
 80019d2:	607b      	str	r3, [r7, #4]
 80019d4:	f107 0c08 	add.w	ip, r7, #8
 80019d8:	4e6f      	ldr	r6, [pc, #444]	; (8001b98 <main+0x6b0>)
 80019da:	466d      	mov	r5, sp
 80019dc:	f106 040c 	add.w	r4, r6, #12
 80019e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019e4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80019e8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80019ec:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80019f0:	4660      	mov	r0, ip
 80019f2:	f7ff fc2d 	bl	8001250 <Transpose>
 80019f6:	687d      	ldr	r5, [r7, #4]
 80019f8:	f107 0408 	add.w	r4, r7, #8
 80019fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a04:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001a08:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  R = Create_Matrix(1, 1, mat_r);
 8001a0c:	4c64      	ldr	r4, [pc, #400]	; (8001ba0 <main+0x6b8>)
 8001a0e:	f107 0008 	add.w	r0, r7, #8
 8001a12:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a16:	2201      	movs	r2, #1
 8001a18:	2101      	movs	r1, #1
 8001a1a:	f7ff fa1b 	bl	8000e54 <Create_Matrix>
 8001a1e:	4625      	mov	r5, r4
 8001a20:	f107 0408 	add.w	r4, r7, #8
 8001a24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a2c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001a30:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  Q = Create_Matrix(3, 3, mat_q);
 8001a34:	4c5b      	ldr	r4, [pc, #364]	; (8001ba4 <main+0x6bc>)
 8001a36:	f107 0008 	add.w	r0, r7, #8
 8001a3a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a3e:	2203      	movs	r2, #3
 8001a40:	2103      	movs	r1, #3
 8001a42:	f7ff fa07 	bl	8000e54 <Create_Matrix>
 8001a46:	4625      	mov	r5, r4
 8001a48:	f107 0408 	add.w	r4, r7, #8
 8001a4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a54:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001a58:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  I = Create_Matrix(3, 3, eye);
 8001a5c:	4c52      	ldr	r4, [pc, #328]	; (8001ba8 <main+0x6c0>)
 8001a5e:	f107 0008 	add.w	r0, r7, #8
 8001a62:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001a66:	2203      	movs	r2, #3
 8001a68:	2103      	movs	r1, #3
 8001a6a:	f7ff f9f3 	bl	8000e54 <Create_Matrix>
 8001a6e:	4625      	mov	r5, r4
 8001a70:	f107 0408 	add.w	r4, r7, #8
 8001a74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a7c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001a80:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  x_k1 = Create_Matrix(3, 1, zero);
 8001a84:	4c49      	ldr	r4, [pc, #292]	; (8001bac <main+0x6c4>)
 8001a86:	f107 0008 	add.w	r0, r7, #8
 8001a8a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a8e:	2201      	movs	r2, #1
 8001a90:	2103      	movs	r1, #3
 8001a92:	f7ff f9df 	bl	8000e54 <Create_Matrix>
 8001a96:	4625      	mov	r5, r4
 8001a98:	f107 0408 	add.w	r4, r7, #8
 8001a9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aa4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001aa8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  p_k1 = Create_Matrix(3, 3, zero);
 8001aac:	4c40      	ldr	r4, [pc, #256]	; (8001bb0 <main+0x6c8>)
 8001aae:	f107 0008 	add.w	r0, r7, #8
 8001ab2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	2103      	movs	r1, #3
 8001aba:	f7ff f9cb 	bl	8000e54 <Create_Matrix>
 8001abe:	4625      	mov	r5, r4
 8001ac0:	f107 0408 	add.w	r4, r7, #8
 8001ac4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ac6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ac8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001acc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001ad0:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  t = (HAL_GetTick() - traject_time - 1000.0)/1000.0;
 8001ad4:	f001 fc28 	bl	8003328 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	4b36      	ldr	r3, [pc, #216]	; (8001bb4 <main+0x6cc>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7fe fcbb 	bl	800045c <__aeabi_ui2d>
 8001ae6:	f04f 0200 	mov.w	r2, #0
 8001aea:	4b33      	ldr	r3, [pc, #204]	; (8001bb8 <main+0x6d0>)
 8001aec:	f7fe fb78 	bl	80001e0 <__aeabi_dsub>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	4b2e      	ldr	r3, [pc, #184]	; (8001bb8 <main+0x6d0>)
 8001afe:	f7fe fe51 	bl	80007a4 <__aeabi_ddiv>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4610      	mov	r0, r2
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f7fe ffd1 	bl	8000ab0 <__aeabi_d2f>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4a2a      	ldr	r2, [pc, #168]	; (8001bbc <main+0x6d4>)
 8001b12:	6013      	str	r3, [r2, #0]
	  if(t >= endtime)
 8001b14:	4b29      	ldr	r3, [pc, #164]	; (8001bbc <main+0x6d4>)
 8001b16:	ed93 7a00 	vldr	s14, [r3]
 8001b1a:	4b29      	ldr	r3, [pc, #164]	; (8001bc0 <main+0x6d8>)
 8001b1c:	edd3 7a00 	vldr	s15, [r3]
 8001b20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b28:	db03      	blt.n	8001b32 <main+0x64a>
	  {
		  state = Steadystate;
 8001b2a:	4b26      	ldr	r3, [pc, #152]	; (8001bc4 <main+0x6dc>)
 8001b2c:	2205      	movs	r2, #5
 8001b2e:	701a      	strb	r2, [r3, #0]
 8001b30:	e7d0      	b.n	8001ad4 <main+0x5ec>
	  }
	  else if(t >= (t_constant + t_acc))
 8001b32:	4b25      	ldr	r3, [pc, #148]	; (8001bc8 <main+0x6e0>)
 8001b34:	ed93 7a00 	vldr	s14, [r3]
 8001b38:	4b24      	ldr	r3, [pc, #144]	; (8001bcc <main+0x6e4>)
 8001b3a:	edd3 7a00 	vldr	s15, [r3]
 8001b3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b42:	4b1e      	ldr	r3, [pc, #120]	; (8001bbc <main+0x6d4>)
 8001b44:	edd3 7a00 	vldr	s15, [r3]
 8001b48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b50:	d803      	bhi.n	8001b5a <main+0x672>
	  {
		  state = Decelelation;
 8001b52:	4b1c      	ldr	r3, [pc, #112]	; (8001bc4 <main+0x6dc>)
 8001b54:	2204      	movs	r2, #4
 8001b56:	701a      	strb	r2, [r3, #0]
 8001b58:	e7bc      	b.n	8001ad4 <main+0x5ec>
	  }
	  else if(t >= t_acc)
 8001b5a:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <main+0x6d4>)
 8001b5c:	ed93 7a00 	vldr	s14, [r3]
 8001b60:	4b1a      	ldr	r3, [pc, #104]	; (8001bcc <main+0x6e4>)
 8001b62:	edd3 7a00 	vldr	s15, [r3]
 8001b66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b6e:	db03      	blt.n	8001b78 <main+0x690>
	  {
		  state = Constant;
 8001b70:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <main+0x6dc>)
 8001b72:	2203      	movs	r2, #3
 8001b74:	701a      	strb	r2, [r3, #0]
 8001b76:	e7ad      	b.n	8001ad4 <main+0x5ec>
	  }
	  else if(t >= 0)
 8001b78:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <main+0x6d4>)
 8001b7a:	edd3 7a00 	vldr	s15, [r3]
 8001b7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b86:	db02      	blt.n	8001b8e <main+0x6a6>
	  {
		  state = Accerelation;
 8001b88:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <main+0x6dc>)
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	701a      	strb	r2, [r3, #0]
	  t = (HAL_GetTick() - traject_time - 1000.0)/1000.0;
 8001b8e:	e7a1      	b.n	8001ad4 <main+0x5ec>
 8001b90:	20000210 	.word	0x20000210
 8001b94:	200003f4 	.word	0x200003f4
 8001b98:	2000023c 	.word	0x2000023c
 8001b9c:	20000420 	.word	0x20000420
 8001ba0:	20000268 	.word	0x20000268
 8001ba4:	20000294 	.word	0x20000294
 8001ba8:	200004fc 	.word	0x200004fc
 8001bac:	200002ec 	.word	0x200002ec
 8001bb0:	200003c8 	.word	0x200003c8
 8001bb4:	200001d0 	.word	0x200001d0
 8001bb8:	408f4000 	.word	0x408f4000
 8001bbc:	200001dc 	.word	0x200001dc
 8001bc0:	200001e0 	.word	0x200001e0
 8001bc4:	200001cc 	.word	0x200001cc
 8001bc8:	20000008 	.word	0x20000008
 8001bcc:	20000004 	.word	0x20000004

08001bd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b094      	sub	sp, #80	; 0x50
 8001bd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bd6:	f107 0320 	add.w	r3, r7, #32
 8001bda:	2230      	movs	r2, #48	; 0x30
 8001bdc:	2100      	movs	r1, #0
 8001bde:	4618      	mov	r0, r3
 8001be0:	f003 ff2c 	bl	8005a3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001be4:	f107 030c 	add.w	r3, r7, #12
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	4b27      	ldr	r3, [pc, #156]	; (8001c98 <SystemClock_Config+0xc8>)
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	4a26      	ldr	r2, [pc, #152]	; (8001c98 <SystemClock_Config+0xc8>)
 8001bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c02:	6413      	str	r3, [r2, #64]	; 0x40
 8001c04:	4b24      	ldr	r3, [pc, #144]	; (8001c98 <SystemClock_Config+0xc8>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c10:	2300      	movs	r3, #0
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	4b21      	ldr	r3, [pc, #132]	; (8001c9c <SystemClock_Config+0xcc>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a20      	ldr	r2, [pc, #128]	; (8001c9c <SystemClock_Config+0xcc>)
 8001c1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	4b1e      	ldr	r3, [pc, #120]	; (8001c9c <SystemClock_Config+0xcc>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c30:	2301      	movs	r3, #1
 8001c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c34:	2310      	movs	r3, #16
 8001c36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c40:	2308      	movs	r3, #8
 8001c42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001c44:	2364      	movs	r3, #100	; 0x64
 8001c46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c4c:	2304      	movs	r3, #4
 8001c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c50:	f107 0320 	add.w	r3, r7, #32
 8001c54:	4618      	mov	r0, r3
 8001c56:	f001 fe23 	bl	80038a0 <HAL_RCC_OscConfig>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c60:	f001 f958 	bl	8002f14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c64:	230f      	movs	r3, #15
 8001c66:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c7a:	f107 030c 	add.w	r3, r7, #12
 8001c7e:	2103      	movs	r1, #3
 8001c80:	4618      	mov	r0, r3
 8001c82:	f002 f885 	bl	8003d90 <HAL_RCC_ClockConfig>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001c8c:	f001 f942 	bl	8002f14 <Error_Handler>
  }
}
 8001c90:	bf00      	nop
 8001c92:	3750      	adds	r7, #80	; 0x50
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40007000 	.word	0x40007000

08001ca0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b096      	sub	sp, #88	; 0x58
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ca6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	609a      	str	r2, [r3, #8]
 8001cb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cb4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	605a      	str	r2, [r3, #4]
 8001cc8:	609a      	str	r2, [r3, #8]
 8001cca:	60da      	str	r2, [r3, #12]
 8001ccc:	611a      	str	r2, [r3, #16]
 8001cce:	615a      	str	r2, [r3, #20]
 8001cd0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cd2:	1d3b      	adds	r3, r7, #4
 8001cd4:	2220      	movs	r2, #32
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f003 feaf 	bl	8005a3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001cde:	4b3e      	ldr	r3, [pc, #248]	; (8001dd8 <MX_TIM1_Init+0x138>)
 8001ce0:	4a3e      	ldr	r2, [pc, #248]	; (8001ddc <MX_TIM1_Init+0x13c>)
 8001ce2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ce4:	4b3c      	ldr	r3, [pc, #240]	; (8001dd8 <MX_TIM1_Init+0x138>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cea:	4b3b      	ldr	r3, [pc, #236]	; (8001dd8 <MX_TIM1_Init+0x138>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 8001cf0:	4b39      	ldr	r3, [pc, #228]	; (8001dd8 <MX_TIM1_Init+0x138>)
 8001cf2:	f241 3287 	movw	r2, #4999	; 0x1387
 8001cf6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cf8:	4b37      	ldr	r3, [pc, #220]	; (8001dd8 <MX_TIM1_Init+0x138>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cfe:	4b36      	ldr	r3, [pc, #216]	; (8001dd8 <MX_TIM1_Init+0x138>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d04:	4b34      	ldr	r3, [pc, #208]	; (8001dd8 <MX_TIM1_Init+0x138>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d0a:	4833      	ldr	r0, [pc, #204]	; (8001dd8 <MX_TIM1_Init+0x138>)
 8001d0c:	f002 fa60 	bl	80041d0 <HAL_TIM_Base_Init>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001d16:	f001 f8fd 	bl	8002f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d1e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d20:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d24:	4619      	mov	r1, r3
 8001d26:	482c      	ldr	r0, [pc, #176]	; (8001dd8 <MX_TIM1_Init+0x138>)
 8001d28:	f002 ff0c 	bl	8004b44 <HAL_TIM_ConfigClockSource>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001d32:	f001 f8ef 	bl	8002f14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d36:	4828      	ldr	r0, [pc, #160]	; (8001dd8 <MX_TIM1_Init+0x138>)
 8001d38:	f002 fafc 	bl	8004334 <HAL_TIM_PWM_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001d42:	f001 f8e7 	bl	8002f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d46:	2300      	movs	r3, #0
 8001d48:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d4e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d52:	4619      	mov	r1, r3
 8001d54:	4820      	ldr	r0, [pc, #128]	; (8001dd8 <MX_TIM1_Init+0x138>)
 8001d56:	f003 fab1 	bl	80052bc <HAL_TIMEx_MasterConfigSynchronization>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001d60:	f001 f8d8 	bl	8002f14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d64:	2360      	movs	r3, #96	; 0x60
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d70:	2300      	movs	r3, #0
 8001d72:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d74:	2300      	movs	r3, #0
 8001d76:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d84:	2200      	movs	r2, #0
 8001d86:	4619      	mov	r1, r3
 8001d88:	4813      	ldr	r0, [pc, #76]	; (8001dd8 <MX_TIM1_Init+0x138>)
 8001d8a:	f002 fe19 	bl	80049c0 <HAL_TIM_PWM_ConfigChannel>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001d94:	f001 f8be 	bl	8002f14 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001da0:	2300      	movs	r3, #0
 8001da2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001dac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001db0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001db2:	2300      	movs	r3, #0
 8001db4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001db6:	1d3b      	adds	r3, r7, #4
 8001db8:	4619      	mov	r1, r3
 8001dba:	4807      	ldr	r0, [pc, #28]	; (8001dd8 <MX_TIM1_Init+0x138>)
 8001dbc:	f003 faec 	bl	8005398 <HAL_TIMEx_ConfigBreakDeadTime>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001dc6:	f001 f8a5 	bl	8002f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001dca:	4803      	ldr	r0, [pc, #12]	; (8001dd8 <MX_TIM1_Init+0x138>)
 8001dcc:	f001 f954 	bl	8003078 <HAL_TIM_MspPostInit>

}
 8001dd0:	bf00      	nop
 8001dd2:	3758      	adds	r7, #88	; 0x58
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20000098 	.word	0x20000098
 8001ddc:	40010000 	.word	0x40010000

08001de0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08c      	sub	sp, #48	; 0x30
 8001de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001de6:	f107 030c 	add.w	r3, r7, #12
 8001dea:	2224      	movs	r2, #36	; 0x24
 8001dec:	2100      	movs	r1, #0
 8001dee:	4618      	mov	r0, r3
 8001df0:	f003 fe24 	bl	8005a3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df4:	1d3b      	adds	r3, r7, #4
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dfc:	4b21      	ldr	r3, [pc, #132]	; (8001e84 <MX_TIM2_Init+0xa4>)
 8001dfe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e04:	4b1f      	ldr	r3, [pc, #124]	; (8001e84 <MX_TIM2_Init+0xa4>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e0a:	4b1e      	ldr	r3, [pc, #120]	; (8001e84 <MX_TIM2_Init+0xa4>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001e10:	4b1c      	ldr	r3, [pc, #112]	; (8001e84 <MX_TIM2_Init+0xa4>)
 8001e12:	f04f 32ff 	mov.w	r2, #4294967295
 8001e16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e18:	4b1a      	ldr	r3, [pc, #104]	; (8001e84 <MX_TIM2_Init+0xa4>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e1e:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <MX_TIM2_Init+0xa4>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e24:	2303      	movs	r3, #3
 8001e26:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e30:	2300      	movs	r3, #0
 8001e32:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e40:	2300      	movs	r3, #0
 8001e42:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001e48:	f107 030c 	add.w	r3, r7, #12
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	480d      	ldr	r0, [pc, #52]	; (8001e84 <MX_TIM2_Init+0xa4>)
 8001e50:	f002 fb7a 	bl	8004548 <HAL_TIM_Encoder_Init>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001e5a:	f001 f85b 	bl	8002f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e62:	2300      	movs	r3, #0
 8001e64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e66:	1d3b      	adds	r3, r7, #4
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4806      	ldr	r0, [pc, #24]	; (8001e84 <MX_TIM2_Init+0xa4>)
 8001e6c:	f003 fa26 	bl	80052bc <HAL_TIMEx_MasterConfigSynchronization>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001e76:	f001 f84d 	bl	8002f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e7a:	bf00      	nop
 8001e7c:	3730      	adds	r7, #48	; 0x30
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	200000e0 	.word	0x200000e0

08001e88 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e8e:	f107 0308 	add.w	r3, r7, #8
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	609a      	str	r2, [r3, #8]
 8001e9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e9c:	463b      	mov	r3, r7
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ea4:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <MX_TIM5_Init+0x94>)
 8001ea6:	4a1e      	ldr	r2, [pc, #120]	; (8001f20 <MX_TIM5_Init+0x98>)
 8001ea8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 999;
 8001eaa:	4b1c      	ldr	r3, [pc, #112]	; (8001f1c <MX_TIM5_Init+0x94>)
 8001eac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001eb0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb2:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <MX_TIM5_Init+0x94>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8001eb8:	4b18      	ldr	r3, [pc, #96]	; (8001f1c <MX_TIM5_Init+0x94>)
 8001eba:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ebe:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec0:	4b16      	ldr	r3, [pc, #88]	; (8001f1c <MX_TIM5_Init+0x94>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec6:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <MX_TIM5_Init+0x94>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001ecc:	4813      	ldr	r0, [pc, #76]	; (8001f1c <MX_TIM5_Init+0x94>)
 8001ece:	f002 f97f 	bl	80041d0 <HAL_TIM_Base_Init>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001ed8:	f001 f81c 	bl	8002f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ee0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001ee2:	f107 0308 	add.w	r3, r7, #8
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	480c      	ldr	r0, [pc, #48]	; (8001f1c <MX_TIM5_Init+0x94>)
 8001eea:	f002 fe2b 	bl	8004b44 <HAL_TIM_ConfigClockSource>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001ef4:	f001 f80e 	bl	8002f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001efc:	2300      	movs	r3, #0
 8001efe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f00:	463b      	mov	r3, r7
 8001f02:	4619      	mov	r1, r3
 8001f04:	4805      	ldr	r0, [pc, #20]	; (8001f1c <MX_TIM5_Init+0x94>)
 8001f06:	f003 f9d9 	bl	80052bc <HAL_TIMEx_MasterConfigSynchronization>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001f10:	f001 f800 	bl	8002f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001f14:	bf00      	nop
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20000128 	.word	0x20000128
 8001f20:	40000c00 	.word	0x40000c00

08001f24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f28:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <MX_USART2_UART_Init+0x4c>)
 8001f2a:	4a12      	ldr	r2, [pc, #72]	; (8001f74 <MX_USART2_UART_Init+0x50>)
 8001f2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f2e:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <MX_USART2_UART_Init+0x4c>)
 8001f30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f36:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <MX_USART2_UART_Init+0x4c>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <MX_USART2_UART_Init+0x4c>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f42:	4b0b      	ldr	r3, [pc, #44]	; (8001f70 <MX_USART2_UART_Init+0x4c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f48:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <MX_USART2_UART_Init+0x4c>)
 8001f4a:	220c      	movs	r2, #12
 8001f4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f4e:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <MX_USART2_UART_Init+0x4c>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f54:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <MX_USART2_UART_Init+0x4c>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f5a:	4805      	ldr	r0, [pc, #20]	; (8001f70 <MX_USART2_UART_Init+0x4c>)
 8001f5c:	f003 fa82 	bl	8005464 <HAL_UART_Init>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f66:	f000 ffd5 	bl	8002f14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000170 	.word	0x20000170
 8001f74:	40004400 	.word	0x40004400

08001f78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08a      	sub	sp, #40	; 0x28
 8001f7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7e:	f107 0314 	add.w	r3, r7, #20
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	605a      	str	r2, [r3, #4]
 8001f88:	609a      	str	r2, [r3, #8]
 8001f8a:	60da      	str	r2, [r3, #12]
 8001f8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	613b      	str	r3, [r7, #16]
 8001f92:	4b39      	ldr	r3, [pc, #228]	; (8002078 <MX_GPIO_Init+0x100>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	4a38      	ldr	r2, [pc, #224]	; (8002078 <MX_GPIO_Init+0x100>)
 8001f98:	f043 0304 	orr.w	r3, r3, #4
 8001f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9e:	4b36      	ldr	r3, [pc, #216]	; (8002078 <MX_GPIO_Init+0x100>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f003 0304 	and.w	r3, r3, #4
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	4b32      	ldr	r3, [pc, #200]	; (8002078 <MX_GPIO_Init+0x100>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	4a31      	ldr	r2, [pc, #196]	; (8002078 <MX_GPIO_Init+0x100>)
 8001fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fba:	4b2f      	ldr	r3, [pc, #188]	; (8002078 <MX_GPIO_Init+0x100>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	4b2b      	ldr	r3, [pc, #172]	; (8002078 <MX_GPIO_Init+0x100>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	4a2a      	ldr	r2, [pc, #168]	; (8002078 <MX_GPIO_Init+0x100>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd6:	4b28      	ldr	r3, [pc, #160]	; (8002078 <MX_GPIO_Init+0x100>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	60bb      	str	r3, [r7, #8]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	607b      	str	r3, [r7, #4]
 8001fe6:	4b24      	ldr	r3, [pc, #144]	; (8002078 <MX_GPIO_Init+0x100>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	4a23      	ldr	r2, [pc, #140]	; (8002078 <MX_GPIO_Init+0x100>)
 8001fec:	f043 0302 	orr.w	r3, r3, #2
 8001ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff2:	4b21      	ldr	r3, [pc, #132]	; (8002078 <MX_GPIO_Init+0x100>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	607b      	str	r3, [r7, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8001ffe:	2200      	movs	r2, #0
 8002000:	f44f 7108 	mov.w	r1, #544	; 0x220
 8002004:	481d      	ldr	r0, [pc, #116]	; (800207c <MX_GPIO_Init+0x104>)
 8002006:	f001 fc31 	bl	800386c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800200a:	2200      	movs	r2, #0
 800200c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002010:	481b      	ldr	r0, [pc, #108]	; (8002080 <MX_GPIO_Init+0x108>)
 8002012:	f001 fc2b 	bl	800386c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002016:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800201a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800201c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002020:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002026:	f107 0314 	add.w	r3, r7, #20
 800202a:	4619      	mov	r1, r3
 800202c:	4815      	ldr	r0, [pc, #84]	; (8002084 <MX_GPIO_Init+0x10c>)
 800202e:	f001 fa99 	bl	8003564 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 8002032:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002036:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002038:	2301      	movs	r3, #1
 800203a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002040:	2300      	movs	r3, #0
 8002042:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	4619      	mov	r1, r3
 800204a:	480c      	ldr	r0, [pc, #48]	; (800207c <MX_GPIO_Init+0x104>)
 800204c:	f001 fa8a 	bl	8003564 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002050:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002054:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002056:	2301      	movs	r3, #1
 8002058:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205e:	2300      	movs	r3, #0
 8002060:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002062:	f107 0314 	add.w	r3, r7, #20
 8002066:	4619      	mov	r1, r3
 8002068:	4805      	ldr	r0, [pc, #20]	; (8002080 <MX_GPIO_Init+0x108>)
 800206a:	f001 fa7b 	bl	8003564 <HAL_GPIO_Init>

}
 800206e:	bf00      	nop
 8002070:	3728      	adds	r7, #40	; 0x28
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40023800 	.word	0x40023800
 800207c:	40020000 	.word	0x40020000
 8002080:	40020400 	.word	0x40020400
 8002084:	40020800 	.word	0x40020800

08002088 <Drivemotor>:

/* USER CODE BEGIN 4 */

void Drivemotor(float PWM)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(PWM<0 && PWM>=-5000)
 8002092:	edd7 7a01 	vldr	s15, [r7, #4]
 8002096:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800209a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800209e:	d51a      	bpl.n	80020d6 <Drivemotor+0x4e>
 80020a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80020a4:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002174 <Drivemotor+0xec>
 80020a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b0:	db11      	blt.n	80020d6 <Drivemotor+0x4e>
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1 , -1*PWM);
 80020b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80020b6:	eef1 7a67 	vneg.f32	s15, s15
 80020ba:	4b2f      	ldr	r3, [pc, #188]	; (8002178 <Drivemotor+0xf0>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020c2:	ee17 2a90 	vmov	r2, s15
 80020c6:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 80020c8:	2201      	movs	r2, #1
 80020ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020ce:	482b      	ldr	r0, [pc, #172]	; (800217c <Drivemotor+0xf4>)
 80020d0:	f001 fbcc 	bl	800386c <HAL_GPIO_WritePin>
 80020d4:	e04a      	b.n	800216c <Drivemotor+0xe4>
	}
	else if (PWM<-5000)
 80020d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80020da:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002174 <Drivemotor+0xec>
 80020de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e6:	d50b      	bpl.n	8002100 <Drivemotor+0x78>
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1 , 5000);
 80020e8:	4b23      	ldr	r3, [pc, #140]	; (8002178 <Drivemotor+0xf0>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f0:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 80020f2:	2201      	movs	r2, #1
 80020f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020f8:	4820      	ldr	r0, [pc, #128]	; (800217c <Drivemotor+0xf4>)
 80020fa:	f001 fbb7 	bl	800386c <HAL_GPIO_WritePin>
	else if(PWM>5000)
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1 , 5000);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
	}
}
 80020fe:	e035      	b.n	800216c <Drivemotor+0xe4>
	else if(PWM>=0 && PWM<=5000)
 8002100:	edd7 7a01 	vldr	s15, [r7, #4]
 8002104:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800210c:	db18      	blt.n	8002140 <Drivemotor+0xb8>
 800210e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002112:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002180 <Drivemotor+0xf8>
 8002116:	eef4 7ac7 	vcmpe.f32	s15, s14
 800211a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800211e:	d80f      	bhi.n	8002140 <Drivemotor+0xb8>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1 , PWM);
 8002120:	4b15      	ldr	r3, [pc, #84]	; (8002178 <Drivemotor+0xf0>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	edd7 7a01 	vldr	s15, [r7, #4]
 8002128:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800212c:	ee17 2a90 	vmov	r2, s15
 8002130:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8002132:	2200      	movs	r2, #0
 8002134:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002138:	4810      	ldr	r0, [pc, #64]	; (800217c <Drivemotor+0xf4>)
 800213a:	f001 fb97 	bl	800386c <HAL_GPIO_WritePin>
 800213e:	e015      	b.n	800216c <Drivemotor+0xe4>
	else if(PWM>5000)
 8002140:	edd7 7a01 	vldr	s15, [r7, #4]
 8002144:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002180 <Drivemotor+0xf8>
 8002148:	eef4 7ac7 	vcmpe.f32	s15, s14
 800214c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002150:	dc00      	bgt.n	8002154 <Drivemotor+0xcc>
}
 8002152:	e00b      	b.n	800216c <Drivemotor+0xe4>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1 , 5000);
 8002154:	4b08      	ldr	r3, [pc, #32]	; (8002178 <Drivemotor+0xf0>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f241 3288 	movw	r2, #5000	; 0x1388
 800215c:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 800215e:	2200      	movs	r2, #0
 8002160:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002164:	4805      	ldr	r0, [pc, #20]	; (800217c <Drivemotor+0xf4>)
 8002166:	f001 fb81 	bl	800386c <HAL_GPIO_WritePin>
}
 800216a:	e7ff      	b.n	800216c <Drivemotor+0xe4>
 800216c:	bf00      	nop
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	c59c4000 	.word	0xc59c4000
 8002178:	20000098 	.word	0x20000098
 800217c:	40020000 	.word	0x40020000
 8002180:	459c4000 	.word	0x459c4000
 8002184:	00000000 	.word	0x00000000

08002188 <PID_Controller_Innerloop>:

float PID_Controller_Innerloop(float Error1)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	ed87 0a01 	vstr	s0, [r7, #4]
	static float Output1[2] = {0};
	static float error1[3] = {0};
	float Sampletime = 1/100.0 ;
 8002192:	4b33      	ldr	r3, [pc, #204]	; (8002260 <PID_Controller_Innerloop+0xd8>)
 8002194:	617b      	str	r3, [r7, #20]
	float Kp1 = 0.82586 ;
 8002196:	4b33      	ldr	r3, [pc, #204]	; (8002264 <PID_Controller_Innerloop+0xdc>)
 8002198:	613b      	str	r3, [r7, #16]
	float Ki1 = Sampletime * (0.82586 * 9.92);
 800219a:	6978      	ldr	r0, [r7, #20]
 800219c:	f7fe f980 	bl	80004a0 <__aeabi_f2d>
 80021a0:	a32d      	add	r3, pc, #180	; (adr r3, 8002258 <PID_Controller_Innerloop+0xd0>)
 80021a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a6:	f7fe f9d3 	bl	8000550 <__aeabi_dmul>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	4610      	mov	r0, r2
 80021b0:	4619      	mov	r1, r3
 80021b2:	f7fe fc7d 	bl	8000ab0 <__aeabi_d2f>
 80021b6:	4603      	mov	r3, r0
 80021b8:	60fb      	str	r3, [r7, #12]
	float Kd1 = 0.0 / Sampletime;
 80021ba:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002268 <PID_Controller_Innerloop+0xe0>
 80021be:	ed97 7a05 	vldr	s14, [r7, #20]
 80021c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021c6:	edc7 7a02 	vstr	s15, [r7, #8]

	error1[0] = Error1;
 80021ca:	4a28      	ldr	r2, [pc, #160]	; (800226c <PID_Controller_Innerloop+0xe4>)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6013      	str	r3, [r2, #0]
	Output1[0] = Output1[1] + ( (Kp1+Ki1+Kd1)*error1[0] ) - ( (Kp1 + (2*Kd1))*error1[1] ) + (Kd1*error1[2]);
 80021d0:	4b27      	ldr	r3, [pc, #156]	; (8002270 <PID_Controller_Innerloop+0xe8>)
 80021d2:	ed93 7a01 	vldr	s14, [r3, #4]
 80021d6:	edd7 6a04 	vldr	s13, [r7, #16]
 80021da:	edd7 7a03 	vldr	s15, [r7, #12]
 80021de:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80021e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80021e6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80021ea:	4b20      	ldr	r3, [pc, #128]	; (800226c <PID_Controller_Innerloop+0xe4>)
 80021ec:	edd3 7a00 	vldr	s15, [r3]
 80021f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80021fc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002200:	edd7 7a04 	vldr	s15, [r7, #16]
 8002204:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002208:	4b18      	ldr	r3, [pc, #96]	; (800226c <PID_Controller_Innerloop+0xe4>)
 800220a:	edd3 7a01 	vldr	s15, [r3, #4]
 800220e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002212:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002216:	4b15      	ldr	r3, [pc, #84]	; (800226c <PID_Controller_Innerloop+0xe4>)
 8002218:	edd3 6a02 	vldr	s13, [r3, #8]
 800221c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002220:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002224:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002228:	4b11      	ldr	r3, [pc, #68]	; (8002270 <PID_Controller_Innerloop+0xe8>)
 800222a:	edc3 7a00 	vstr	s15, [r3]
	Output1[1] = Output1[0];
 800222e:	4b10      	ldr	r3, [pc, #64]	; (8002270 <PID_Controller_Innerloop+0xe8>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a0f      	ldr	r2, [pc, #60]	; (8002270 <PID_Controller_Innerloop+0xe8>)
 8002234:	6053      	str	r3, [r2, #4]
	error1[2] = error1[1];
 8002236:	4b0d      	ldr	r3, [pc, #52]	; (800226c <PID_Controller_Innerloop+0xe4>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	4a0c      	ldr	r2, [pc, #48]	; (800226c <PID_Controller_Innerloop+0xe4>)
 800223c:	6093      	str	r3, [r2, #8]
	error1[1] = error1[0];
 800223e:	4b0b      	ldr	r3, [pc, #44]	; (800226c <PID_Controller_Innerloop+0xe4>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a0a      	ldr	r2, [pc, #40]	; (800226c <PID_Controller_Innerloop+0xe4>)
 8002244:	6053      	str	r3, [r2, #4]

	return Output1[0];
 8002246:	4b0a      	ldr	r3, [pc, #40]	; (8002270 <PID_Controller_Innerloop+0xe8>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	ee07 3a90 	vmov	s15, r3
}
 800224e:	eeb0 0a67 	vmov.f32	s0, s15
 8002252:	3718      	adds	r7, #24
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	730eeb55 	.word	0x730eeb55
 800225c:	40206293 	.word	0x40206293
 8002260:	3c23d70a 	.word	0x3c23d70a
 8002264:	3f536b90 	.word	0x3f536b90
 8002268:	00000000 	.word	0x00000000
 800226c:	20000540 	.word	0x20000540
 8002270:	2000054c 	.word	0x2000054c
 8002274:	00000000 	.word	0x00000000

08002278 <PID_Controller_Outerloop>:

float PID_Controller_Outerloop(float Error1)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	ed87 0a01 	vstr	s0, [r7, #4]
	static float Output2[2] = {0};
	static float error2[3] = {0};
	float Sampletime = 1/100.0 ;
 8002282:	4b35      	ldr	r3, [pc, #212]	; (8002358 <PID_Controller_Outerloop+0xe0>)
 8002284:	617b      	str	r3, [r7, #20]
	float Kp2 = 0.2381*1.647 ;
 8002286:	4b35      	ldr	r3, [pc, #212]	; (800235c <PID_Controller_Outerloop+0xe4>)
 8002288:	613b      	str	r3, [r7, #16]
	float Ki2 = Sampletime * 0.0;
 800228a:	edd7 7a05 	vldr	s15, [r7, #20]
 800228e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002360 <PID_Controller_Outerloop+0xe8>
 8002292:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002296:	edc7 7a03 	vstr	s15, [r7, #12]
	float Kd2 = 0.2381/Sampletime;
 800229a:	6978      	ldr	r0, [r7, #20]
 800229c:	f7fe f900 	bl	80004a0 <__aeabi_f2d>
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	a12a      	add	r1, pc, #168	; (adr r1, 8002350 <PID_Controller_Outerloop+0xd8>)
 80022a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80022aa:	f7fe fa7b 	bl	80007a4 <__aeabi_ddiv>
 80022ae:	4602      	mov	r2, r0
 80022b0:	460b      	mov	r3, r1
 80022b2:	4610      	mov	r0, r2
 80022b4:	4619      	mov	r1, r3
 80022b6:	f7fe fbfb 	bl	8000ab0 <__aeabi_d2f>
 80022ba:	4603      	mov	r3, r0
 80022bc:	60bb      	str	r3, [r7, #8]

	error2[0] = Error1;
 80022be:	4a29      	ldr	r2, [pc, #164]	; (8002364 <PID_Controller_Outerloop+0xec>)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6013      	str	r3, [r2, #0]
	Output2[0] = Output2[1] + ( (Kp2+Ki2+Kd2)*error2[0] ) - ( (Kp2 + (2*Kd2))*error2[1] ) + (Kd2*error2[2]);
 80022c4:	4b28      	ldr	r3, [pc, #160]	; (8002368 <PID_Controller_Outerloop+0xf0>)
 80022c6:	ed93 7a01 	vldr	s14, [r3, #4]
 80022ca:	edd7 6a04 	vldr	s13, [r7, #16]
 80022ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80022d2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80022d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80022da:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80022de:	4b21      	ldr	r3, [pc, #132]	; (8002364 <PID_Controller_Outerloop+0xec>)
 80022e0:	edd3 7a00 	vldr	s15, [r3]
 80022e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80022f0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80022f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80022f8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80022fc:	4b19      	ldr	r3, [pc, #100]	; (8002364 <PID_Controller_Outerloop+0xec>)
 80022fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8002302:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002306:	ee37 7a67 	vsub.f32	s14, s14, s15
 800230a:	4b16      	ldr	r3, [pc, #88]	; (8002364 <PID_Controller_Outerloop+0xec>)
 800230c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002310:	edd7 7a02 	vldr	s15, [r7, #8]
 8002314:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002318:	ee77 7a27 	vadd.f32	s15, s14, s15
 800231c:	4b12      	ldr	r3, [pc, #72]	; (8002368 <PID_Controller_Outerloop+0xf0>)
 800231e:	edc3 7a00 	vstr	s15, [r3]
	Output2[1] = Output2[0];
 8002322:	4b11      	ldr	r3, [pc, #68]	; (8002368 <PID_Controller_Outerloop+0xf0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a10      	ldr	r2, [pc, #64]	; (8002368 <PID_Controller_Outerloop+0xf0>)
 8002328:	6053      	str	r3, [r2, #4]
	error2[2] = error2[1];
 800232a:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <PID_Controller_Outerloop+0xec>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	4a0d      	ldr	r2, [pc, #52]	; (8002364 <PID_Controller_Outerloop+0xec>)
 8002330:	6093      	str	r3, [r2, #8]
	error2[1] = error2[0];
 8002332:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <PID_Controller_Outerloop+0xec>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a0b      	ldr	r2, [pc, #44]	; (8002364 <PID_Controller_Outerloop+0xec>)
 8002338:	6053      	str	r3, [r2, #4]

	return Output2[0];
 800233a:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <PID_Controller_Outerloop+0xf0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	ee07 3a90 	vmov	s15, r3
}
 8002342:	eeb0 0a67 	vmov.f32	s0, s15
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	f3af 8000 	nop.w
 8002350:	9096bb99 	.word	0x9096bb99
 8002354:	3fce7a0f 	.word	0x3fce7a0f
 8002358:	3c23d70a 	.word	0x3c23d70a
 800235c:	3ec8c7fa 	.word	0x3ec8c7fa
 8002360:	00000000 	.word	0x00000000
 8002364:	20000554 	.word	0x20000554
 8002368:	20000560 	.word	0x20000560
 800236c:	00000000 	.word	0x00000000

08002370 <KalmanFilter>:

float KalmanFilter(float Input)
{
 8002370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002372:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8002376:	af14      	add	r7, sp, #80	; 0x50
 8002378:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800237c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002380:	ed83 0a00 	vstr	s0, [r3]
	ti = aa / 100.0;
 8002384:	4bbf      	ldr	r3, [pc, #764]	; (8002684 <KalmanFilter+0x314>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f7fe f877 	bl	800047c <__aeabi_i2d>
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	4bbd      	ldr	r3, [pc, #756]	; (8002688 <KalmanFilter+0x318>)
 8002394:	f7fe fa06 	bl	80007a4 <__aeabi_ddiv>
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	4610      	mov	r0, r2
 800239e:	4619      	mov	r1, r3
 80023a0:	f7fe fb86 	bl	8000ab0 <__aeabi_d2f>
 80023a4:	4603      	mov	r3, r0
 80023a6:	4ab9      	ldr	r2, [pc, #740]	; (800268c <KalmanFilter+0x31c>)
 80023a8:	6013      	str	r3, [r2, #0]
	tk = ti;
 80023aa:	4bb8      	ldr	r3, [pc, #736]	; (800268c <KalmanFilter+0x31c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4ab8      	ldr	r2, [pc, #736]	; (8002690 <KalmanFilter+0x320>)
 80023b0:	6013      	str	r3, [r2, #0]
	sensor[0] = Input;
 80023b2:	4ab8      	ldr	r2, [pc, #736]	; (8002694 <KalmanFilter+0x324>)
 80023b4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80023b8:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6013      	str	r3, [r2, #0]
	z_k = Create_Matrix(1, 1, sensor);
 80023c0:	4cb5      	ldr	r4, [pc, #724]	; (8002698 <KalmanFilter+0x328>)
 80023c2:	f107 0008 	add.w	r0, r7, #8
 80023c6:	4bb3      	ldr	r3, [pc, #716]	; (8002694 <KalmanFilter+0x324>)
 80023c8:	2201      	movs	r2, #1
 80023ca:	2101      	movs	r1, #1
 80023cc:	f7fe fd42 	bl	8000e54 <Create_Matrix>
 80023d0:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80023d4:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80023d8:	461d      	mov	r5, r3
 80023da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80023e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	//Predict//
	xp_k = Multiply(A, x_k1);
 80023ea:	4bac      	ldr	r3, [pc, #688]	; (800269c <KalmanFilter+0x32c>)
 80023ec:	607b      	str	r3, [r7, #4]
 80023ee:	f107 0c08 	add.w	ip, r7, #8
 80023f2:	4eab      	ldr	r6, [pc, #684]	; (80026a0 <KalmanFilter+0x330>)
 80023f4:	4bab      	ldr	r3, [pc, #684]	; (80026a4 <KalmanFilter+0x334>)
 80023f6:	ac08      	add	r4, sp, #32
 80023f8:	461d      	mov	r5, r3
 80023fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002400:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002402:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002406:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800240a:	466d      	mov	r5, sp
 800240c:	f106 040c 	add.w	r4, r6, #12
 8002410:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002412:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002414:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002418:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800241c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002420:	4660      	mov	r0, ip
 8002422:	f7fe fd88 	bl	8000f36 <Multiply>
 8002426:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800242a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800242e:	687c      	ldr	r4, [r7, #4]
 8002430:	461d      	mov	r5, r3
 8002432:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002434:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002436:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002438:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800243a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800243e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	pp_k = Sum(Multiply(Multiply(A, p_k1), A_T), Q);
 8002442:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8002446:	f5a3 7cc6 	sub.w	ip, r3, #396	; 0x18c
 800244a:	4e95      	ldr	r6, [pc, #596]	; (80026a0 <KalmanFilter+0x330>)
 800244c:	4b96      	ldr	r3, [pc, #600]	; (80026a8 <KalmanFilter+0x338>)
 800244e:	ac08      	add	r4, sp, #32
 8002450:	461d      	mov	r5, r3
 8002452:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002454:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002456:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002458:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800245a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800245e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002462:	466d      	mov	r5, sp
 8002464:	f106 040c 	add.w	r4, r6, #12
 8002468:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800246a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800246c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002470:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002474:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002478:	4660      	mov	r0, ip
 800247a:	f7fe fd5c 	bl	8000f36 <Multiply>
 800247e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8002482:	f5a3 7cb0 	sub.w	ip, r3, #352	; 0x160
 8002486:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800248a:	f5a3 76c6 	sub.w	r6, r3, #396	; 0x18c
 800248e:	4b87      	ldr	r3, [pc, #540]	; (80026ac <KalmanFilter+0x33c>)
 8002490:	ac08      	add	r4, sp, #32
 8002492:	461d      	mov	r5, r3
 8002494:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002498:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800249a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800249c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80024a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80024a4:	466d      	mov	r5, sp
 80024a6:	f106 040c 	add.w	r4, r6, #12
 80024aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80024b2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80024b6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80024ba:	4660      	mov	r0, ip
 80024bc:	f7fe fd3b 	bl	8000f36 <Multiply>
 80024c0:	4b7b      	ldr	r3, [pc, #492]	; (80026b0 <KalmanFilter+0x340>)
 80024c2:	607b      	str	r3, [r7, #4]
 80024c4:	f107 0c08 	add.w	ip, r7, #8
 80024c8:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80024cc:	f5a3 76b0 	sub.w	r6, r3, #352	; 0x160
 80024d0:	4b78      	ldr	r3, [pc, #480]	; (80026b4 <KalmanFilter+0x344>)
 80024d2:	ac08      	add	r4, sp, #32
 80024d4:	461d      	mov	r5, r3
 80024d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80024e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80024e6:	466d      	mov	r5, sp
 80024e8:	f106 040c 	add.w	r4, r6, #12
 80024ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024f0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80024f4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80024f8:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80024fc:	4660      	mov	r0, ip
 80024fe:	f7fe fdaf 	bl	8001060 <Sum>
 8002502:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8002506:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800250a:	687c      	ldr	r4, [r7, #4]
 800250c:	461d      	mov	r5, r3
 800250e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002510:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002512:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002514:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002516:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800251a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	//Update//
	y_k = Minus(z_k, Multiply(C, xp_k));
 800251e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8002522:	f5a3 7c9a 	sub.w	ip, r3, #308	; 0x134
 8002526:	4e64      	ldr	r6, [pc, #400]	; (80026b8 <KalmanFilter+0x348>)
 8002528:	4b5c      	ldr	r3, [pc, #368]	; (800269c <KalmanFilter+0x32c>)
 800252a:	ac08      	add	r4, sp, #32
 800252c:	461d      	mov	r5, r3
 800252e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002530:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002532:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002534:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002536:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800253a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800253e:	466d      	mov	r5, sp
 8002540:	f106 040c 	add.w	r4, r6, #12
 8002544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002548:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800254c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002550:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002554:	4660      	mov	r0, ip
 8002556:	f7fe fcee 	bl	8000f36 <Multiply>
 800255a:	4b58      	ldr	r3, [pc, #352]	; (80026bc <KalmanFilter+0x34c>)
 800255c:	607b      	str	r3, [r7, #4]
 800255e:	f107 0c08 	add.w	ip, r7, #8
 8002562:	4e4d      	ldr	r6, [pc, #308]	; (8002698 <KalmanFilter+0x328>)
 8002564:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8002568:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800256c:	ac08      	add	r4, sp, #32
 800256e:	461d      	mov	r5, r3
 8002570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002578:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800257c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002580:	466d      	mov	r5, sp
 8002582:	f106 040c 	add.w	r4, r6, #12
 8002586:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002588:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800258a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800258e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002592:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002596:	4660      	mov	r0, ip
 8002598:	f7fe fdde 	bl	8001158 <Minus>
 800259c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80025a0:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80025a4:	687c      	ldr	r4, [r7, #4]
 80025a6:	461d      	mov	r5, r3
 80025a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80025b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	s_k = Sum(Multiply(Multiply(C, pp_k), C_T), R);
 80025b8:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80025bc:	f5a3 7c84 	sub.w	ip, r3, #264	; 0x108
 80025c0:	4e3d      	ldr	r6, [pc, #244]	; (80026b8 <KalmanFilter+0x348>)
 80025c2:	4b3b      	ldr	r3, [pc, #236]	; (80026b0 <KalmanFilter+0x340>)
 80025c4:	ac08      	add	r4, sp, #32
 80025c6:	461d      	mov	r5, r3
 80025c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80025d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80025d8:	466d      	mov	r5, sp
 80025da:	f106 040c 	add.w	r4, r6, #12
 80025de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025e2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80025e6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80025ea:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80025ee:	4660      	mov	r0, ip
 80025f0:	f7fe fca1 	bl	8000f36 <Multiply>
 80025f4:	f107 0cf4 	add.w	ip, r7, #244	; 0xf4
 80025f8:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80025fc:	f5a3 7684 	sub.w	r6, r3, #264	; 0x108
 8002600:	4b2f      	ldr	r3, [pc, #188]	; (80026c0 <KalmanFilter+0x350>)
 8002602:	ac08      	add	r4, sp, #32
 8002604:	461d      	mov	r5, r3
 8002606:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002608:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800260a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800260c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800260e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002612:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002616:	466d      	mov	r5, sp
 8002618:	f106 040c 	add.w	r4, r6, #12
 800261c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800261e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002620:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002624:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002628:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800262c:	4660      	mov	r0, ip
 800262e:	f7fe fc82 	bl	8000f36 <Multiply>
 8002632:	4b24      	ldr	r3, [pc, #144]	; (80026c4 <KalmanFilter+0x354>)
 8002634:	607b      	str	r3, [r7, #4]
 8002636:	f107 0608 	add.w	r6, r7, #8
 800263a:	4b23      	ldr	r3, [pc, #140]	; (80026c8 <KalmanFilter+0x358>)
 800263c:	ac08      	add	r4, sp, #32
 800263e:	461d      	mov	r5, r3
 8002640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002648:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800264c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002650:	466d      	mov	r5, sp
 8002652:	f507 7480 	add.w	r4, r7, #256	; 0x100
 8002656:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002658:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800265a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800265e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002662:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002666:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002668:	4630      	mov	r0, r6
 800266a:	f7fe fcf9 	bl	8001060 <Sum>
 800266e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8002672:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002676:	687c      	ldr	r4, [r7, #4]
 8002678:	461d      	mov	r5, r3
 800267a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800267c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800267e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002680:	e024      	b.n	80026cc <KalmanFilter+0x35c>
 8002682:	bf00      	nop
 8002684:	2000053c 	.word	0x2000053c
 8002688:	40590000 	.word	0x40590000
 800268c:	20000530 	.word	0x20000530
 8002690:	2000052c 	.word	0x2000052c
 8002694:	20000528 	.word	0x20000528
 8002698:	20000318 	.word	0x20000318
 800269c:	20000344 	.word	0x20000344
 80026a0:	20000210 	.word	0x20000210
 80026a4:	200002ec 	.word	0x200002ec
 80026a8:	200003c8 	.word	0x200003c8
 80026ac:	200003f4 	.word	0x200003f4
 80026b0:	20000370 	.word	0x20000370
 80026b4:	20000294 	.word	0x20000294
 80026b8:	2000023c 	.word	0x2000023c
 80026bc:	2000044c 	.word	0x2000044c
 80026c0:	20000420 	.word	0x20000420
 80026c4:	20000478 	.word	0x20000478
 80026c8:	20000268 	.word	0x20000268
 80026cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80026d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	s_k_inv = Inverse(s_k);
 80026d6:	4bbe      	ldr	r3, [pc, #760]	; (80029d0 <KalmanFilter+0x660>)
 80026d8:	607b      	str	r3, [r7, #4]
 80026da:	f107 0c08 	add.w	ip, r7, #8
 80026de:	4ebd      	ldr	r6, [pc, #756]	; (80029d4 <KalmanFilter+0x664>)
 80026e0:	466d      	mov	r5, sp
 80026e2:	f106 040c 	add.w	r4, r6, #12
 80026e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80026ee:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80026f2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80026f6:	4660      	mov	r0, ip
 80026f8:	f7fe fe16 	bl	8001328 <Inverse>
 80026fc:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8002700:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002704:	687c      	ldr	r4, [r7, #4]
 8002706:	461d      	mov	r5, r3
 8002708:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800270a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800270c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800270e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002710:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002714:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	K = Multiply(Multiply(pp_k, C_T), s_k_inv);
 8002718:	f507 7c90 	add.w	ip, r7, #288	; 0x120
 800271c:	4eae      	ldr	r6, [pc, #696]	; (80029d8 <KalmanFilter+0x668>)
 800271e:	4baf      	ldr	r3, [pc, #700]	; (80029dc <KalmanFilter+0x66c>)
 8002720:	ac08      	add	r4, sp, #32
 8002722:	461d      	mov	r5, r3
 8002724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002728:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800272a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800272c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002730:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002734:	466d      	mov	r5, sp
 8002736:	f106 040c 	add.w	r4, r6, #12
 800273a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800273c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800273e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002742:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002746:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800274a:	4660      	mov	r0, ip
 800274c:	f7fe fbf3 	bl	8000f36 <Multiply>
 8002750:	4ba3      	ldr	r3, [pc, #652]	; (80029e0 <KalmanFilter+0x670>)
 8002752:	607b      	str	r3, [r7, #4]
 8002754:	f107 0608 	add.w	r6, r7, #8
 8002758:	4b9d      	ldr	r3, [pc, #628]	; (80029d0 <KalmanFilter+0x660>)
 800275a:	ac08      	add	r4, sp, #32
 800275c:	461d      	mov	r5, r3
 800275e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002760:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002762:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002764:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002766:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800276a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800276e:	466d      	mov	r5, sp
 8002770:	f507 7496 	add.w	r4, r7, #300	; 0x12c
 8002774:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002776:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002778:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800277c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002780:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002784:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002786:	4630      	mov	r0, r6
 8002788:	f7fe fbd5 	bl	8000f36 <Multiply>
 800278c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8002790:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002794:	687c      	ldr	r4, [r7, #4]
 8002796:	461d      	mov	r5, r3
 8002798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800279a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800279c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800279e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80027a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	x_k0 = Sum(xp_k, Multiply(K, y_k));
 80027a8:	f507 7ca6 	add.w	ip, r7, #332	; 0x14c
 80027ac:	4e8c      	ldr	r6, [pc, #560]	; (80029e0 <KalmanFilter+0x670>)
 80027ae:	4b8d      	ldr	r3, [pc, #564]	; (80029e4 <KalmanFilter+0x674>)
 80027b0:	ac08      	add	r4, sp, #32
 80027b2:	461d      	mov	r5, r3
 80027b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80027c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80027c4:	466d      	mov	r5, sp
 80027c6:	f106 040c 	add.w	r4, r6, #12
 80027ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027ce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80027d2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80027d6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80027da:	4660      	mov	r0, ip
 80027dc:	f7fe fbab 	bl	8000f36 <Multiply>
 80027e0:	4b81      	ldr	r3, [pc, #516]	; (80029e8 <KalmanFilter+0x678>)
 80027e2:	607b      	str	r3, [r7, #4]
 80027e4:	f107 0c08 	add.w	ip, r7, #8
 80027e8:	4e80      	ldr	r6, [pc, #512]	; (80029ec <KalmanFilter+0x67c>)
 80027ea:	ad08      	add	r5, sp, #32
 80027ec:	f507 74a6 	add.w	r4, r7, #332	; 0x14c
 80027f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027f8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80027fc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002800:	466d      	mov	r5, sp
 8002802:	f106 040c 	add.w	r4, r6, #12
 8002806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002808:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800280a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800280e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002812:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002816:	4660      	mov	r0, ip
 8002818:	f7fe fc22 	bl	8001060 <Sum>
 800281c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8002820:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002824:	687c      	ldr	r4, [r7, #4]
 8002826:	461d      	mov	r5, r3
 8002828:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800282a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800282c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800282e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002830:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002834:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	p_k0 = Multiply(Minus(I, Multiply(K, C)), pp_k);
 8002838:	f507 7cbc 	add.w	ip, r7, #376	; 0x178
 800283c:	4e68      	ldr	r6, [pc, #416]	; (80029e0 <KalmanFilter+0x670>)
 800283e:	4b6c      	ldr	r3, [pc, #432]	; (80029f0 <KalmanFilter+0x680>)
 8002840:	ac08      	add	r4, sp, #32
 8002842:	461d      	mov	r5, r3
 8002844:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002846:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002848:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800284a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800284c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002850:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002854:	466d      	mov	r5, sp
 8002856:	f106 040c 	add.w	r4, r6, #12
 800285a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800285c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800285e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002862:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002866:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800286a:	4660      	mov	r0, ip
 800286c:	f7fe fb63 	bl	8000f36 <Multiply>
 8002870:	f507 7cd2 	add.w	ip, r7, #420	; 0x1a4
 8002874:	4e5f      	ldr	r6, [pc, #380]	; (80029f4 <KalmanFilter+0x684>)
 8002876:	ad08      	add	r5, sp, #32
 8002878:	f507 74bc 	add.w	r4, r7, #376	; 0x178
 800287c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800287e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002880:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002882:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002884:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002888:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800288c:	466d      	mov	r5, sp
 800288e:	f106 040c 	add.w	r4, r6, #12
 8002892:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002894:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002896:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800289a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800289e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80028a2:	4660      	mov	r0, ip
 80028a4:	f7fe fc58 	bl	8001158 <Minus>
 80028a8:	4b53      	ldr	r3, [pc, #332]	; (80029f8 <KalmanFilter+0x688>)
 80028aa:	607b      	str	r3, [r7, #4]
 80028ac:	f107 0608 	add.w	r6, r7, #8
 80028b0:	4b49      	ldr	r3, [pc, #292]	; (80029d8 <KalmanFilter+0x668>)
 80028b2:	ac08      	add	r4, sp, #32
 80028b4:	461d      	mov	r5, r3
 80028b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80028c6:	466d      	mov	r5, sp
 80028c8:	f507 74d8 	add.w	r4, r7, #432	; 0x1b0
 80028cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028d0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80028d4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80028d8:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 80028dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028de:	4630      	mov	r0, r6
 80028e0:	f7fe fb29 	bl	8000f36 <Multiply>
 80028e4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80028e8:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80028ec:	687c      	ldr	r4, [r7, #4]
 80028ee:	461d      	mov	r5, r3
 80028f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	diff_theta_kalman = (x_k0.data[0][0] - x_k1.data[0][0])/(10.0/1000.0);
 8002900:	4b39      	ldr	r3, [pc, #228]	; (80029e8 <KalmanFilter+0x678>)
 8002902:	ed93 7a00 	vldr	s14, [r3]
 8002906:	4b3d      	ldr	r3, [pc, #244]	; (80029fc <KalmanFilter+0x68c>)
 8002908:	edd3 7a00 	vldr	s15, [r3]
 800290c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002910:	ee17 0a90 	vmov	r0, s15
 8002914:	f7fd fdc4 	bl	80004a0 <__aeabi_f2d>
 8002918:	a32b      	add	r3, pc, #172	; (adr r3, 80029c8 <KalmanFilter+0x658>)
 800291a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291e:	f7fd ff41 	bl	80007a4 <__aeabi_ddiv>
 8002922:	4602      	mov	r2, r0
 8002924:	460b      	mov	r3, r1
 8002926:	4610      	mov	r0, r2
 8002928:	4619      	mov	r1, r3
 800292a:	f7fe f8c1 	bl	8000ab0 <__aeabi_d2f>
 800292e:	4603      	mov	r3, r0
 8002930:	4a33      	ldr	r2, [pc, #204]	; (8002a00 <KalmanFilter+0x690>)
 8002932:	6013      	str	r3, [r2, #0]

	//Memory [N-1] data
	x_k1 = Store(x_k0);
 8002934:	4b31      	ldr	r3, [pc, #196]	; (80029fc <KalmanFilter+0x68c>)
 8002936:	607b      	str	r3, [r7, #4]
 8002938:	f107 0c08 	add.w	ip, r7, #8
 800293c:	4e2a      	ldr	r6, [pc, #168]	; (80029e8 <KalmanFilter+0x678>)
 800293e:	466d      	mov	r5, sp
 8002940:	f106 040c 	add.w	r4, r6, #12
 8002944:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002946:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002948:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800294c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002950:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002954:	4660      	mov	r0, ip
 8002956:	f7fe fd59 	bl	800140c <Store>
 800295a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800295e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002962:	687c      	ldr	r4, [r7, #4]
 8002964:	461d      	mov	r5, r3
 8002966:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002968:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800296a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800296c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800296e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002972:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	p_k1 = Store(p_k0);
 8002976:	4b23      	ldr	r3, [pc, #140]	; (8002a04 <KalmanFilter+0x694>)
 8002978:	607b      	str	r3, [r7, #4]
 800297a:	f107 0c08 	add.w	ip, r7, #8
 800297e:	4e1e      	ldr	r6, [pc, #120]	; (80029f8 <KalmanFilter+0x688>)
 8002980:	466d      	mov	r5, sp
 8002982:	f106 040c 	add.w	r4, r6, #12
 8002986:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002988:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800298a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800298e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002992:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002996:	4660      	mov	r0, ip
 8002998:	f7fe fd38 	bl	800140c <Store>
 800299c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80029a0:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80029a4:	687c      	ldr	r4, [r7, #4]
 80029a6:	461d      	mov	r5, r3
 80029a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80029b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	output_theta = x_k0.data[0][0];
 80029b8:	4b0b      	ldr	r3, [pc, #44]	; (80029e8 <KalmanFilter+0x678>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a12      	ldr	r2, [pc, #72]	; (8002a08 <KalmanFilter+0x698>)
 80029be:	6013      	str	r3, [r2, #0]
	zoutput_omega = x_k0.data[1][0];
 80029c0:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <KalmanFilter+0x678>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	e022      	b.n	8002a0c <KalmanFilter+0x69c>
 80029c6:	bf00      	nop
 80029c8:	47ae147b 	.word	0x47ae147b
 80029cc:	3f847ae1 	.word	0x3f847ae1
 80029d0:	200004a4 	.word	0x200004a4
 80029d4:	20000478 	.word	0x20000478
 80029d8:	20000370 	.word	0x20000370
 80029dc:	20000420 	.word	0x20000420
 80029e0:	200004d0 	.word	0x200004d0
 80029e4:	2000044c 	.word	0x2000044c
 80029e8:	200002c0 	.word	0x200002c0
 80029ec:	20000344 	.word	0x20000344
 80029f0:	2000023c 	.word	0x2000023c
 80029f4:	200004fc 	.word	0x200004fc
 80029f8:	2000039c 	.word	0x2000039c
 80029fc:	200002ec 	.word	0x200002ec
 8002a00:	2000020c 	.word	0x2000020c
 8002a04:	200003c8 	.word	0x200003c8
 8002a08:	20000534 	.word	0x20000534
 8002a0c:	4a05      	ldr	r2, [pc, #20]	; (8002a24 <KalmanFilter+0x6b4>)
 8002a0e:	6013      	str	r3, [r2, #0]
	return zoutput_omega;
 8002a10:	4b04      	ldr	r3, [pc, #16]	; (8002a24 <KalmanFilter+0x6b4>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	ee07 3a90 	vmov	s15, r3

}
 8002a18:	eeb0 0a67 	vmov.f32	s0, s15
 8002a1c:	f507 77ea 	add.w	r7, r7, #468	; 0x1d4
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a24:	20000538 	.word	0x20000538

08002a28 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a2c:	b082      	sub	sp, #8
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
	if (htim == &htim5)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a7e      	ldr	r2, [pc, #504]	; (8002c30 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	f040 8237 	bne.w	8002eaa <HAL_TIM_PeriodElapsedCallback+0x482>
	{
		timestamp = HAL_GetTick();
 8002a3c:	f000 fc74 	bl	8003328 <HAL_GetTick>
 8002a40:	4603      	mov	r3, r0
 8002a42:	4a7c      	ldr	r2, [pc, #496]	; (8002c34 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002a44:	6013      	str	r3, [r2, #0]
		storetime[0] = HAL_GetTick();
 8002a46:	f000 fc6f 	bl	8003328 <HAL_GetTick>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	4a7a      	ldr	r2, [pc, #488]	; (8002c38 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002a4e:	6013      	str	r3, [r2, #0]
		RadRel = (TIM2->CNT/8191.0)*(2*M_PI);
 8002a50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7fd fd00 	bl	800045c <__aeabi_ui2d>
 8002a5c:	a36c      	add	r3, pc, #432	; (adr r3, 8002c10 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a62:	f7fd fe9f 	bl	80007a4 <__aeabi_ddiv>
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	4610      	mov	r0, r2
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	a36a      	add	r3, pc, #424	; (adr r3, 8002c18 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a74:	f7fd fd6c 	bl	8000550 <__aeabi_dmul>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4610      	mov	r0, r2
 8002a7e:	4619      	mov	r1, r3
 8002a80:	f7fe f816 	bl	8000ab0 <__aeabi_d2f>
 8002a84:	4603      	mov	r3, r0
 8002a86:	4a6d      	ldr	r2, [pc, #436]	; (8002c3c <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002a88:	6013      	str	r3, [r2, #0]
		Position[0] = RadRel;
 8002a8a:	4b6c      	ldr	r3, [pc, #432]	; (8002c3c <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a6c      	ldr	r2, [pc, #432]	; (8002c40 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002a90:	6013      	str	r3, [r2, #0]
		Velocity = (Position[0] - Position[1])/(10.0/1000.0);
 8002a92:	4b6b      	ldr	r3, [pc, #428]	; (8002c40 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002a94:	ed93 7a00 	vldr	s14, [r3]
 8002a98:	4b69      	ldr	r3, [pc, #420]	; (8002c40 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002a9a:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aa2:	ee17 0a90 	vmov	r0, s15
 8002aa6:	f7fd fcfb 	bl	80004a0 <__aeabi_f2d>
 8002aaa:	a35d      	add	r3, pc, #372	; (adr r3, 8002c20 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab0:	f7fd fe78 	bl	80007a4 <__aeabi_ddiv>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	4610      	mov	r0, r2
 8002aba:	4619      	mov	r1, r3
 8002abc:	f7fd fff8 	bl	8000ab0 <__aeabi_d2f>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	4a60      	ldr	r2, [pc, #384]	; (8002c44 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002ac4:	6013      	str	r3, [r2, #0]
		switch (state)
 8002ac6:	4b60      	ldr	r3, [pc, #384]	; (8002c48 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b05      	cmp	r3, #5
 8002acc:	f200 8187 	bhi.w	8002dde <HAL_TIM_PeriodElapsedCallback+0x3b6>
 8002ad0:	a201      	add	r2, pc, #4	; (adr r2, 8002ad8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad6:	bf00      	nop
 8002ad8:	08002af1 	.word	0x08002af1
 8002adc:	08002b01 	.word	0x08002b01
 8002ae0:	08002b13 	.word	0x08002b13
 8002ae4:	08002b7f 	.word	0x08002b7f
 8002ae8:	08002c6d 	.word	0x08002c6d
 8002aec:	08002dcd 	.word	0x08002dcd
		{
		case Init:
			traject_time = timestamp;
 8002af0:	4b50      	ldr	r3, [pc, #320]	; (8002c34 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a55      	ldr	r2, [pc, #340]	; (8002c4c <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002af6:	6013      	str	r3, [r2, #0]
			state = Delay;
 8002af8:	4b53      	ldr	r3, [pc, #332]	; (8002c48 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002afa:	2201      	movs	r2, #1
 8002afc:	701a      	strb	r2, [r3, #0]
			break;
 8002afe:	e16f      	b.n	8002de0 <HAL_TIM_PeriodElapsedCallback+0x3b8>
		case Delay:
			path = 0;
 8002b00:	4b53      	ldr	r3, [pc, #332]	; (8002c50 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002b02:	f04f 0200 	mov.w	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
			v_profile = 0;
 8002b08:	4b52      	ldr	r3, [pc, #328]	; (8002c54 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002b0a:	f04f 0200 	mov.w	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
			break;
 8002b10:	e166      	b.n	8002de0 <HAL_TIM_PeriodElapsedCallback+0x3b8>
		case Accerelation:
			path = 0.5*a*(pow(t,2));
 8002b12:	4b51      	ldr	r3, [pc, #324]	; (8002c58 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fd fcc2 	bl	80004a0 <__aeabi_f2d>
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	4b4e      	ldr	r3, [pc, #312]	; (8002c5c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002b22:	f7fd fd15 	bl	8000550 <__aeabi_dmul>
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	4614      	mov	r4, r2
 8002b2c:	461d      	mov	r5, r3
 8002b2e:	4b4c      	ldr	r3, [pc, #304]	; (8002c60 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fd fcb4 	bl	80004a0 <__aeabi_f2d>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	ed9f 1b3a 	vldr	d1, [pc, #232]	; 8002c28 <HAL_TIM_PeriodElapsedCallback+0x200>
 8002b40:	ec43 2b10 	vmov	d0, r2, r3
 8002b44:	f002 ff82 	bl	8005a4c <pow>
 8002b48:	ec53 2b10 	vmov	r2, r3, d0
 8002b4c:	4620      	mov	r0, r4
 8002b4e:	4629      	mov	r1, r5
 8002b50:	f7fd fcfe 	bl	8000550 <__aeabi_dmul>
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	4610      	mov	r0, r2
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	f7fd ffa8 	bl	8000ab0 <__aeabi_d2f>
 8002b60:	4603      	mov	r3, r0
 8002b62:	4a3b      	ldr	r2, [pc, #236]	; (8002c50 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002b64:	6013      	str	r3, [r2, #0]
			v_profile = a*(t);
 8002b66:	4b3c      	ldr	r3, [pc, #240]	; (8002c58 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002b68:	ed93 7a00 	vldr	s14, [r3]
 8002b6c:	4b3c      	ldr	r3, [pc, #240]	; (8002c60 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002b6e:	edd3 7a00 	vldr	s15, [r3]
 8002b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b76:	4b37      	ldr	r3, [pc, #220]	; (8002c54 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002b78:	edc3 7a00 	vstr	s15, [r3]
			break;
 8002b7c:	e130      	b.n	8002de0 <HAL_TIM_PeriodElapsedCallback+0x3b8>
		case Constant:
			path = (v_max*(t-t_acc)) + (0.5*a*(pow(t_acc,2)));
 8002b7e:	4b38      	ldr	r3, [pc, #224]	; (8002c60 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002b80:	ed93 7a00 	vldr	s14, [r3]
 8002b84:	4b37      	ldr	r3, [pc, #220]	; (8002c64 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002b86:	edd3 7a00 	vldr	s15, [r3]
 8002b8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b8e:	4b36      	ldr	r3, [pc, #216]	; (8002c68 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002b90:	edd3 7a00 	vldr	s15, [r3]
 8002b94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b98:	ee17 0a90 	vmov	r0, s15
 8002b9c:	f7fd fc80 	bl	80004a0 <__aeabi_f2d>
 8002ba0:	4604      	mov	r4, r0
 8002ba2:	460d      	mov	r5, r1
 8002ba4:	4b2c      	ldr	r3, [pc, #176]	; (8002c58 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7fd fc79 	bl	80004a0 <__aeabi_f2d>
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	4b2a      	ldr	r3, [pc, #168]	; (8002c5c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002bb4:	f7fd fccc 	bl	8000550 <__aeabi_dmul>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	4690      	mov	r8, r2
 8002bbe:	4699      	mov	r9, r3
 8002bc0:	4b28      	ldr	r3, [pc, #160]	; (8002c64 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7fd fc6b 	bl	80004a0 <__aeabi_f2d>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	460b      	mov	r3, r1
 8002bce:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8002c28 <HAL_TIM_PeriodElapsedCallback+0x200>
 8002bd2:	ec43 2b10 	vmov	d0, r2, r3
 8002bd6:	f002 ff39 	bl	8005a4c <pow>
 8002bda:	ec53 2b10 	vmov	r2, r3, d0
 8002bde:	4640      	mov	r0, r8
 8002be0:	4649      	mov	r1, r9
 8002be2:	f7fd fcb5 	bl	8000550 <__aeabi_dmul>
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	4620      	mov	r0, r4
 8002bec:	4629      	mov	r1, r5
 8002bee:	f7fd faf9 	bl	80001e4 <__adddf3>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4610      	mov	r0, r2
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	f7fd ff59 	bl	8000ab0 <__aeabi_d2f>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	4a13      	ldr	r2, [pc, #76]	; (8002c50 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002c02:	6013      	str	r3, [r2, #0]
			v_profile = v_max;
 8002c04:	4b18      	ldr	r3, [pc, #96]	; (8002c68 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a12      	ldr	r2, [pc, #72]	; (8002c54 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002c0a:	6013      	str	r3, [r2, #0]
			break;
 8002c0c:	e0e8      	b.n	8002de0 <HAL_TIM_PeriodElapsedCallback+0x3b8>
 8002c0e:	bf00      	nop
 8002c10:	00000000 	.word	0x00000000
 8002c14:	40bfff00 	.word	0x40bfff00
 8002c18:	54442d18 	.word	0x54442d18
 8002c1c:	401921fb 	.word	0x401921fb
 8002c20:	47ae147b 	.word	0x47ae147b
 8002c24:	3f847ae1 	.word	0x3f847ae1
 8002c28:	00000000 	.word	0x00000000
 8002c2c:	40000000 	.word	0x40000000
 8002c30:	20000128 	.word	0x20000128
 8002c34:	200001c8 	.word	0x200001c8
 8002c38:	200001bc 	.word	0x200001bc
 8002c3c:	200001b4 	.word	0x200001b4
 8002c40:	200001f8 	.word	0x200001f8
 8002c44:	20000200 	.word	0x20000200
 8002c48:	200001cc 	.word	0x200001cc
 8002c4c:	200001d0 	.word	0x200001d0
 8002c50:	200001d4 	.word	0x200001d4
 8002c54:	200001d8 	.word	0x200001d8
 8002c58:	200001e8 	.word	0x200001e8
 8002c5c:	3fe00000 	.word	0x3fe00000
 8002c60:	200001dc 	.word	0x200001dc
 8002c64:	20000004 	.word	0x20000004
 8002c68:	200001e4 	.word	0x200001e4
		case Decelelation:
			path = (v_max*(t-(t_constant+t_acc))) - (0.5*a*(pow(t-(t_constant+t_acc),2))) + (v_max*t_constant) + (0.5*a*(pow(t_acc,2)));
 8002c6c:	4b94      	ldr	r3, [pc, #592]	; (8002ec0 <HAL_TIM_PeriodElapsedCallback+0x498>)
 8002c6e:	ed93 7a00 	vldr	s14, [r3]
 8002c72:	4b94      	ldr	r3, [pc, #592]	; (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x49c>)
 8002c74:	edd3 6a00 	vldr	s13, [r3]
 8002c78:	4b93      	ldr	r3, [pc, #588]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 8002c7a:	edd3 7a00 	vldr	s15, [r3]
 8002c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c82:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c86:	4b91      	ldr	r3, [pc, #580]	; (8002ecc <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 8002c88:	edd3 7a00 	vldr	s15, [r3]
 8002c8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c90:	ee17 0a90 	vmov	r0, s15
 8002c94:	f7fd fc04 	bl	80004a0 <__aeabi_f2d>
 8002c98:	4604      	mov	r4, r0
 8002c9a:	460d      	mov	r5, r1
 8002c9c:	4b8c      	ldr	r3, [pc, #560]	; (8002ed0 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7fd fbfd 	bl	80004a0 <__aeabi_f2d>
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	4b8a      	ldr	r3, [pc, #552]	; (8002ed4 <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 8002cac:	f7fd fc50 	bl	8000550 <__aeabi_dmul>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4690      	mov	r8, r2
 8002cb6:	4699      	mov	r9, r3
 8002cb8:	4b81      	ldr	r3, [pc, #516]	; (8002ec0 <HAL_TIM_PeriodElapsedCallback+0x498>)
 8002cba:	ed93 7a00 	vldr	s14, [r3]
 8002cbe:	4b81      	ldr	r3, [pc, #516]	; (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x49c>)
 8002cc0:	edd3 6a00 	vldr	s13, [r3]
 8002cc4:	4b80      	ldr	r3, [pc, #512]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 8002cc6:	edd3 7a00 	vldr	s15, [r3]
 8002cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cd2:	ee17 0a90 	vmov	r0, s15
 8002cd6:	f7fd fbe3 	bl	80004a0 <__aeabi_f2d>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	ed9f 1b76 	vldr	d1, [pc, #472]	; 8002eb8 <HAL_TIM_PeriodElapsedCallback+0x490>
 8002ce2:	ec43 2b10 	vmov	d0, r2, r3
 8002ce6:	f002 feb1 	bl	8005a4c <pow>
 8002cea:	ec53 2b10 	vmov	r2, r3, d0
 8002cee:	4640      	mov	r0, r8
 8002cf0:	4649      	mov	r1, r9
 8002cf2:	f7fd fc2d 	bl	8000550 <__aeabi_dmul>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	4620      	mov	r0, r4
 8002cfc:	4629      	mov	r1, r5
 8002cfe:	f7fd fa6f 	bl	80001e0 <__aeabi_dsub>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	4614      	mov	r4, r2
 8002d08:	461d      	mov	r5, r3
 8002d0a:	4b70      	ldr	r3, [pc, #448]	; (8002ecc <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 8002d0c:	ed93 7a00 	vldr	s14, [r3]
 8002d10:	4b6c      	ldr	r3, [pc, #432]	; (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x49c>)
 8002d12:	edd3 7a00 	vldr	s15, [r3]
 8002d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d1a:	ee17 0a90 	vmov	r0, s15
 8002d1e:	f7fd fbbf 	bl	80004a0 <__aeabi_f2d>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	4620      	mov	r0, r4
 8002d28:	4629      	mov	r1, r5
 8002d2a:	f7fd fa5b 	bl	80001e4 <__adddf3>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	4614      	mov	r4, r2
 8002d34:	461d      	mov	r5, r3
 8002d36:	4b66      	ldr	r3, [pc, #408]	; (8002ed0 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fd fbb0 	bl	80004a0 <__aeabi_f2d>
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	4b63      	ldr	r3, [pc, #396]	; (8002ed4 <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 8002d46:	f7fd fc03 	bl	8000550 <__aeabi_dmul>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4690      	mov	r8, r2
 8002d50:	4699      	mov	r9, r3
 8002d52:	4b5d      	ldr	r3, [pc, #372]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fd fba2 	bl	80004a0 <__aeabi_f2d>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	460b      	mov	r3, r1
 8002d60:	ed9f 1b55 	vldr	d1, [pc, #340]	; 8002eb8 <HAL_TIM_PeriodElapsedCallback+0x490>
 8002d64:	ec43 2b10 	vmov	d0, r2, r3
 8002d68:	f002 fe70 	bl	8005a4c <pow>
 8002d6c:	ec53 2b10 	vmov	r2, r3, d0
 8002d70:	4640      	mov	r0, r8
 8002d72:	4649      	mov	r1, r9
 8002d74:	f7fd fbec 	bl	8000550 <__aeabi_dmul>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	4620      	mov	r0, r4
 8002d7e:	4629      	mov	r1, r5
 8002d80:	f7fd fa30 	bl	80001e4 <__adddf3>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	4610      	mov	r0, r2
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	f7fd fe90 	bl	8000ab0 <__aeabi_d2f>
 8002d90:	4603      	mov	r3, r0
 8002d92:	4a51      	ldr	r2, [pc, #324]	; (8002ed8 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 8002d94:	6013      	str	r3, [r2, #0]
			v_profile = v_max-(a*(t-(t_constant+t_acc)));
 8002d96:	4b4d      	ldr	r3, [pc, #308]	; (8002ecc <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 8002d98:	ed93 7a00 	vldr	s14, [r3]
 8002d9c:	4b48      	ldr	r3, [pc, #288]	; (8002ec0 <HAL_TIM_PeriodElapsedCallback+0x498>)
 8002d9e:	edd3 6a00 	vldr	s13, [r3]
 8002da2:	4b48      	ldr	r3, [pc, #288]	; (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x49c>)
 8002da4:	ed93 6a00 	vldr	s12, [r3]
 8002da8:	4b47      	ldr	r3, [pc, #284]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 8002daa:	edd3 7a00 	vldr	s15, [r3]
 8002dae:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002db2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002db6:	4b46      	ldr	r3, [pc, #280]	; (8002ed0 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8002db8:	edd3 7a00 	vldr	s15, [r3]
 8002dbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dc4:	4b45      	ldr	r3, [pc, #276]	; (8002edc <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 8002dc6:	edc3 7a00 	vstr	s15, [r3]
			break;
 8002dca:	e009      	b.n	8002de0 <HAL_TIM_PeriodElapsedCallback+0x3b8>
		case Steadystate:
			path = theta;
 8002dcc:	4b44      	ldr	r3, [pc, #272]	; (8002ee0 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a41      	ldr	r2, [pc, #260]	; (8002ed8 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 8002dd2:	6013      	str	r3, [r2, #0]
			v_profile = 0;
 8002dd4:	4b41      	ldr	r3, [pc, #260]	; (8002edc <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 8002dd6:	f04f 0200 	mov.w	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
			break;
 8002ddc:	e000      	b.n	8002de0 <HAL_TIM_PeriodElapsedCallback+0x3b8>
		default:
			break;
 8002dde:	bf00      	nop

		}

		Error_theta = path - RadRel;
 8002de0:	4b3d      	ldr	r3, [pc, #244]	; (8002ed8 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 8002de2:	ed93 7a00 	vldr	s14, [r3]
 8002de6:	4b3f      	ldr	r3, [pc, #252]	; (8002ee4 <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 8002de8:	edd3 7a00 	vldr	s15, [r3]
 8002dec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002df0:	4b3d      	ldr	r3, [pc, #244]	; (8002ee8 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8002df2:	edc3 7a00 	vstr	s15, [r3]
		velo_desire = PID_Controller_Outerloop(Error_theta);
 8002df6:	4b3c      	ldr	r3, [pc, #240]	; (8002ee8 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8002df8:	edd3 7a00 	vldr	s15, [r3]
 8002dfc:	eeb0 0a67 	vmov.f32	s0, s15
 8002e00:	f7ff fa3a 	bl	8002278 <PID_Controller_Outerloop>
 8002e04:	eef0 7a40 	vmov.f32	s15, s0
 8002e08:	4b38      	ldr	r3, [pc, #224]	; (8002eec <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 8002e0a:	edc3 7a00 	vstr	s15, [r3]
		Velocity_Kalman = KalmanFilter(RadRel);
 8002e0e:	4b35      	ldr	r3, [pc, #212]	; (8002ee4 <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 8002e10:	edd3 7a00 	vldr	s15, [r3]
 8002e14:	eeb0 0a67 	vmov.f32	s0, s15
 8002e18:	f7ff faaa 	bl	8002370 <KalmanFilter>
 8002e1c:	eef0 7a40 	vmov.f32	s15, s0
 8002e20:	4b33      	ldr	r3, [pc, #204]	; (8002ef0 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8002e22:	edc3 7a00 	vstr	s15, [r3]
		//Error_velocity = velo_desire + velo_desire - Velocity;
		Error_velocity = v_profile + velo_desire - Velocity_Kalman;
 8002e26:	4b2d      	ldr	r3, [pc, #180]	; (8002edc <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 8002e28:	ed93 7a00 	vldr	s14, [r3]
 8002e2c:	4b2f      	ldr	r3, [pc, #188]	; (8002eec <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 8002e2e:	edd3 7a00 	vldr	s15, [r3]
 8002e32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e36:	4b2e      	ldr	r3, [pc, #184]	; (8002ef0 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8002e38:	edd3 7a00 	vldr	s15, [r3]
 8002e3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e40:	4b2c      	ldr	r3, [pc, #176]	; (8002ef4 <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8002e42:	edc3 7a00 	vstr	s15, [r3]
		voltage = PID_Controller_Innerloop(Error_velocity);
 8002e46:	4b2b      	ldr	r3, [pc, #172]	; (8002ef4 <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8002e48:	edd3 7a00 	vldr	s15, [r3]
 8002e4c:	eeb0 0a67 	vmov.f32	s0, s15
 8002e50:	f7ff f99a 	bl	8002188 <PID_Controller_Innerloop>
 8002e54:	eef0 7a40 	vmov.f32	s15, s0
 8002e58:	4b27      	ldr	r3, [pc, #156]	; (8002ef8 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8002e5a:	edc3 7a00 	vstr	s15, [r3]



		Drivemotor(((voltage)/12)*4999.0);
 8002e5e:	4b26      	ldr	r3, [pc, #152]	; (8002ef8 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8002e60:	ed93 7a00 	vldr	s14, [r3]
 8002e64:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 8002e68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e6c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002efc <HAL_TIM_PeriodElapsedCallback+0x4d4>
 8002e70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e74:	eeb0 0a67 	vmov.f32	s0, s15
 8002e78:	f7ff f906 	bl	8002088 <Drivemotor>




		deltatime = storetime[0] - storetime[1];
 8002e7c:	4b20      	ldr	r3, [pc, #128]	; (8002f00 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	4b1f      	ldr	r3, [pc, #124]	; (8002f00 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	4a1f      	ldr	r2, [pc, #124]	; (8002f04 <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8002e88:	6013      	str	r3, [r2, #0]
		storetime[1] = storetime[0];
 8002e8a:	4b1d      	ldr	r3, [pc, #116]	; (8002f00 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a1c      	ldr	r2, [pc, #112]	; (8002f00 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8002e90:	6053      	str	r3, [r2, #4]
		Position[1] = Position[0];
 8002e92:	4b1d      	ldr	r3, [pc, #116]	; (8002f08 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a1c      	ldr	r2, [pc, #112]	; (8002f08 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8002e98:	6053      	str	r3, [r2, #4]
		runtime = HAL_GetTick() - timestamp;
 8002e9a:	f000 fa45 	bl	8003328 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	4b1a      	ldr	r3, [pc, #104]	; (8002f0c <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	4a1a      	ldr	r2, [pc, #104]	; (8002f10 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8002ea8:	6013      	str	r3, [r2, #0]
	}
}
 8002eaa:	bf00      	nop
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002eb4:	f3af 8000 	nop.w
 8002eb8:	00000000 	.word	0x00000000
 8002ebc:	40000000 	.word	0x40000000
 8002ec0:	200001dc 	.word	0x200001dc
 8002ec4:	20000008 	.word	0x20000008
 8002ec8:	20000004 	.word	0x20000004
 8002ecc:	200001e4 	.word	0x200001e4
 8002ed0:	200001e8 	.word	0x200001e8
 8002ed4:	3fe00000 	.word	0x3fe00000
 8002ed8:	200001d4 	.word	0x200001d4
 8002edc:	200001d8 	.word	0x200001d8
 8002ee0:	20000000 	.word	0x20000000
 8002ee4:	200001b4 	.word	0x200001b4
 8002ee8:	200001f0 	.word	0x200001f0
 8002eec:	20000208 	.word	0x20000208
 8002ef0:	20000204 	.word	0x20000204
 8002ef4:	200001f4 	.word	0x200001f4
 8002ef8:	200001ec 	.word	0x200001ec
 8002efc:	459c3800 	.word	0x459c3800
 8002f00:	200001bc 	.word	0x200001bc
 8002f04:	200001c4 	.word	0x200001c4
 8002f08:	200001f8 	.word	0x200001f8
 8002f0c:	200001c8 	.word	0x200001c8
 8002f10:	200001b8 	.word	0x200001b8

08002f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f18:	b672      	cpsid	i
}
 8002f1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f1c:	e7fe      	b.n	8002f1c <Error_Handler+0x8>
	...

08002f20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	607b      	str	r3, [r7, #4]
 8002f2a:	4b10      	ldr	r3, [pc, #64]	; (8002f6c <HAL_MspInit+0x4c>)
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2e:	4a0f      	ldr	r2, [pc, #60]	; (8002f6c <HAL_MspInit+0x4c>)
 8002f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f34:	6453      	str	r3, [r2, #68]	; 0x44
 8002f36:	4b0d      	ldr	r3, [pc, #52]	; (8002f6c <HAL_MspInit+0x4c>)
 8002f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f3e:	607b      	str	r3, [r7, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	603b      	str	r3, [r7, #0]
 8002f46:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <HAL_MspInit+0x4c>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	4a08      	ldr	r2, [pc, #32]	; (8002f6c <HAL_MspInit+0x4c>)
 8002f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f50:	6413      	str	r3, [r2, #64]	; 0x40
 8002f52:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <HAL_MspInit+0x4c>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5a:	603b      	str	r3, [r7, #0]
 8002f5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002f5e:	2007      	movs	r0, #7
 8002f60:	f000 fabe 	bl	80034e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f64:	bf00      	nop
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40023800 	.word	0x40023800

08002f70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a18      	ldr	r2, [pc, #96]	; (8002fe0 <HAL_TIM_Base_MspInit+0x70>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d10e      	bne.n	8002fa0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f82:	2300      	movs	r3, #0
 8002f84:	60fb      	str	r3, [r7, #12]
 8002f86:	4b17      	ldr	r3, [pc, #92]	; (8002fe4 <HAL_TIM_Base_MspInit+0x74>)
 8002f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8a:	4a16      	ldr	r2, [pc, #88]	; (8002fe4 <HAL_TIM_Base_MspInit+0x74>)
 8002f8c:	f043 0301 	orr.w	r3, r3, #1
 8002f90:	6453      	str	r3, [r2, #68]	; 0x44
 8002f92:	4b14      	ldr	r3, [pc, #80]	; (8002fe4 <HAL_TIM_Base_MspInit+0x74>)
 8002f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	60fb      	str	r3, [r7, #12]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002f9e:	e01a      	b.n	8002fd6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a10      	ldr	r2, [pc, #64]	; (8002fe8 <HAL_TIM_Base_MspInit+0x78>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d115      	bne.n	8002fd6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	4b0d      	ldr	r3, [pc, #52]	; (8002fe4 <HAL_TIM_Base_MspInit+0x74>)
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	4a0c      	ldr	r2, [pc, #48]	; (8002fe4 <HAL_TIM_Base_MspInit+0x74>)
 8002fb4:	f043 0308 	orr.w	r3, r3, #8
 8002fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002fba:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <HAL_TIM_Base_MspInit+0x74>)
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	f003 0308 	and.w	r3, r3, #8
 8002fc2:	60bb      	str	r3, [r7, #8]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2100      	movs	r1, #0
 8002fca:	2032      	movs	r0, #50	; 0x32
 8002fcc:	f000 fa93 	bl	80034f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002fd0:	2032      	movs	r0, #50	; 0x32
 8002fd2:	f000 faac 	bl	800352e <HAL_NVIC_EnableIRQ>
}
 8002fd6:	bf00      	nop
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40010000 	.word	0x40010000
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	40000c00 	.word	0x40000c00

08002fec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b08a      	sub	sp, #40	; 0x28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff4:	f107 0314 	add.w	r3, r7, #20
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	605a      	str	r2, [r3, #4]
 8002ffe:	609a      	str	r2, [r3, #8]
 8003000:	60da      	str	r2, [r3, #12]
 8003002:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800300c:	d12b      	bne.n	8003066 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800300e:	2300      	movs	r3, #0
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	4b17      	ldr	r3, [pc, #92]	; (8003070 <HAL_TIM_Encoder_MspInit+0x84>)
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	4a16      	ldr	r2, [pc, #88]	; (8003070 <HAL_TIM_Encoder_MspInit+0x84>)
 8003018:	f043 0301 	orr.w	r3, r3, #1
 800301c:	6413      	str	r3, [r2, #64]	; 0x40
 800301e:	4b14      	ldr	r3, [pc, #80]	; (8003070 <HAL_TIM_Encoder_MspInit+0x84>)
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	613b      	str	r3, [r7, #16]
 8003028:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	4b10      	ldr	r3, [pc, #64]	; (8003070 <HAL_TIM_Encoder_MspInit+0x84>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	4a0f      	ldr	r2, [pc, #60]	; (8003070 <HAL_TIM_Encoder_MspInit+0x84>)
 8003034:	f043 0301 	orr.w	r3, r3, #1
 8003038:	6313      	str	r3, [r2, #48]	; 0x30
 800303a:	4b0d      	ldr	r3, [pc, #52]	; (8003070 <HAL_TIM_Encoder_MspInit+0x84>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003046:	2303      	movs	r3, #3
 8003048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800304a:	2302      	movs	r3, #2
 800304c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304e:	2300      	movs	r3, #0
 8003050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003052:	2300      	movs	r3, #0
 8003054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003056:	2301      	movs	r3, #1
 8003058:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800305a:	f107 0314 	add.w	r3, r7, #20
 800305e:	4619      	mov	r1, r3
 8003060:	4804      	ldr	r0, [pc, #16]	; (8003074 <HAL_TIM_Encoder_MspInit+0x88>)
 8003062:	f000 fa7f 	bl	8003564 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003066:	bf00      	nop
 8003068:	3728      	adds	r7, #40	; 0x28
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40023800 	.word	0x40023800
 8003074:	40020000 	.word	0x40020000

08003078 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b088      	sub	sp, #32
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003080:	f107 030c 	add.w	r3, r7, #12
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	605a      	str	r2, [r3, #4]
 800308a:	609a      	str	r2, [r3, #8]
 800308c:	60da      	str	r2, [r3, #12]
 800308e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a12      	ldr	r2, [pc, #72]	; (80030e0 <HAL_TIM_MspPostInit+0x68>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d11e      	bne.n	80030d8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	60bb      	str	r3, [r7, #8]
 800309e:	4b11      	ldr	r3, [pc, #68]	; (80030e4 <HAL_TIM_MspPostInit+0x6c>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	4a10      	ldr	r2, [pc, #64]	; (80030e4 <HAL_TIM_MspPostInit+0x6c>)
 80030a4:	f043 0301 	orr.w	r3, r3, #1
 80030a8:	6313      	str	r3, [r2, #48]	; 0x30
 80030aa:	4b0e      	ldr	r3, [pc, #56]	; (80030e4 <HAL_TIM_MspPostInit+0x6c>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	60bb      	str	r3, [r7, #8]
 80030b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80030b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030bc:	2302      	movs	r3, #2
 80030be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c0:	2300      	movs	r3, #0
 80030c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c4:	2300      	movs	r3, #0
 80030c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80030c8:	2301      	movs	r3, #1
 80030ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030cc:	f107 030c 	add.w	r3, r7, #12
 80030d0:	4619      	mov	r1, r3
 80030d2:	4805      	ldr	r0, [pc, #20]	; (80030e8 <HAL_TIM_MspPostInit+0x70>)
 80030d4:	f000 fa46 	bl	8003564 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80030d8:	bf00      	nop
 80030da:	3720      	adds	r7, #32
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40010000 	.word	0x40010000
 80030e4:	40023800 	.word	0x40023800
 80030e8:	40020000 	.word	0x40020000

080030ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08a      	sub	sp, #40	; 0x28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f4:	f107 0314 	add.w	r3, r7, #20
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	605a      	str	r2, [r3, #4]
 80030fe:	609a      	str	r2, [r3, #8]
 8003100:	60da      	str	r2, [r3, #12]
 8003102:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a19      	ldr	r2, [pc, #100]	; (8003170 <HAL_UART_MspInit+0x84>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d12b      	bne.n	8003166 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800310e:	2300      	movs	r3, #0
 8003110:	613b      	str	r3, [r7, #16]
 8003112:	4b18      	ldr	r3, [pc, #96]	; (8003174 <HAL_UART_MspInit+0x88>)
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	4a17      	ldr	r2, [pc, #92]	; (8003174 <HAL_UART_MspInit+0x88>)
 8003118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800311c:	6413      	str	r3, [r2, #64]	; 0x40
 800311e:	4b15      	ldr	r3, [pc, #84]	; (8003174 <HAL_UART_MspInit+0x88>)
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003126:	613b      	str	r3, [r7, #16]
 8003128:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800312a:	2300      	movs	r3, #0
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	4b11      	ldr	r3, [pc, #68]	; (8003174 <HAL_UART_MspInit+0x88>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	4a10      	ldr	r2, [pc, #64]	; (8003174 <HAL_UART_MspInit+0x88>)
 8003134:	f043 0301 	orr.w	r3, r3, #1
 8003138:	6313      	str	r3, [r2, #48]	; 0x30
 800313a:	4b0e      	ldr	r3, [pc, #56]	; (8003174 <HAL_UART_MspInit+0x88>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003146:	230c      	movs	r3, #12
 8003148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314a:	2302      	movs	r3, #2
 800314c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314e:	2300      	movs	r3, #0
 8003150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003152:	2303      	movs	r3, #3
 8003154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003156:	2307      	movs	r3, #7
 8003158:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800315a:	f107 0314 	add.w	r3, r7, #20
 800315e:	4619      	mov	r1, r3
 8003160:	4805      	ldr	r0, [pc, #20]	; (8003178 <HAL_UART_MspInit+0x8c>)
 8003162:	f000 f9ff 	bl	8003564 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003166:	bf00      	nop
 8003168:	3728      	adds	r7, #40	; 0x28
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40004400 	.word	0x40004400
 8003174:	40023800 	.word	0x40023800
 8003178:	40020000 	.word	0x40020000

0800317c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003180:	e7fe      	b.n	8003180 <NMI_Handler+0x4>

08003182 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003182:	b480      	push	{r7}
 8003184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003186:	e7fe      	b.n	8003186 <HardFault_Handler+0x4>

08003188 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800318c:	e7fe      	b.n	800318c <MemManage_Handler+0x4>

0800318e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800318e:	b480      	push	{r7}
 8003190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003192:	e7fe      	b.n	8003192 <BusFault_Handler+0x4>

08003194 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003198:	e7fe      	b.n	8003198 <UsageFault_Handler+0x4>

0800319a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800319a:	b480      	push	{r7}
 800319c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800319e:	bf00      	nop
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031ac:	bf00      	nop
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031b6:	b480      	push	{r7}
 80031b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031ba:	bf00      	nop
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031c8:	f000 f89a 	bl	8003300 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031cc:	bf00      	nop
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80031d4:	4802      	ldr	r0, [pc, #8]	; (80031e0 <TIM5_IRQHandler+0x10>)
 80031d6:	f001 faeb 	bl	80047b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80031da:	bf00      	nop
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	20000128 	.word	0x20000128

080031e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031e8:	4b06      	ldr	r3, [pc, #24]	; (8003204 <SystemInit+0x20>)
 80031ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ee:	4a05      	ldr	r2, [pc, #20]	; (8003204 <SystemInit+0x20>)
 80031f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031f8:	bf00      	nop
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	e000ed00 	.word	0xe000ed00

08003208 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003208:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003240 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800320c:	480d      	ldr	r0, [pc, #52]	; (8003244 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800320e:	490e      	ldr	r1, [pc, #56]	; (8003248 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003210:	4a0e      	ldr	r2, [pc, #56]	; (800324c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003214:	e002      	b.n	800321c <LoopCopyDataInit>

08003216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800321a:	3304      	adds	r3, #4

0800321c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800321c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800321e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003220:	d3f9      	bcc.n	8003216 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003222:	4a0b      	ldr	r2, [pc, #44]	; (8003250 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003224:	4c0b      	ldr	r4, [pc, #44]	; (8003254 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003228:	e001      	b.n	800322e <LoopFillZerobss>

0800322a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800322a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800322c:	3204      	adds	r2, #4

0800322e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800322e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003230:	d3fb      	bcc.n	800322a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003232:	f7ff ffd7 	bl	80031e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003236:	f002 fbdd 	bl	80059f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800323a:	f7fe f955 	bl	80014e8 <main>
  bx  lr    
 800323e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003240:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003248:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800324c:	08006920 	.word	0x08006920
  ldr r2, =_sbss
 8003250:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8003254:	2000056c 	.word	0x2000056c

08003258 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003258:	e7fe      	b.n	8003258 <ADC_IRQHandler>
	...

0800325c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003260:	4b0e      	ldr	r3, [pc, #56]	; (800329c <HAL_Init+0x40>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a0d      	ldr	r2, [pc, #52]	; (800329c <HAL_Init+0x40>)
 8003266:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800326a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800326c:	4b0b      	ldr	r3, [pc, #44]	; (800329c <HAL_Init+0x40>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a0a      	ldr	r2, [pc, #40]	; (800329c <HAL_Init+0x40>)
 8003272:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003276:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003278:	4b08      	ldr	r3, [pc, #32]	; (800329c <HAL_Init+0x40>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a07      	ldr	r2, [pc, #28]	; (800329c <HAL_Init+0x40>)
 800327e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003282:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003284:	2003      	movs	r0, #3
 8003286:	f000 f92b 	bl	80034e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800328a:	2000      	movs	r0, #0
 800328c:	f000 f808 	bl	80032a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003290:	f7ff fe46 	bl	8002f20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	40023c00 	.word	0x40023c00

080032a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032a8:	4b12      	ldr	r3, [pc, #72]	; (80032f4 <HAL_InitTick+0x54>)
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	4b12      	ldr	r3, [pc, #72]	; (80032f8 <HAL_InitTick+0x58>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	4619      	mov	r1, r3
 80032b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80032ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 f943 	bl	800354a <HAL_SYSTICK_Config>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e00e      	b.n	80032ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b0f      	cmp	r3, #15
 80032d2:	d80a      	bhi.n	80032ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032d4:	2200      	movs	r2, #0
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	f04f 30ff 	mov.w	r0, #4294967295
 80032dc:	f000 f90b 	bl	80034f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032e0:	4a06      	ldr	r2, [pc, #24]	; (80032fc <HAL_InitTick+0x5c>)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
 80032e8:	e000      	b.n	80032ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	2000000c 	.word	0x2000000c
 80032f8:	20000014 	.word	0x20000014
 80032fc:	20000010 	.word	0x20000010

08003300 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003304:	4b06      	ldr	r3, [pc, #24]	; (8003320 <HAL_IncTick+0x20>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	461a      	mov	r2, r3
 800330a:	4b06      	ldr	r3, [pc, #24]	; (8003324 <HAL_IncTick+0x24>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4413      	add	r3, r2
 8003310:	4a04      	ldr	r2, [pc, #16]	; (8003324 <HAL_IncTick+0x24>)
 8003312:	6013      	str	r3, [r2, #0]
}
 8003314:	bf00      	nop
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	20000014 	.word	0x20000014
 8003324:	20000568 	.word	0x20000568

08003328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  return uwTick;
 800332c:	4b03      	ldr	r3, [pc, #12]	; (800333c <HAL_GetTick+0x14>)
 800332e:	681b      	ldr	r3, [r3, #0]
}
 8003330:	4618      	mov	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	20000568 	.word	0x20000568

08003340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003350:	4b0c      	ldr	r3, [pc, #48]	; (8003384 <__NVIC_SetPriorityGrouping+0x44>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800335c:	4013      	ands	r3, r2
 800335e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003368:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800336c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003372:	4a04      	ldr	r2, [pc, #16]	; (8003384 <__NVIC_SetPriorityGrouping+0x44>)
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	60d3      	str	r3, [r2, #12]
}
 8003378:	bf00      	nop
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	e000ed00 	.word	0xe000ed00

08003388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800338c:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <__NVIC_GetPriorityGrouping+0x18>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	0a1b      	lsrs	r3, r3, #8
 8003392:	f003 0307 	and.w	r3, r3, #7
}
 8003396:	4618      	mov	r0, r3
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	e000ed00 	.word	0xe000ed00

080033a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	4603      	mov	r3, r0
 80033ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	db0b      	blt.n	80033ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033b6:	79fb      	ldrb	r3, [r7, #7]
 80033b8:	f003 021f 	and.w	r2, r3, #31
 80033bc:	4907      	ldr	r1, [pc, #28]	; (80033dc <__NVIC_EnableIRQ+0x38>)
 80033be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c2:	095b      	lsrs	r3, r3, #5
 80033c4:	2001      	movs	r0, #1
 80033c6:	fa00 f202 	lsl.w	r2, r0, r2
 80033ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	e000e100 	.word	0xe000e100

080033e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	6039      	str	r1, [r7, #0]
 80033ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	db0a      	blt.n	800340a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	490c      	ldr	r1, [pc, #48]	; (800342c <__NVIC_SetPriority+0x4c>)
 80033fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fe:	0112      	lsls	r2, r2, #4
 8003400:	b2d2      	uxtb	r2, r2
 8003402:	440b      	add	r3, r1
 8003404:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003408:	e00a      	b.n	8003420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	b2da      	uxtb	r2, r3
 800340e:	4908      	ldr	r1, [pc, #32]	; (8003430 <__NVIC_SetPriority+0x50>)
 8003410:	79fb      	ldrb	r3, [r7, #7]
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	3b04      	subs	r3, #4
 8003418:	0112      	lsls	r2, r2, #4
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	440b      	add	r3, r1
 800341e:	761a      	strb	r2, [r3, #24]
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	e000e100 	.word	0xe000e100
 8003430:	e000ed00 	.word	0xe000ed00

08003434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003434:	b480      	push	{r7}
 8003436:	b089      	sub	sp, #36	; 0x24
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f1c3 0307 	rsb	r3, r3, #7
 800344e:	2b04      	cmp	r3, #4
 8003450:	bf28      	it	cs
 8003452:	2304      	movcs	r3, #4
 8003454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	3304      	adds	r3, #4
 800345a:	2b06      	cmp	r3, #6
 800345c:	d902      	bls.n	8003464 <NVIC_EncodePriority+0x30>
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	3b03      	subs	r3, #3
 8003462:	e000      	b.n	8003466 <NVIC_EncodePriority+0x32>
 8003464:	2300      	movs	r3, #0
 8003466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003468:	f04f 32ff 	mov.w	r2, #4294967295
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	43da      	mvns	r2, r3
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	401a      	ands	r2, r3
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800347c:	f04f 31ff 	mov.w	r1, #4294967295
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	fa01 f303 	lsl.w	r3, r1, r3
 8003486:	43d9      	mvns	r1, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800348c:	4313      	orrs	r3, r2
         );
}
 800348e:	4618      	mov	r0, r3
 8003490:	3724      	adds	r7, #36	; 0x24
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
	...

0800349c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034ac:	d301      	bcc.n	80034b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034ae:	2301      	movs	r3, #1
 80034b0:	e00f      	b.n	80034d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034b2:	4a0a      	ldr	r2, [pc, #40]	; (80034dc <SysTick_Config+0x40>)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034ba:	210f      	movs	r1, #15
 80034bc:	f04f 30ff 	mov.w	r0, #4294967295
 80034c0:	f7ff ff8e 	bl	80033e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034c4:	4b05      	ldr	r3, [pc, #20]	; (80034dc <SysTick_Config+0x40>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ca:	4b04      	ldr	r3, [pc, #16]	; (80034dc <SysTick_Config+0x40>)
 80034cc:	2207      	movs	r2, #7
 80034ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	e000e010 	.word	0xe000e010

080034e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f7ff ff29 	bl	8003340 <__NVIC_SetPriorityGrouping>
}
 80034ee:	bf00      	nop
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b086      	sub	sp, #24
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	4603      	mov	r3, r0
 80034fe:	60b9      	str	r1, [r7, #8]
 8003500:	607a      	str	r2, [r7, #4]
 8003502:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003504:	2300      	movs	r3, #0
 8003506:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003508:	f7ff ff3e 	bl	8003388 <__NVIC_GetPriorityGrouping>
 800350c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	68b9      	ldr	r1, [r7, #8]
 8003512:	6978      	ldr	r0, [r7, #20]
 8003514:	f7ff ff8e 	bl	8003434 <NVIC_EncodePriority>
 8003518:	4602      	mov	r2, r0
 800351a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800351e:	4611      	mov	r1, r2
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff ff5d 	bl	80033e0 <__NVIC_SetPriority>
}
 8003526:	bf00      	nop
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b082      	sub	sp, #8
 8003532:	af00      	add	r7, sp, #0
 8003534:	4603      	mov	r3, r0
 8003536:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff ff31 	bl	80033a4 <__NVIC_EnableIRQ>
}
 8003542:	bf00      	nop
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b082      	sub	sp, #8
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7ff ffa2 	bl	800349c <SysTick_Config>
 8003558:	4603      	mov	r3, r0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
	...

08003564 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003564:	b480      	push	{r7}
 8003566:	b089      	sub	sp, #36	; 0x24
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003572:	2300      	movs	r3, #0
 8003574:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003576:	2300      	movs	r3, #0
 8003578:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800357a:	2300      	movs	r3, #0
 800357c:	61fb      	str	r3, [r7, #28]
 800357e:	e159      	b.n	8003834 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003580:	2201      	movs	r2, #1
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4013      	ands	r3, r2
 8003592:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	429a      	cmp	r2, r3
 800359a:	f040 8148 	bne.w	800382e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f003 0303 	and.w	r3, r3, #3
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d005      	beq.n	80035b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d130      	bne.n	8003618 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	2203      	movs	r2, #3
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	43db      	mvns	r3, r3
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	4013      	ands	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	68da      	ldr	r2, [r3, #12]
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	4313      	orrs	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035ec:	2201      	movs	r2, #1
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	43db      	mvns	r3, r3
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	4013      	ands	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	091b      	lsrs	r3, r3, #4
 8003602:	f003 0201 	and.w	r2, r3, #1
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4313      	orrs	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f003 0303 	and.w	r3, r3, #3
 8003620:	2b03      	cmp	r3, #3
 8003622:	d017      	beq.n	8003654 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	2203      	movs	r2, #3
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	43db      	mvns	r3, r3
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	4013      	ands	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	4313      	orrs	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f003 0303 	and.w	r3, r3, #3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d123      	bne.n	80036a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	08da      	lsrs	r2, r3, #3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	3208      	adds	r2, #8
 8003668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800366c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	220f      	movs	r2, #15
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	43db      	mvns	r3, r3
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4013      	ands	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	691a      	ldr	r2, [r3, #16]
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	f003 0307 	and.w	r3, r3, #7
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	4313      	orrs	r3, r2
 8003698:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	08da      	lsrs	r2, r3, #3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	3208      	adds	r2, #8
 80036a2:	69b9      	ldr	r1, [r7, #24]
 80036a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	2203      	movs	r2, #3
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	43db      	mvns	r3, r3
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4013      	ands	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f003 0203 	and.w	r2, r3, #3
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 80a2 	beq.w	800382e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ea:	2300      	movs	r3, #0
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	4b57      	ldr	r3, [pc, #348]	; (800384c <HAL_GPIO_Init+0x2e8>)
 80036f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f2:	4a56      	ldr	r2, [pc, #344]	; (800384c <HAL_GPIO_Init+0x2e8>)
 80036f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036f8:	6453      	str	r3, [r2, #68]	; 0x44
 80036fa:	4b54      	ldr	r3, [pc, #336]	; (800384c <HAL_GPIO_Init+0x2e8>)
 80036fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003706:	4a52      	ldr	r2, [pc, #328]	; (8003850 <HAL_GPIO_Init+0x2ec>)
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	089b      	lsrs	r3, r3, #2
 800370c:	3302      	adds	r3, #2
 800370e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003712:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	f003 0303 	and.w	r3, r3, #3
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	220f      	movs	r2, #15
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	43db      	mvns	r3, r3
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	4013      	ands	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a49      	ldr	r2, [pc, #292]	; (8003854 <HAL_GPIO_Init+0x2f0>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d019      	beq.n	8003766 <HAL_GPIO_Init+0x202>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a48      	ldr	r2, [pc, #288]	; (8003858 <HAL_GPIO_Init+0x2f4>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d013      	beq.n	8003762 <HAL_GPIO_Init+0x1fe>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a47      	ldr	r2, [pc, #284]	; (800385c <HAL_GPIO_Init+0x2f8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d00d      	beq.n	800375e <HAL_GPIO_Init+0x1fa>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a46      	ldr	r2, [pc, #280]	; (8003860 <HAL_GPIO_Init+0x2fc>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d007      	beq.n	800375a <HAL_GPIO_Init+0x1f6>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a45      	ldr	r2, [pc, #276]	; (8003864 <HAL_GPIO_Init+0x300>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d101      	bne.n	8003756 <HAL_GPIO_Init+0x1f2>
 8003752:	2304      	movs	r3, #4
 8003754:	e008      	b.n	8003768 <HAL_GPIO_Init+0x204>
 8003756:	2307      	movs	r3, #7
 8003758:	e006      	b.n	8003768 <HAL_GPIO_Init+0x204>
 800375a:	2303      	movs	r3, #3
 800375c:	e004      	b.n	8003768 <HAL_GPIO_Init+0x204>
 800375e:	2302      	movs	r3, #2
 8003760:	e002      	b.n	8003768 <HAL_GPIO_Init+0x204>
 8003762:	2301      	movs	r3, #1
 8003764:	e000      	b.n	8003768 <HAL_GPIO_Init+0x204>
 8003766:	2300      	movs	r3, #0
 8003768:	69fa      	ldr	r2, [r7, #28]
 800376a:	f002 0203 	and.w	r2, r2, #3
 800376e:	0092      	lsls	r2, r2, #2
 8003770:	4093      	lsls	r3, r2
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	4313      	orrs	r3, r2
 8003776:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003778:	4935      	ldr	r1, [pc, #212]	; (8003850 <HAL_GPIO_Init+0x2ec>)
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	089b      	lsrs	r3, r3, #2
 800377e:	3302      	adds	r3, #2
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003786:	4b38      	ldr	r3, [pc, #224]	; (8003868 <HAL_GPIO_Init+0x304>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	43db      	mvns	r3, r3
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	4013      	ands	r3, r2
 8003794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037aa:	4a2f      	ldr	r2, [pc, #188]	; (8003868 <HAL_GPIO_Init+0x304>)
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037b0:	4b2d      	ldr	r3, [pc, #180]	; (8003868 <HAL_GPIO_Init+0x304>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	43db      	mvns	r3, r3
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	4013      	ands	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037d4:	4a24      	ldr	r2, [pc, #144]	; (8003868 <HAL_GPIO_Init+0x304>)
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037da:	4b23      	ldr	r3, [pc, #140]	; (8003868 <HAL_GPIO_Init+0x304>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	43db      	mvns	r3, r3
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	4013      	ands	r3, r2
 80037e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037fe:	4a1a      	ldr	r2, [pc, #104]	; (8003868 <HAL_GPIO_Init+0x304>)
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003804:	4b18      	ldr	r3, [pc, #96]	; (8003868 <HAL_GPIO_Init+0x304>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	43db      	mvns	r3, r3
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	4013      	ands	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4313      	orrs	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003828:	4a0f      	ldr	r2, [pc, #60]	; (8003868 <HAL_GPIO_Init+0x304>)
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	3301      	adds	r3, #1
 8003832:	61fb      	str	r3, [r7, #28]
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	2b0f      	cmp	r3, #15
 8003838:	f67f aea2 	bls.w	8003580 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800383c:	bf00      	nop
 800383e:	bf00      	nop
 8003840:	3724      	adds	r7, #36	; 0x24
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	40023800 	.word	0x40023800
 8003850:	40013800 	.word	0x40013800
 8003854:	40020000 	.word	0x40020000
 8003858:	40020400 	.word	0x40020400
 800385c:	40020800 	.word	0x40020800
 8003860:	40020c00 	.word	0x40020c00
 8003864:	40021000 	.word	0x40021000
 8003868:	40013c00 	.word	0x40013c00

0800386c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	460b      	mov	r3, r1
 8003876:	807b      	strh	r3, [r7, #2]
 8003878:	4613      	mov	r3, r2
 800387a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800387c:	787b      	ldrb	r3, [r7, #1]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003882:	887a      	ldrh	r2, [r7, #2]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003888:	e003      	b.n	8003892 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800388a:	887b      	ldrh	r3, [r7, #2]
 800388c:	041a      	lsls	r2, r3, #16
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	619a      	str	r2, [r3, #24]
}
 8003892:	bf00      	nop
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
	...

080038a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e267      	b.n	8003d82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d075      	beq.n	80039aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038be:	4b88      	ldr	r3, [pc, #544]	; (8003ae0 <HAL_RCC_OscConfig+0x240>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 030c 	and.w	r3, r3, #12
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	d00c      	beq.n	80038e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038ca:	4b85      	ldr	r3, [pc, #532]	; (8003ae0 <HAL_RCC_OscConfig+0x240>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038d2:	2b08      	cmp	r3, #8
 80038d4:	d112      	bne.n	80038fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038d6:	4b82      	ldr	r3, [pc, #520]	; (8003ae0 <HAL_RCC_OscConfig+0x240>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038e2:	d10b      	bne.n	80038fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e4:	4b7e      	ldr	r3, [pc, #504]	; (8003ae0 <HAL_RCC_OscConfig+0x240>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d05b      	beq.n	80039a8 <HAL_RCC_OscConfig+0x108>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d157      	bne.n	80039a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e242      	b.n	8003d82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003904:	d106      	bne.n	8003914 <HAL_RCC_OscConfig+0x74>
 8003906:	4b76      	ldr	r3, [pc, #472]	; (8003ae0 <HAL_RCC_OscConfig+0x240>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a75      	ldr	r2, [pc, #468]	; (8003ae0 <HAL_RCC_OscConfig+0x240>)
 800390c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003910:	6013      	str	r3, [r2, #0]
 8003912:	e01d      	b.n	8003950 <HAL_RCC_OscConfig+0xb0>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800391c:	d10c      	bne.n	8003938 <HAL_RCC_OscConfig+0x98>
 800391e:	4b70      	ldr	r3, [pc, #448]	; (8003ae0 <HAL_RCC_OscConfig+0x240>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a6f      	ldr	r2, [pc, #444]	; (8003ae0 <HAL_RCC_OscConfig+0x240>)
 8003924:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	4b6d      	ldr	r3, [pc, #436]	; (8003ae0 <HAL_RCC_OscConfig+0x240>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a6c      	ldr	r2, [pc, #432]	; (8003ae0 <HAL_RCC_OscConfig+0x240>)
 8003930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	e00b      	b.n	8003950 <HAL_RCC_OscConfig+0xb0>
 8003938:	4b69      	ldr	r3, [pc, #420]	; (8003ae0 <HAL_RCC_OscConfig+0x240>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a68      	ldr	r2, [pc, #416]	; (8003ae0 <HAL_RCC_OscConfig+0x240>)
 800393e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003942:	6013      	str	r3, [r2, #0]
 8003944:	4b66      	ldr	r3, [pc, #408]	; (8003ae0 <HAL_RCC_OscConfig+0x240>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a65      	ldr	r2, [pc, #404]	; (8003ae0 <HAL_RCC_OscConfig+0x240>)
 800394a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800394e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d013      	beq.n	8003980 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003958:	f7ff fce6 	bl	8003328 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003960:	f7ff fce2 	bl	8003328 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b64      	cmp	r3, #100	; 0x64
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e207      	b.n	8003d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003972:	4b5b      	ldr	r3, [pc, #364]	; (8003ae0 <HAL_RCC_OscConfig+0x240>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0f0      	beq.n	8003960 <HAL_RCC_OscConfig+0xc0>
 800397e:	e014      	b.n	80039aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003980:	f7ff fcd2 	bl	8003328 <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003988:	f7ff fcce 	bl	8003328 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b64      	cmp	r3, #100	; 0x64
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e1f3      	b.n	8003d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800399a:	4b51      	ldr	r3, [pc, #324]	; (8003ae0 <HAL_RCC_OscConfig+0x240>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1f0      	bne.n	8003988 <HAL_RCC_OscConfig+0xe8>
 80039a6:	e000      	b.n	80039aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d063      	beq.n	8003a7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039b6:	4b4a      	ldr	r3, [pc, #296]	; (8003ae0 <HAL_RCC_OscConfig+0x240>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 030c 	and.w	r3, r3, #12
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00b      	beq.n	80039da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039c2:	4b47      	ldr	r3, [pc, #284]	; (8003ae0 <HAL_RCC_OscConfig+0x240>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039ca:	2b08      	cmp	r3, #8
 80039cc:	d11c      	bne.n	8003a08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ce:	4b44      	ldr	r3, [pc, #272]	; (8003ae0 <HAL_RCC_OscConfig+0x240>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d116      	bne.n	8003a08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039da:	4b41      	ldr	r3, [pc, #260]	; (8003ae0 <HAL_RCC_OscConfig+0x240>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d005      	beq.n	80039f2 <HAL_RCC_OscConfig+0x152>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d001      	beq.n	80039f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e1c7      	b.n	8003d82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039f2:	4b3b      	ldr	r3, [pc, #236]	; (8003ae0 <HAL_RCC_OscConfig+0x240>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	4937      	ldr	r1, [pc, #220]	; (8003ae0 <HAL_RCC_OscConfig+0x240>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a06:	e03a      	b.n	8003a7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d020      	beq.n	8003a52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a10:	4b34      	ldr	r3, [pc, #208]	; (8003ae4 <HAL_RCC_OscConfig+0x244>)
 8003a12:	2201      	movs	r2, #1
 8003a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a16:	f7ff fc87 	bl	8003328 <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a1c:	e008      	b.n	8003a30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a1e:	f7ff fc83 	bl	8003328 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e1a8      	b.n	8003d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a30:	4b2b      	ldr	r3, [pc, #172]	; (8003ae0 <HAL_RCC_OscConfig+0x240>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0f0      	beq.n	8003a1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a3c:	4b28      	ldr	r3, [pc, #160]	; (8003ae0 <HAL_RCC_OscConfig+0x240>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	4925      	ldr	r1, [pc, #148]	; (8003ae0 <HAL_RCC_OscConfig+0x240>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	600b      	str	r3, [r1, #0]
 8003a50:	e015      	b.n	8003a7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a52:	4b24      	ldr	r3, [pc, #144]	; (8003ae4 <HAL_RCC_OscConfig+0x244>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a58:	f7ff fc66 	bl	8003328 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a60:	f7ff fc62 	bl	8003328 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e187      	b.n	8003d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a72:	4b1b      	ldr	r3, [pc, #108]	; (8003ae0 <HAL_RCC_OscConfig+0x240>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1f0      	bne.n	8003a60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0308 	and.w	r3, r3, #8
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d036      	beq.n	8003af8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d016      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a92:	4b15      	ldr	r3, [pc, #84]	; (8003ae8 <HAL_RCC_OscConfig+0x248>)
 8003a94:	2201      	movs	r2, #1
 8003a96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a98:	f7ff fc46 	bl	8003328 <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aa0:	f7ff fc42 	bl	8003328 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e167      	b.n	8003d82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ab2:	4b0b      	ldr	r3, [pc, #44]	; (8003ae0 <HAL_RCC_OscConfig+0x240>)
 8003ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0f0      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x200>
 8003abe:	e01b      	b.n	8003af8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ac0:	4b09      	ldr	r3, [pc, #36]	; (8003ae8 <HAL_RCC_OscConfig+0x248>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ac6:	f7ff fc2f 	bl	8003328 <HAL_GetTick>
 8003aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003acc:	e00e      	b.n	8003aec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ace:	f7ff fc2b 	bl	8003328 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d907      	bls.n	8003aec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e150      	b.n	8003d82 <HAL_RCC_OscConfig+0x4e2>
 8003ae0:	40023800 	.word	0x40023800
 8003ae4:	42470000 	.word	0x42470000
 8003ae8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aec:	4b88      	ldr	r3, [pc, #544]	; (8003d10 <HAL_RCC_OscConfig+0x470>)
 8003aee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1ea      	bne.n	8003ace <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 8097 	beq.w	8003c34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b06:	2300      	movs	r3, #0
 8003b08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b0a:	4b81      	ldr	r3, [pc, #516]	; (8003d10 <HAL_RCC_OscConfig+0x470>)
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10f      	bne.n	8003b36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b16:	2300      	movs	r3, #0
 8003b18:	60bb      	str	r3, [r7, #8]
 8003b1a:	4b7d      	ldr	r3, [pc, #500]	; (8003d10 <HAL_RCC_OscConfig+0x470>)
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	4a7c      	ldr	r2, [pc, #496]	; (8003d10 <HAL_RCC_OscConfig+0x470>)
 8003b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b24:	6413      	str	r3, [r2, #64]	; 0x40
 8003b26:	4b7a      	ldr	r3, [pc, #488]	; (8003d10 <HAL_RCC_OscConfig+0x470>)
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b2e:	60bb      	str	r3, [r7, #8]
 8003b30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b32:	2301      	movs	r3, #1
 8003b34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b36:	4b77      	ldr	r3, [pc, #476]	; (8003d14 <HAL_RCC_OscConfig+0x474>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d118      	bne.n	8003b74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b42:	4b74      	ldr	r3, [pc, #464]	; (8003d14 <HAL_RCC_OscConfig+0x474>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a73      	ldr	r2, [pc, #460]	; (8003d14 <HAL_RCC_OscConfig+0x474>)
 8003b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b4e:	f7ff fbeb 	bl	8003328 <HAL_GetTick>
 8003b52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b54:	e008      	b.n	8003b68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b56:	f7ff fbe7 	bl	8003328 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e10c      	b.n	8003d82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b68:	4b6a      	ldr	r3, [pc, #424]	; (8003d14 <HAL_RCC_OscConfig+0x474>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0f0      	beq.n	8003b56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d106      	bne.n	8003b8a <HAL_RCC_OscConfig+0x2ea>
 8003b7c:	4b64      	ldr	r3, [pc, #400]	; (8003d10 <HAL_RCC_OscConfig+0x470>)
 8003b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b80:	4a63      	ldr	r2, [pc, #396]	; (8003d10 <HAL_RCC_OscConfig+0x470>)
 8003b82:	f043 0301 	orr.w	r3, r3, #1
 8003b86:	6713      	str	r3, [r2, #112]	; 0x70
 8003b88:	e01c      	b.n	8003bc4 <HAL_RCC_OscConfig+0x324>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	2b05      	cmp	r3, #5
 8003b90:	d10c      	bne.n	8003bac <HAL_RCC_OscConfig+0x30c>
 8003b92:	4b5f      	ldr	r3, [pc, #380]	; (8003d10 <HAL_RCC_OscConfig+0x470>)
 8003b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b96:	4a5e      	ldr	r2, [pc, #376]	; (8003d10 <HAL_RCC_OscConfig+0x470>)
 8003b98:	f043 0304 	orr.w	r3, r3, #4
 8003b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b9e:	4b5c      	ldr	r3, [pc, #368]	; (8003d10 <HAL_RCC_OscConfig+0x470>)
 8003ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba2:	4a5b      	ldr	r2, [pc, #364]	; (8003d10 <HAL_RCC_OscConfig+0x470>)
 8003ba4:	f043 0301 	orr.w	r3, r3, #1
 8003ba8:	6713      	str	r3, [r2, #112]	; 0x70
 8003baa:	e00b      	b.n	8003bc4 <HAL_RCC_OscConfig+0x324>
 8003bac:	4b58      	ldr	r3, [pc, #352]	; (8003d10 <HAL_RCC_OscConfig+0x470>)
 8003bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb0:	4a57      	ldr	r2, [pc, #348]	; (8003d10 <HAL_RCC_OscConfig+0x470>)
 8003bb2:	f023 0301 	bic.w	r3, r3, #1
 8003bb6:	6713      	str	r3, [r2, #112]	; 0x70
 8003bb8:	4b55      	ldr	r3, [pc, #340]	; (8003d10 <HAL_RCC_OscConfig+0x470>)
 8003bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bbc:	4a54      	ldr	r2, [pc, #336]	; (8003d10 <HAL_RCC_OscConfig+0x470>)
 8003bbe:	f023 0304 	bic.w	r3, r3, #4
 8003bc2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d015      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bcc:	f7ff fbac 	bl	8003328 <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd2:	e00a      	b.n	8003bea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bd4:	f7ff fba8 	bl	8003328 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e0cb      	b.n	8003d82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bea:	4b49      	ldr	r3, [pc, #292]	; (8003d10 <HAL_RCC_OscConfig+0x470>)
 8003bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0ee      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x334>
 8003bf6:	e014      	b.n	8003c22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bf8:	f7ff fb96 	bl	8003328 <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bfe:	e00a      	b.n	8003c16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c00:	f7ff fb92 	bl	8003328 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e0b5      	b.n	8003d82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c16:	4b3e      	ldr	r3, [pc, #248]	; (8003d10 <HAL_RCC_OscConfig+0x470>)
 8003c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1ee      	bne.n	8003c00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c22:	7dfb      	ldrb	r3, [r7, #23]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d105      	bne.n	8003c34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c28:	4b39      	ldr	r3, [pc, #228]	; (8003d10 <HAL_RCC_OscConfig+0x470>)
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2c:	4a38      	ldr	r2, [pc, #224]	; (8003d10 <HAL_RCC_OscConfig+0x470>)
 8003c2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 80a1 	beq.w	8003d80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c3e:	4b34      	ldr	r3, [pc, #208]	; (8003d10 <HAL_RCC_OscConfig+0x470>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 030c 	and.w	r3, r3, #12
 8003c46:	2b08      	cmp	r3, #8
 8003c48:	d05c      	beq.n	8003d04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d141      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c52:	4b31      	ldr	r3, [pc, #196]	; (8003d18 <HAL_RCC_OscConfig+0x478>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c58:	f7ff fb66 	bl	8003328 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c60:	f7ff fb62 	bl	8003328 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e087      	b.n	8003d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c72:	4b27      	ldr	r3, [pc, #156]	; (8003d10 <HAL_RCC_OscConfig+0x470>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1f0      	bne.n	8003c60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	69da      	ldr	r2, [r3, #28]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8c:	019b      	lsls	r3, r3, #6
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c94:	085b      	lsrs	r3, r3, #1
 8003c96:	3b01      	subs	r3, #1
 8003c98:	041b      	lsls	r3, r3, #16
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca0:	061b      	lsls	r3, r3, #24
 8003ca2:	491b      	ldr	r1, [pc, #108]	; (8003d10 <HAL_RCC_OscConfig+0x470>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ca8:	4b1b      	ldr	r3, [pc, #108]	; (8003d18 <HAL_RCC_OscConfig+0x478>)
 8003caa:	2201      	movs	r2, #1
 8003cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cae:	f7ff fb3b 	bl	8003328 <HAL_GetTick>
 8003cb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cb4:	e008      	b.n	8003cc8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cb6:	f7ff fb37 	bl	8003328 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d901      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e05c      	b.n	8003d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cc8:	4b11      	ldr	r3, [pc, #68]	; (8003d10 <HAL_RCC_OscConfig+0x470>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d0f0      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x416>
 8003cd4:	e054      	b.n	8003d80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cd6:	4b10      	ldr	r3, [pc, #64]	; (8003d18 <HAL_RCC_OscConfig+0x478>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cdc:	f7ff fb24 	bl	8003328 <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ce4:	f7ff fb20 	bl	8003328 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e045      	b.n	8003d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cf6:	4b06      	ldr	r3, [pc, #24]	; (8003d10 <HAL_RCC_OscConfig+0x470>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1f0      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x444>
 8003d02:	e03d      	b.n	8003d80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d107      	bne.n	8003d1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e038      	b.n	8003d82 <HAL_RCC_OscConfig+0x4e2>
 8003d10:	40023800 	.word	0x40023800
 8003d14:	40007000 	.word	0x40007000
 8003d18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d1c:	4b1b      	ldr	r3, [pc, #108]	; (8003d8c <HAL_RCC_OscConfig+0x4ec>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d028      	beq.n	8003d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d121      	bne.n	8003d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d11a      	bne.n	8003d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d111      	bne.n	8003d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d62:	085b      	lsrs	r3, r3, #1
 8003d64:	3b01      	subs	r3, #1
 8003d66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d107      	bne.n	8003d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d001      	beq.n	8003d80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e000      	b.n	8003d82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3718      	adds	r7, #24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	40023800 	.word	0x40023800

08003d90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d101      	bne.n	8003da4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e0cc      	b.n	8003f3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003da4:	4b68      	ldr	r3, [pc, #416]	; (8003f48 <HAL_RCC_ClockConfig+0x1b8>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d90c      	bls.n	8003dcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003db2:	4b65      	ldr	r3, [pc, #404]	; (8003f48 <HAL_RCC_ClockConfig+0x1b8>)
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	b2d2      	uxtb	r2, r2
 8003db8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dba:	4b63      	ldr	r3, [pc, #396]	; (8003f48 <HAL_RCC_ClockConfig+0x1b8>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0307 	and.w	r3, r3, #7
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d001      	beq.n	8003dcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e0b8      	b.n	8003f3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d020      	beq.n	8003e1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d005      	beq.n	8003df0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003de4:	4b59      	ldr	r3, [pc, #356]	; (8003f4c <HAL_RCC_ClockConfig+0x1bc>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	4a58      	ldr	r2, [pc, #352]	; (8003f4c <HAL_RCC_ClockConfig+0x1bc>)
 8003dea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003dee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0308 	and.w	r3, r3, #8
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d005      	beq.n	8003e08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dfc:	4b53      	ldr	r3, [pc, #332]	; (8003f4c <HAL_RCC_ClockConfig+0x1bc>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	4a52      	ldr	r2, [pc, #328]	; (8003f4c <HAL_RCC_ClockConfig+0x1bc>)
 8003e02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e08:	4b50      	ldr	r3, [pc, #320]	; (8003f4c <HAL_RCC_ClockConfig+0x1bc>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	494d      	ldr	r1, [pc, #308]	; (8003f4c <HAL_RCC_ClockConfig+0x1bc>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d044      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d107      	bne.n	8003e3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e2e:	4b47      	ldr	r3, [pc, #284]	; (8003f4c <HAL_RCC_ClockConfig+0x1bc>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d119      	bne.n	8003e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e07f      	b.n	8003f3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d003      	beq.n	8003e4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e4a:	2b03      	cmp	r3, #3
 8003e4c:	d107      	bne.n	8003e5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e4e:	4b3f      	ldr	r3, [pc, #252]	; (8003f4c <HAL_RCC_ClockConfig+0x1bc>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d109      	bne.n	8003e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e06f      	b.n	8003f3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e5e:	4b3b      	ldr	r3, [pc, #236]	; (8003f4c <HAL_RCC_ClockConfig+0x1bc>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e067      	b.n	8003f3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e6e:	4b37      	ldr	r3, [pc, #220]	; (8003f4c <HAL_RCC_ClockConfig+0x1bc>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f023 0203 	bic.w	r2, r3, #3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	4934      	ldr	r1, [pc, #208]	; (8003f4c <HAL_RCC_ClockConfig+0x1bc>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e80:	f7ff fa52 	bl	8003328 <HAL_GetTick>
 8003e84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e86:	e00a      	b.n	8003e9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e88:	f7ff fa4e 	bl	8003328 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e04f      	b.n	8003f3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e9e:	4b2b      	ldr	r3, [pc, #172]	; (8003f4c <HAL_RCC_ClockConfig+0x1bc>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 020c 	and.w	r2, r3, #12
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d1eb      	bne.n	8003e88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003eb0:	4b25      	ldr	r3, [pc, #148]	; (8003f48 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d20c      	bcs.n	8003ed8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ebe:	4b22      	ldr	r3, [pc, #136]	; (8003f48 <HAL_RCC_ClockConfig+0x1b8>)
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	b2d2      	uxtb	r2, r2
 8003ec4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ec6:	4b20      	ldr	r3, [pc, #128]	; (8003f48 <HAL_RCC_ClockConfig+0x1b8>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0307 	and.w	r3, r3, #7
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d001      	beq.n	8003ed8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e032      	b.n	8003f3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0304 	and.w	r3, r3, #4
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d008      	beq.n	8003ef6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ee4:	4b19      	ldr	r3, [pc, #100]	; (8003f4c <HAL_RCC_ClockConfig+0x1bc>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	4916      	ldr	r1, [pc, #88]	; (8003f4c <HAL_RCC_ClockConfig+0x1bc>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0308 	and.w	r3, r3, #8
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d009      	beq.n	8003f16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f02:	4b12      	ldr	r3, [pc, #72]	; (8003f4c <HAL_RCC_ClockConfig+0x1bc>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	490e      	ldr	r1, [pc, #56]	; (8003f4c <HAL_RCC_ClockConfig+0x1bc>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f16:	f000 f821 	bl	8003f5c <HAL_RCC_GetSysClockFreq>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	4b0b      	ldr	r3, [pc, #44]	; (8003f4c <HAL_RCC_ClockConfig+0x1bc>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	091b      	lsrs	r3, r3, #4
 8003f22:	f003 030f 	and.w	r3, r3, #15
 8003f26:	490a      	ldr	r1, [pc, #40]	; (8003f50 <HAL_RCC_ClockConfig+0x1c0>)
 8003f28:	5ccb      	ldrb	r3, [r1, r3]
 8003f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f2e:	4a09      	ldr	r2, [pc, #36]	; (8003f54 <HAL_RCC_ClockConfig+0x1c4>)
 8003f30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f32:	4b09      	ldr	r3, [pc, #36]	; (8003f58 <HAL_RCC_ClockConfig+0x1c8>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7ff f9b2 	bl	80032a0 <HAL_InitTick>

  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	40023c00 	.word	0x40023c00
 8003f4c:	40023800 	.word	0x40023800
 8003f50:	080068c4 	.word	0x080068c4
 8003f54:	2000000c 	.word	0x2000000c
 8003f58:	20000010 	.word	0x20000010

08003f5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f60:	b094      	sub	sp, #80	; 0x50
 8003f62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	647b      	str	r3, [r7, #68]	; 0x44
 8003f68:	2300      	movs	r3, #0
 8003f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003f70:	2300      	movs	r3, #0
 8003f72:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f74:	4b79      	ldr	r3, [pc, #484]	; (800415c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f003 030c 	and.w	r3, r3, #12
 8003f7c:	2b08      	cmp	r3, #8
 8003f7e:	d00d      	beq.n	8003f9c <HAL_RCC_GetSysClockFreq+0x40>
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	f200 80e1 	bhi.w	8004148 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d002      	beq.n	8003f90 <HAL_RCC_GetSysClockFreq+0x34>
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	d003      	beq.n	8003f96 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f8e:	e0db      	b.n	8004148 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f90:	4b73      	ldr	r3, [pc, #460]	; (8004160 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f92:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003f94:	e0db      	b.n	800414e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f96:	4b73      	ldr	r3, [pc, #460]	; (8004164 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f9a:	e0d8      	b.n	800414e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f9c:	4b6f      	ldr	r3, [pc, #444]	; (800415c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fa4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fa6:	4b6d      	ldr	r3, [pc, #436]	; (800415c <HAL_RCC_GetSysClockFreq+0x200>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d063      	beq.n	800407a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fb2:	4b6a      	ldr	r3, [pc, #424]	; (800415c <HAL_RCC_GetSysClockFreq+0x200>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	099b      	lsrs	r3, r3, #6
 8003fb8:	2200      	movs	r2, #0
 8003fba:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fbc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fc4:	633b      	str	r3, [r7, #48]	; 0x30
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	637b      	str	r3, [r7, #52]	; 0x34
 8003fca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003fce:	4622      	mov	r2, r4
 8003fd0:	462b      	mov	r3, r5
 8003fd2:	f04f 0000 	mov.w	r0, #0
 8003fd6:	f04f 0100 	mov.w	r1, #0
 8003fda:	0159      	lsls	r1, r3, #5
 8003fdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fe0:	0150      	lsls	r0, r2, #5
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	4621      	mov	r1, r4
 8003fe8:	1a51      	subs	r1, r2, r1
 8003fea:	6139      	str	r1, [r7, #16]
 8003fec:	4629      	mov	r1, r5
 8003fee:	eb63 0301 	sbc.w	r3, r3, r1
 8003ff2:	617b      	str	r3, [r7, #20]
 8003ff4:	f04f 0200 	mov.w	r2, #0
 8003ff8:	f04f 0300 	mov.w	r3, #0
 8003ffc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004000:	4659      	mov	r1, fp
 8004002:	018b      	lsls	r3, r1, #6
 8004004:	4651      	mov	r1, sl
 8004006:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800400a:	4651      	mov	r1, sl
 800400c:	018a      	lsls	r2, r1, #6
 800400e:	4651      	mov	r1, sl
 8004010:	ebb2 0801 	subs.w	r8, r2, r1
 8004014:	4659      	mov	r1, fp
 8004016:	eb63 0901 	sbc.w	r9, r3, r1
 800401a:	f04f 0200 	mov.w	r2, #0
 800401e:	f04f 0300 	mov.w	r3, #0
 8004022:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004026:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800402a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800402e:	4690      	mov	r8, r2
 8004030:	4699      	mov	r9, r3
 8004032:	4623      	mov	r3, r4
 8004034:	eb18 0303 	adds.w	r3, r8, r3
 8004038:	60bb      	str	r3, [r7, #8]
 800403a:	462b      	mov	r3, r5
 800403c:	eb49 0303 	adc.w	r3, r9, r3
 8004040:	60fb      	str	r3, [r7, #12]
 8004042:	f04f 0200 	mov.w	r2, #0
 8004046:	f04f 0300 	mov.w	r3, #0
 800404a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800404e:	4629      	mov	r1, r5
 8004050:	024b      	lsls	r3, r1, #9
 8004052:	4621      	mov	r1, r4
 8004054:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004058:	4621      	mov	r1, r4
 800405a:	024a      	lsls	r2, r1, #9
 800405c:	4610      	mov	r0, r2
 800405e:	4619      	mov	r1, r3
 8004060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004062:	2200      	movs	r2, #0
 8004064:	62bb      	str	r3, [r7, #40]	; 0x28
 8004066:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004068:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800406c:	f7fc fd70 	bl	8000b50 <__aeabi_uldivmod>
 8004070:	4602      	mov	r2, r0
 8004072:	460b      	mov	r3, r1
 8004074:	4613      	mov	r3, r2
 8004076:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004078:	e058      	b.n	800412c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800407a:	4b38      	ldr	r3, [pc, #224]	; (800415c <HAL_RCC_GetSysClockFreq+0x200>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	099b      	lsrs	r3, r3, #6
 8004080:	2200      	movs	r2, #0
 8004082:	4618      	mov	r0, r3
 8004084:	4611      	mov	r1, r2
 8004086:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800408a:	623b      	str	r3, [r7, #32]
 800408c:	2300      	movs	r3, #0
 800408e:	627b      	str	r3, [r7, #36]	; 0x24
 8004090:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004094:	4642      	mov	r2, r8
 8004096:	464b      	mov	r3, r9
 8004098:	f04f 0000 	mov.w	r0, #0
 800409c:	f04f 0100 	mov.w	r1, #0
 80040a0:	0159      	lsls	r1, r3, #5
 80040a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040a6:	0150      	lsls	r0, r2, #5
 80040a8:	4602      	mov	r2, r0
 80040aa:	460b      	mov	r3, r1
 80040ac:	4641      	mov	r1, r8
 80040ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80040b2:	4649      	mov	r1, r9
 80040b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80040b8:	f04f 0200 	mov.w	r2, #0
 80040bc:	f04f 0300 	mov.w	r3, #0
 80040c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80040c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80040c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80040cc:	ebb2 040a 	subs.w	r4, r2, sl
 80040d0:	eb63 050b 	sbc.w	r5, r3, fp
 80040d4:	f04f 0200 	mov.w	r2, #0
 80040d8:	f04f 0300 	mov.w	r3, #0
 80040dc:	00eb      	lsls	r3, r5, #3
 80040de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040e2:	00e2      	lsls	r2, r4, #3
 80040e4:	4614      	mov	r4, r2
 80040e6:	461d      	mov	r5, r3
 80040e8:	4643      	mov	r3, r8
 80040ea:	18e3      	adds	r3, r4, r3
 80040ec:	603b      	str	r3, [r7, #0]
 80040ee:	464b      	mov	r3, r9
 80040f0:	eb45 0303 	adc.w	r3, r5, r3
 80040f4:	607b      	str	r3, [r7, #4]
 80040f6:	f04f 0200 	mov.w	r2, #0
 80040fa:	f04f 0300 	mov.w	r3, #0
 80040fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004102:	4629      	mov	r1, r5
 8004104:	028b      	lsls	r3, r1, #10
 8004106:	4621      	mov	r1, r4
 8004108:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800410c:	4621      	mov	r1, r4
 800410e:	028a      	lsls	r2, r1, #10
 8004110:	4610      	mov	r0, r2
 8004112:	4619      	mov	r1, r3
 8004114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004116:	2200      	movs	r2, #0
 8004118:	61bb      	str	r3, [r7, #24]
 800411a:	61fa      	str	r2, [r7, #28]
 800411c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004120:	f7fc fd16 	bl	8000b50 <__aeabi_uldivmod>
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	4613      	mov	r3, r2
 800412a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800412c:	4b0b      	ldr	r3, [pc, #44]	; (800415c <HAL_RCC_GetSysClockFreq+0x200>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	0c1b      	lsrs	r3, r3, #16
 8004132:	f003 0303 	and.w	r3, r3, #3
 8004136:	3301      	adds	r3, #1
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800413c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800413e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004140:	fbb2 f3f3 	udiv	r3, r2, r3
 8004144:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004146:	e002      	b.n	800414e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004148:	4b05      	ldr	r3, [pc, #20]	; (8004160 <HAL_RCC_GetSysClockFreq+0x204>)
 800414a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800414c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800414e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004150:	4618      	mov	r0, r3
 8004152:	3750      	adds	r7, #80	; 0x50
 8004154:	46bd      	mov	sp, r7
 8004156:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800415a:	bf00      	nop
 800415c:	40023800 	.word	0x40023800
 8004160:	00f42400 	.word	0x00f42400
 8004164:	007a1200 	.word	0x007a1200

08004168 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004168:	b480      	push	{r7}
 800416a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800416c:	4b03      	ldr	r3, [pc, #12]	; (800417c <HAL_RCC_GetHCLKFreq+0x14>)
 800416e:	681b      	ldr	r3, [r3, #0]
}
 8004170:	4618      	mov	r0, r3
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	2000000c 	.word	0x2000000c

08004180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004184:	f7ff fff0 	bl	8004168 <HAL_RCC_GetHCLKFreq>
 8004188:	4602      	mov	r2, r0
 800418a:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	0a9b      	lsrs	r3, r3, #10
 8004190:	f003 0307 	and.w	r3, r3, #7
 8004194:	4903      	ldr	r1, [pc, #12]	; (80041a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004196:	5ccb      	ldrb	r3, [r1, r3]
 8004198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800419c:	4618      	mov	r0, r3
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	40023800 	.word	0x40023800
 80041a4:	080068d4 	.word	0x080068d4

080041a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041ac:	f7ff ffdc 	bl	8004168 <HAL_RCC_GetHCLKFreq>
 80041b0:	4602      	mov	r2, r0
 80041b2:	4b05      	ldr	r3, [pc, #20]	; (80041c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	0b5b      	lsrs	r3, r3, #13
 80041b8:	f003 0307 	and.w	r3, r3, #7
 80041bc:	4903      	ldr	r1, [pc, #12]	; (80041cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80041be:	5ccb      	ldrb	r3, [r1, r3]
 80041c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	40023800 	.word	0x40023800
 80041cc:	080068d4 	.word	0x080068d4

080041d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e041      	b.n	8004266 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d106      	bne.n	80041fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7fe feba 	bl	8002f70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2202      	movs	r2, #2
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	3304      	adds	r3, #4
 800420c:	4619      	mov	r1, r3
 800420e:	4610      	mov	r0, r2
 8004210:	f000 fd88 	bl	8004d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
	...

08004270 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b01      	cmp	r3, #1
 8004282:	d001      	beq.n	8004288 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e044      	b.n	8004312 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2202      	movs	r2, #2
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0201 	orr.w	r2, r2, #1
 800429e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a1e      	ldr	r2, [pc, #120]	; (8004320 <HAL_TIM_Base_Start_IT+0xb0>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d018      	beq.n	80042dc <HAL_TIM_Base_Start_IT+0x6c>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b2:	d013      	beq.n	80042dc <HAL_TIM_Base_Start_IT+0x6c>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a1a      	ldr	r2, [pc, #104]	; (8004324 <HAL_TIM_Base_Start_IT+0xb4>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d00e      	beq.n	80042dc <HAL_TIM_Base_Start_IT+0x6c>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a19      	ldr	r2, [pc, #100]	; (8004328 <HAL_TIM_Base_Start_IT+0xb8>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d009      	beq.n	80042dc <HAL_TIM_Base_Start_IT+0x6c>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a17      	ldr	r2, [pc, #92]	; (800432c <HAL_TIM_Base_Start_IT+0xbc>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d004      	beq.n	80042dc <HAL_TIM_Base_Start_IT+0x6c>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a16      	ldr	r2, [pc, #88]	; (8004330 <HAL_TIM_Base_Start_IT+0xc0>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d111      	bne.n	8004300 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f003 0307 	and.w	r3, r3, #7
 80042e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2b06      	cmp	r3, #6
 80042ec:	d010      	beq.n	8004310 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f042 0201 	orr.w	r2, r2, #1
 80042fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042fe:	e007      	b.n	8004310 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0201 	orr.w	r2, r2, #1
 800430e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	40010000 	.word	0x40010000
 8004324:	40000400 	.word	0x40000400
 8004328:	40000800 	.word	0x40000800
 800432c:	40000c00 	.word	0x40000c00
 8004330:	40014000 	.word	0x40014000

08004334 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e041      	b.n	80043ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d106      	bne.n	8004360 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f839 	bl	80043d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2202      	movs	r2, #2
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	3304      	adds	r3, #4
 8004370:	4619      	mov	r1, r3
 8004372:	4610      	mov	r0, r2
 8004374:	f000 fcd6 	bl	8004d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
	...

080043e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d109      	bne.n	800440c <HAL_TIM_PWM_Start+0x24>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b01      	cmp	r3, #1
 8004402:	bf14      	ite	ne
 8004404:	2301      	movne	r3, #1
 8004406:	2300      	moveq	r3, #0
 8004408:	b2db      	uxtb	r3, r3
 800440a:	e022      	b.n	8004452 <HAL_TIM_PWM_Start+0x6a>
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	2b04      	cmp	r3, #4
 8004410:	d109      	bne.n	8004426 <HAL_TIM_PWM_Start+0x3e>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b01      	cmp	r3, #1
 800441c:	bf14      	ite	ne
 800441e:	2301      	movne	r3, #1
 8004420:	2300      	moveq	r3, #0
 8004422:	b2db      	uxtb	r3, r3
 8004424:	e015      	b.n	8004452 <HAL_TIM_PWM_Start+0x6a>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	2b08      	cmp	r3, #8
 800442a:	d109      	bne.n	8004440 <HAL_TIM_PWM_Start+0x58>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b01      	cmp	r3, #1
 8004436:	bf14      	ite	ne
 8004438:	2301      	movne	r3, #1
 800443a:	2300      	moveq	r3, #0
 800443c:	b2db      	uxtb	r3, r3
 800443e:	e008      	b.n	8004452 <HAL_TIM_PWM_Start+0x6a>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b01      	cmp	r3, #1
 800444a:	bf14      	ite	ne
 800444c:	2301      	movne	r3, #1
 800444e:	2300      	moveq	r3, #0
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e068      	b.n	800452c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d104      	bne.n	800446a <HAL_TIM_PWM_Start+0x82>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004468:	e013      	b.n	8004492 <HAL_TIM_PWM_Start+0xaa>
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	2b04      	cmp	r3, #4
 800446e:	d104      	bne.n	800447a <HAL_TIM_PWM_Start+0x92>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2202      	movs	r2, #2
 8004474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004478:	e00b      	b.n	8004492 <HAL_TIM_PWM_Start+0xaa>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	2b08      	cmp	r3, #8
 800447e:	d104      	bne.n	800448a <HAL_TIM_PWM_Start+0xa2>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004488:	e003      	b.n	8004492 <HAL_TIM_PWM_Start+0xaa>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2202      	movs	r2, #2
 800448e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2201      	movs	r2, #1
 8004498:	6839      	ldr	r1, [r7, #0]
 800449a:	4618      	mov	r0, r3
 800449c:	f000 fee8 	bl	8005270 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a23      	ldr	r2, [pc, #140]	; (8004534 <HAL_TIM_PWM_Start+0x14c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d107      	bne.n	80044ba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a1d      	ldr	r2, [pc, #116]	; (8004534 <HAL_TIM_PWM_Start+0x14c>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d018      	beq.n	80044f6 <HAL_TIM_PWM_Start+0x10e>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044cc:	d013      	beq.n	80044f6 <HAL_TIM_PWM_Start+0x10e>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a19      	ldr	r2, [pc, #100]	; (8004538 <HAL_TIM_PWM_Start+0x150>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d00e      	beq.n	80044f6 <HAL_TIM_PWM_Start+0x10e>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a17      	ldr	r2, [pc, #92]	; (800453c <HAL_TIM_PWM_Start+0x154>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d009      	beq.n	80044f6 <HAL_TIM_PWM_Start+0x10e>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a16      	ldr	r2, [pc, #88]	; (8004540 <HAL_TIM_PWM_Start+0x158>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d004      	beq.n	80044f6 <HAL_TIM_PWM_Start+0x10e>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a14      	ldr	r2, [pc, #80]	; (8004544 <HAL_TIM_PWM_Start+0x15c>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d111      	bne.n	800451a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f003 0307 	and.w	r3, r3, #7
 8004500:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2b06      	cmp	r3, #6
 8004506:	d010      	beq.n	800452a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f042 0201 	orr.w	r2, r2, #1
 8004516:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004518:	e007      	b.n	800452a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f042 0201 	orr.w	r2, r2, #1
 8004528:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	40010000 	.word	0x40010000
 8004538:	40000400 	.word	0x40000400
 800453c:	40000800 	.word	0x40000800
 8004540:	40000c00 	.word	0x40000c00
 8004544:	40014000 	.word	0x40014000

08004548 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e097      	b.n	800468c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b00      	cmp	r3, #0
 8004566:	d106      	bne.n	8004576 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f7fe fd3b 	bl	8002fec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2202      	movs	r2, #2
 800457a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	6812      	ldr	r2, [r2, #0]
 8004588:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800458c:	f023 0307 	bic.w	r3, r3, #7
 8004590:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	3304      	adds	r3, #4
 800459a:	4619      	mov	r1, r3
 800459c:	4610      	mov	r0, r2
 800459e:	f000 fbc1 	bl	8004d24 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ca:	f023 0303 	bic.w	r3, r3, #3
 80045ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	021b      	lsls	r3, r3, #8
 80045da:	4313      	orrs	r3, r2
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	4313      	orrs	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80045e8:	f023 030c 	bic.w	r3, r3, #12
 80045ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	68da      	ldr	r2, [r3, #12]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	021b      	lsls	r3, r3, #8
 8004604:	4313      	orrs	r3, r2
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	4313      	orrs	r3, r2
 800460a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	011a      	lsls	r2, r3, #4
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	031b      	lsls	r3, r3, #12
 8004618:	4313      	orrs	r3, r2
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	4313      	orrs	r3, r2
 800461e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004626:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800462e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	011b      	lsls	r3, r3, #4
 800463a:	4313      	orrs	r3, r2
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	4313      	orrs	r3, r2
 8004640:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3718      	adds	r7, #24
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046a4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046ac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80046b4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80046bc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d110      	bne.n	80046e6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046c4:	7bfb      	ldrb	r3, [r7, #15]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d102      	bne.n	80046d0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80046ca:	7b7b      	ldrb	r3, [r7, #13]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d001      	beq.n	80046d4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e069      	b.n	80047a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2202      	movs	r2, #2
 80046d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046e4:	e031      	b.n	800474a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	2b04      	cmp	r3, #4
 80046ea:	d110      	bne.n	800470e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046ec:	7bbb      	ldrb	r3, [r7, #14]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d102      	bne.n	80046f8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046f2:	7b3b      	ldrb	r3, [r7, #12]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d001      	beq.n	80046fc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e055      	b.n	80047a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2202      	movs	r2, #2
 8004700:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2202      	movs	r2, #2
 8004708:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800470c:	e01d      	b.n	800474a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800470e:	7bfb      	ldrb	r3, [r7, #15]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d108      	bne.n	8004726 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004714:	7bbb      	ldrb	r3, [r7, #14]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d105      	bne.n	8004726 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800471a:	7b7b      	ldrb	r3, [r7, #13]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d102      	bne.n	8004726 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004720:	7b3b      	ldrb	r3, [r7, #12]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d001      	beq.n	800472a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e03e      	b.n	80047a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2202      	movs	r2, #2
 800472e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2202      	movs	r2, #2
 8004736:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2202      	movs	r2, #2
 800473e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2202      	movs	r2, #2
 8004746:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d003      	beq.n	8004758 <HAL_TIM_Encoder_Start+0xc4>
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	2b04      	cmp	r3, #4
 8004754:	d008      	beq.n	8004768 <HAL_TIM_Encoder_Start+0xd4>
 8004756:	e00f      	b.n	8004778 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2201      	movs	r2, #1
 800475e:	2100      	movs	r1, #0
 8004760:	4618      	mov	r0, r3
 8004762:	f000 fd85 	bl	8005270 <TIM_CCxChannelCmd>
      break;
 8004766:	e016      	b.n	8004796 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2201      	movs	r2, #1
 800476e:	2104      	movs	r1, #4
 8004770:	4618      	mov	r0, r3
 8004772:	f000 fd7d 	bl	8005270 <TIM_CCxChannelCmd>
      break;
 8004776:	e00e      	b.n	8004796 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2201      	movs	r2, #1
 800477e:	2100      	movs	r1, #0
 8004780:	4618      	mov	r0, r3
 8004782:	f000 fd75 	bl	8005270 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2201      	movs	r2, #1
 800478c:	2104      	movs	r1, #4
 800478e:	4618      	mov	r0, r3
 8004790:	f000 fd6e 	bl	8005270 <TIM_CCxChannelCmd>
      break;
 8004794:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f042 0201 	orr.w	r2, r2, #1
 80047a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d122      	bne.n	800480c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d11b      	bne.n	800480c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f06f 0202 	mvn.w	r2, #2
 80047dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	f003 0303 	and.w	r3, r3, #3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 fa77 	bl	8004ce6 <HAL_TIM_IC_CaptureCallback>
 80047f8:	e005      	b.n	8004806 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 fa69 	bl	8004cd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 fa7a 	bl	8004cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	f003 0304 	and.w	r3, r3, #4
 8004816:	2b04      	cmp	r3, #4
 8004818:	d122      	bne.n	8004860 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b04      	cmp	r3, #4
 8004826:	d11b      	bne.n	8004860 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f06f 0204 	mvn.w	r2, #4
 8004830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2202      	movs	r2, #2
 8004836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 fa4d 	bl	8004ce6 <HAL_TIM_IC_CaptureCallback>
 800484c:	e005      	b.n	800485a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 fa3f 	bl	8004cd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 fa50 	bl	8004cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	f003 0308 	and.w	r3, r3, #8
 800486a:	2b08      	cmp	r3, #8
 800486c:	d122      	bne.n	80048b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	f003 0308 	and.w	r3, r3, #8
 8004878:	2b08      	cmp	r3, #8
 800487a:	d11b      	bne.n	80048b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f06f 0208 	mvn.w	r2, #8
 8004884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2204      	movs	r2, #4
 800488a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	f003 0303 	and.w	r3, r3, #3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 fa23 	bl	8004ce6 <HAL_TIM_IC_CaptureCallback>
 80048a0:	e005      	b.n	80048ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 fa15 	bl	8004cd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 fa26 	bl	8004cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	f003 0310 	and.w	r3, r3, #16
 80048be:	2b10      	cmp	r3, #16
 80048c0:	d122      	bne.n	8004908 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f003 0310 	and.w	r3, r3, #16
 80048cc:	2b10      	cmp	r3, #16
 80048ce:	d11b      	bne.n	8004908 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f06f 0210 	mvn.w	r2, #16
 80048d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2208      	movs	r2, #8
 80048de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f9f9 	bl	8004ce6 <HAL_TIM_IC_CaptureCallback>
 80048f4:	e005      	b.n	8004902 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f9eb 	bl	8004cd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 f9fc 	bl	8004cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b01      	cmp	r3, #1
 8004914:	d10e      	bne.n	8004934 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	2b01      	cmp	r3, #1
 8004922:	d107      	bne.n	8004934 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f06f 0201 	mvn.w	r2, #1
 800492c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f7fe f87a 	bl	8002a28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800493e:	2b80      	cmp	r3, #128	; 0x80
 8004940:	d10e      	bne.n	8004960 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494c:	2b80      	cmp	r3, #128	; 0x80
 800494e:	d107      	bne.n	8004960 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fd78 	bl	8005450 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496a:	2b40      	cmp	r3, #64	; 0x40
 800496c:	d10e      	bne.n	800498c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004978:	2b40      	cmp	r3, #64	; 0x40
 800497a:	d107      	bne.n	800498c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f9c1 	bl	8004d0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	f003 0320 	and.w	r3, r3, #32
 8004996:	2b20      	cmp	r3, #32
 8004998:	d10e      	bne.n	80049b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	f003 0320 	and.w	r3, r3, #32
 80049a4:	2b20      	cmp	r3, #32
 80049a6:	d107      	bne.n	80049b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f06f 0220 	mvn.w	r2, #32
 80049b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 fd42 	bl	800543c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049b8:	bf00      	nop
 80049ba:	3708      	adds	r7, #8
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049cc:	2300      	movs	r3, #0
 80049ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d101      	bne.n	80049de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049da:	2302      	movs	r3, #2
 80049dc:	e0ae      	b.n	8004b3c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b0c      	cmp	r3, #12
 80049ea:	f200 809f 	bhi.w	8004b2c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80049ee:	a201      	add	r2, pc, #4	; (adr r2, 80049f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f4:	08004a29 	.word	0x08004a29
 80049f8:	08004b2d 	.word	0x08004b2d
 80049fc:	08004b2d 	.word	0x08004b2d
 8004a00:	08004b2d 	.word	0x08004b2d
 8004a04:	08004a69 	.word	0x08004a69
 8004a08:	08004b2d 	.word	0x08004b2d
 8004a0c:	08004b2d 	.word	0x08004b2d
 8004a10:	08004b2d 	.word	0x08004b2d
 8004a14:	08004aab 	.word	0x08004aab
 8004a18:	08004b2d 	.word	0x08004b2d
 8004a1c:	08004b2d 	.word	0x08004b2d
 8004a20:	08004b2d 	.word	0x08004b2d
 8004a24:	08004aeb 	.word	0x08004aeb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68b9      	ldr	r1, [r7, #8]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 f9f8 	bl	8004e24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	699a      	ldr	r2, [r3, #24]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f042 0208 	orr.w	r2, r2, #8
 8004a42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	699a      	ldr	r2, [r3, #24]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 0204 	bic.w	r2, r2, #4
 8004a52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6999      	ldr	r1, [r3, #24]
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	691a      	ldr	r2, [r3, #16]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	619a      	str	r2, [r3, #24]
      break;
 8004a66:	e064      	b.n	8004b32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68b9      	ldr	r1, [r7, #8]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 fa3e 	bl	8004ef0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	699a      	ldr	r2, [r3, #24]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	699a      	ldr	r2, [r3, #24]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6999      	ldr	r1, [r3, #24]
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	021a      	lsls	r2, r3, #8
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	619a      	str	r2, [r3, #24]
      break;
 8004aa8:	e043      	b.n	8004b32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68b9      	ldr	r1, [r7, #8]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f000 fa89 	bl	8004fc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	69da      	ldr	r2, [r3, #28]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f042 0208 	orr.w	r2, r2, #8
 8004ac4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	69da      	ldr	r2, [r3, #28]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f022 0204 	bic.w	r2, r2, #4
 8004ad4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	69d9      	ldr	r1, [r3, #28]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	691a      	ldr	r2, [r3, #16]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	61da      	str	r2, [r3, #28]
      break;
 8004ae8:	e023      	b.n	8004b32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68b9      	ldr	r1, [r7, #8]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f000 fad3 	bl	800509c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	69da      	ldr	r2, [r3, #28]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	69da      	ldr	r2, [r3, #28]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	69d9      	ldr	r1, [r3, #28]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	021a      	lsls	r2, r3, #8
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	61da      	str	r2, [r3, #28]
      break;
 8004b2a:	e002      	b.n	8004b32 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3718      	adds	r7, #24
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d101      	bne.n	8004b60 <HAL_TIM_ConfigClockSource+0x1c>
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	e0b4      	b.n	8004cca <HAL_TIM_ConfigClockSource+0x186>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b98:	d03e      	beq.n	8004c18 <HAL_TIM_ConfigClockSource+0xd4>
 8004b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b9e:	f200 8087 	bhi.w	8004cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba6:	f000 8086 	beq.w	8004cb6 <HAL_TIM_ConfigClockSource+0x172>
 8004baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bae:	d87f      	bhi.n	8004cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb0:	2b70      	cmp	r3, #112	; 0x70
 8004bb2:	d01a      	beq.n	8004bea <HAL_TIM_ConfigClockSource+0xa6>
 8004bb4:	2b70      	cmp	r3, #112	; 0x70
 8004bb6:	d87b      	bhi.n	8004cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb8:	2b60      	cmp	r3, #96	; 0x60
 8004bba:	d050      	beq.n	8004c5e <HAL_TIM_ConfigClockSource+0x11a>
 8004bbc:	2b60      	cmp	r3, #96	; 0x60
 8004bbe:	d877      	bhi.n	8004cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc0:	2b50      	cmp	r3, #80	; 0x50
 8004bc2:	d03c      	beq.n	8004c3e <HAL_TIM_ConfigClockSource+0xfa>
 8004bc4:	2b50      	cmp	r3, #80	; 0x50
 8004bc6:	d873      	bhi.n	8004cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc8:	2b40      	cmp	r3, #64	; 0x40
 8004bca:	d058      	beq.n	8004c7e <HAL_TIM_ConfigClockSource+0x13a>
 8004bcc:	2b40      	cmp	r3, #64	; 0x40
 8004bce:	d86f      	bhi.n	8004cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd0:	2b30      	cmp	r3, #48	; 0x30
 8004bd2:	d064      	beq.n	8004c9e <HAL_TIM_ConfigClockSource+0x15a>
 8004bd4:	2b30      	cmp	r3, #48	; 0x30
 8004bd6:	d86b      	bhi.n	8004cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd8:	2b20      	cmp	r3, #32
 8004bda:	d060      	beq.n	8004c9e <HAL_TIM_ConfigClockSource+0x15a>
 8004bdc:	2b20      	cmp	r3, #32
 8004bde:	d867      	bhi.n	8004cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d05c      	beq.n	8004c9e <HAL_TIM_ConfigClockSource+0x15a>
 8004be4:	2b10      	cmp	r3, #16
 8004be6:	d05a      	beq.n	8004c9e <HAL_TIM_ConfigClockSource+0x15a>
 8004be8:	e062      	b.n	8004cb0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6818      	ldr	r0, [r3, #0]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	6899      	ldr	r1, [r3, #8]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	f000 fb19 	bl	8005230 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	609a      	str	r2, [r3, #8]
      break;
 8004c16:	e04f      	b.n	8004cb8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6818      	ldr	r0, [r3, #0]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	6899      	ldr	r1, [r3, #8]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f000 fb02 	bl	8005230 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689a      	ldr	r2, [r3, #8]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c3a:	609a      	str	r2, [r3, #8]
      break;
 8004c3c:	e03c      	b.n	8004cb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6818      	ldr	r0, [r3, #0]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	6859      	ldr	r1, [r3, #4]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	f000 fa76 	bl	800513c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2150      	movs	r1, #80	; 0x50
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 facf 	bl	80051fa <TIM_ITRx_SetConfig>
      break;
 8004c5c:	e02c      	b.n	8004cb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6818      	ldr	r0, [r3, #0]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	6859      	ldr	r1, [r3, #4]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	f000 fa95 	bl	800519a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2160      	movs	r1, #96	; 0x60
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 fabf 	bl	80051fa <TIM_ITRx_SetConfig>
      break;
 8004c7c:	e01c      	b.n	8004cb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6818      	ldr	r0, [r3, #0]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	6859      	ldr	r1, [r3, #4]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	f000 fa56 	bl	800513c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2140      	movs	r1, #64	; 0x40
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 faaf 	bl	80051fa <TIM_ITRx_SetConfig>
      break;
 8004c9c:	e00c      	b.n	8004cb8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	4610      	mov	r0, r2
 8004caa:	f000 faa6 	bl	80051fa <TIM_ITRx_SetConfig>
      break;
 8004cae:	e003      	b.n	8004cb8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8004cb4:	e000      	b.n	8004cb8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004cb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b083      	sub	sp, #12
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cda:	bf00      	nop
 8004cdc:	370c      	adds	r7, #12
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr

08004ce6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b083      	sub	sp, #12
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cee:	bf00      	nop
 8004cf0:	370c      	adds	r7, #12
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr

08004cfa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	b083      	sub	sp, #12
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d02:	bf00      	nop
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr

08004d0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b083      	sub	sp, #12
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d16:	bf00      	nop
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
	...

08004d24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a34      	ldr	r2, [pc, #208]	; (8004e08 <TIM_Base_SetConfig+0xe4>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d00f      	beq.n	8004d5c <TIM_Base_SetConfig+0x38>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d42:	d00b      	beq.n	8004d5c <TIM_Base_SetConfig+0x38>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a31      	ldr	r2, [pc, #196]	; (8004e0c <TIM_Base_SetConfig+0xe8>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d007      	beq.n	8004d5c <TIM_Base_SetConfig+0x38>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a30      	ldr	r2, [pc, #192]	; (8004e10 <TIM_Base_SetConfig+0xec>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d003      	beq.n	8004d5c <TIM_Base_SetConfig+0x38>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a2f      	ldr	r2, [pc, #188]	; (8004e14 <TIM_Base_SetConfig+0xf0>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d108      	bne.n	8004d6e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a25      	ldr	r2, [pc, #148]	; (8004e08 <TIM_Base_SetConfig+0xe4>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d01b      	beq.n	8004dae <TIM_Base_SetConfig+0x8a>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d7c:	d017      	beq.n	8004dae <TIM_Base_SetConfig+0x8a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a22      	ldr	r2, [pc, #136]	; (8004e0c <TIM_Base_SetConfig+0xe8>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d013      	beq.n	8004dae <TIM_Base_SetConfig+0x8a>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a21      	ldr	r2, [pc, #132]	; (8004e10 <TIM_Base_SetConfig+0xec>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d00f      	beq.n	8004dae <TIM_Base_SetConfig+0x8a>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a20      	ldr	r2, [pc, #128]	; (8004e14 <TIM_Base_SetConfig+0xf0>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d00b      	beq.n	8004dae <TIM_Base_SetConfig+0x8a>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a1f      	ldr	r2, [pc, #124]	; (8004e18 <TIM_Base_SetConfig+0xf4>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d007      	beq.n	8004dae <TIM_Base_SetConfig+0x8a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a1e      	ldr	r2, [pc, #120]	; (8004e1c <TIM_Base_SetConfig+0xf8>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d003      	beq.n	8004dae <TIM_Base_SetConfig+0x8a>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a1d      	ldr	r2, [pc, #116]	; (8004e20 <TIM_Base_SetConfig+0xfc>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d108      	bne.n	8004dc0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004db4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	689a      	ldr	r2, [r3, #8]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a08      	ldr	r2, [pc, #32]	; (8004e08 <TIM_Base_SetConfig+0xe4>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d103      	bne.n	8004df4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	691a      	ldr	r2, [r3, #16]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	615a      	str	r2, [r3, #20]
}
 8004dfa:	bf00      	nop
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	40010000 	.word	0x40010000
 8004e0c:	40000400 	.word	0x40000400
 8004e10:	40000800 	.word	0x40000800
 8004e14:	40000c00 	.word	0x40000c00
 8004e18:	40014000 	.word	0x40014000
 8004e1c:	40014400 	.word	0x40014400
 8004e20:	40014800 	.word	0x40014800

08004e24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b087      	sub	sp, #28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	f023 0201 	bic.w	r2, r3, #1
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f023 0303 	bic.w	r3, r3, #3
 8004e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f023 0302 	bic.w	r3, r3, #2
 8004e6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a1c      	ldr	r2, [pc, #112]	; (8004eec <TIM_OC1_SetConfig+0xc8>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d10c      	bne.n	8004e9a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	f023 0308 	bic.w	r3, r3, #8
 8004e86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f023 0304 	bic.w	r3, r3, #4
 8004e98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a13      	ldr	r2, [pc, #76]	; (8004eec <TIM_OC1_SetConfig+0xc8>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d111      	bne.n	8004ec6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ea8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	621a      	str	r2, [r3, #32]
}
 8004ee0:	bf00      	nop
 8004ee2:	371c      	adds	r7, #28
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr
 8004eec:	40010000 	.word	0x40010000

08004ef0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	f023 0210 	bic.w	r2, r3, #16
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	021b      	lsls	r3, r3, #8
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f023 0320 	bic.w	r3, r3, #32
 8004f3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	011b      	lsls	r3, r3, #4
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a1e      	ldr	r2, [pc, #120]	; (8004fc4 <TIM_OC2_SetConfig+0xd4>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d10d      	bne.n	8004f6c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	011b      	lsls	r3, r3, #4
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a15      	ldr	r2, [pc, #84]	; (8004fc4 <TIM_OC2_SetConfig+0xd4>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d113      	bne.n	8004f9c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	621a      	str	r2, [r3, #32]
}
 8004fb6:	bf00      	nop
 8004fb8:	371c      	adds	r7, #28
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	40010000 	.word	0x40010000

08004fc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b087      	sub	sp, #28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f023 0303 	bic.w	r3, r3, #3
 8004ffe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	4313      	orrs	r3, r2
 8005008:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005010:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	021b      	lsls	r3, r3, #8
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	4313      	orrs	r3, r2
 800501c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a1d      	ldr	r2, [pc, #116]	; (8005098 <TIM_OC3_SetConfig+0xd0>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d10d      	bne.n	8005042 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800502c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	021b      	lsls	r3, r3, #8
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	4313      	orrs	r3, r2
 8005038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a14      	ldr	r2, [pc, #80]	; (8005098 <TIM_OC3_SetConfig+0xd0>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d113      	bne.n	8005072 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005050:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005058:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	011b      	lsls	r3, r3, #4
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	4313      	orrs	r3, r2
 8005064:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	011b      	lsls	r3, r3, #4
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	4313      	orrs	r3, r2
 8005070:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	621a      	str	r2, [r3, #32]
}
 800508c:	bf00      	nop
 800508e:	371c      	adds	r7, #28
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr
 8005098:	40010000 	.word	0x40010000

0800509c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800509c:	b480      	push	{r7}
 800509e:	b087      	sub	sp, #28
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	021b      	lsls	r3, r3, #8
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	4313      	orrs	r3, r2
 80050de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	031b      	lsls	r3, r3, #12
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a10      	ldr	r2, [pc, #64]	; (8005138 <TIM_OC4_SetConfig+0x9c>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d109      	bne.n	8005110 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005102:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	019b      	lsls	r3, r3, #6
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	4313      	orrs	r3, r2
 800510e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	621a      	str	r2, [r3, #32]
}
 800512a:	bf00      	nop
 800512c:	371c      	adds	r7, #28
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	40010000 	.word	0x40010000

0800513c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	f023 0201 	bic.w	r2, r3, #1
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005166:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	011b      	lsls	r3, r3, #4
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	4313      	orrs	r3, r2
 8005170:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	f023 030a 	bic.w	r3, r3, #10
 8005178:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	4313      	orrs	r3, r2
 8005180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	621a      	str	r2, [r3, #32]
}
 800518e:	bf00      	nop
 8005190:	371c      	adds	r7, #28
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800519a:	b480      	push	{r7}
 800519c:	b087      	sub	sp, #28
 800519e:	af00      	add	r7, sp, #0
 80051a0:	60f8      	str	r0, [r7, #12]
 80051a2:	60b9      	str	r1, [r7, #8]
 80051a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	f023 0210 	bic.w	r2, r3, #16
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	031b      	lsls	r3, r3, #12
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	011b      	lsls	r3, r3, #4
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	4313      	orrs	r3, r2
 80051e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	621a      	str	r2, [r3, #32]
}
 80051ee:	bf00      	nop
 80051f0:	371c      	adds	r7, #28
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b085      	sub	sp, #20
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
 8005202:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005210:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005212:	683a      	ldr	r2, [r7, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4313      	orrs	r3, r2
 8005218:	f043 0307 	orr.w	r3, r3, #7
 800521c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	609a      	str	r2, [r3, #8]
}
 8005224:	bf00      	nop
 8005226:	3714      	adds	r7, #20
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005230:	b480      	push	{r7}
 8005232:	b087      	sub	sp, #28
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
 800523c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800524a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	021a      	lsls	r2, r3, #8
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	431a      	orrs	r2, r3
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	4313      	orrs	r3, r2
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	4313      	orrs	r3, r2
 800525c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	609a      	str	r2, [r3, #8]
}
 8005264:	bf00      	nop
 8005266:	371c      	adds	r7, #28
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	f003 031f 	and.w	r3, r3, #31
 8005282:	2201      	movs	r2, #1
 8005284:	fa02 f303 	lsl.w	r3, r2, r3
 8005288:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6a1a      	ldr	r2, [r3, #32]
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	43db      	mvns	r3, r3
 8005292:	401a      	ands	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6a1a      	ldr	r2, [r3, #32]
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	f003 031f 	and.w	r3, r3, #31
 80052a2:	6879      	ldr	r1, [r7, #4]
 80052a4:	fa01 f303 	lsl.w	r3, r1, r3
 80052a8:	431a      	orrs	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	621a      	str	r2, [r3, #32]
}
 80052ae:	bf00      	nop
 80052b0:	371c      	adds	r7, #28
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
	...

080052bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d101      	bne.n	80052d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052d0:	2302      	movs	r3, #2
 80052d2:	e050      	b.n	8005376 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2202      	movs	r2, #2
 80052e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	4313      	orrs	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a1c      	ldr	r2, [pc, #112]	; (8005384 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d018      	beq.n	800534a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005320:	d013      	beq.n	800534a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a18      	ldr	r2, [pc, #96]	; (8005388 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d00e      	beq.n	800534a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a16      	ldr	r2, [pc, #88]	; (800538c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d009      	beq.n	800534a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a15      	ldr	r2, [pc, #84]	; (8005390 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d004      	beq.n	800534a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a13      	ldr	r2, [pc, #76]	; (8005394 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d10c      	bne.n	8005364 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005350:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	4313      	orrs	r3, r2
 800535a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	40010000 	.word	0x40010000
 8005388:	40000400 	.word	0x40000400
 800538c:	40000800 	.word	0x40000800
 8005390:	40000c00 	.word	0x40000c00
 8005394:	40014000 	.word	0x40014000

08005398 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80053a2:	2300      	movs	r3, #0
 80053a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d101      	bne.n	80053b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80053b0:	2302      	movs	r3, #2
 80053b2:	e03d      	b.n	8005430 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	4313      	orrs	r3, r2
 8005400:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	4313      	orrs	r3, r2
 800540e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	69db      	ldr	r3, [r3, #28]
 800541a:	4313      	orrs	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3714      	adds	r7, #20
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d101      	bne.n	8005476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e03f      	b.n	80054f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d106      	bne.n	8005490 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7fd fe2e 	bl	80030ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2224      	movs	r2, #36	; 0x24
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68da      	ldr	r2, [r3, #12]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 f829 	bl	8005500 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	691a      	ldr	r2, [r3, #16]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	695a      	ldr	r2, [r3, #20]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68da      	ldr	r2, [r3, #12]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2220      	movs	r2, #32
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2220      	movs	r2, #32
 80054f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3708      	adds	r7, #8
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
	...

08005500 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005504:	b0c0      	sub	sp, #256	; 0x100
 8005506:	af00      	add	r7, sp, #0
 8005508:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800550c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800551c:	68d9      	ldr	r1, [r3, #12]
 800551e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	ea40 0301 	orr.w	r3, r0, r1
 8005528:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800552a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800552e:	689a      	ldr	r2, [r3, #8]
 8005530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	431a      	orrs	r2, r3
 8005538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	431a      	orrs	r2, r3
 8005540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005544:	69db      	ldr	r3, [r3, #28]
 8005546:	4313      	orrs	r3, r2
 8005548:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800554c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005558:	f021 010c 	bic.w	r1, r1, #12
 800555c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005566:	430b      	orrs	r3, r1
 8005568:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800556a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800557a:	6999      	ldr	r1, [r3, #24]
 800557c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	ea40 0301 	orr.w	r3, r0, r1
 8005586:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	4b8f      	ldr	r3, [pc, #572]	; (80057cc <UART_SetConfig+0x2cc>)
 8005590:	429a      	cmp	r2, r3
 8005592:	d005      	beq.n	80055a0 <UART_SetConfig+0xa0>
 8005594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	4b8d      	ldr	r3, [pc, #564]	; (80057d0 <UART_SetConfig+0x2d0>)
 800559c:	429a      	cmp	r2, r3
 800559e:	d104      	bne.n	80055aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055a0:	f7fe fe02 	bl	80041a8 <HAL_RCC_GetPCLK2Freq>
 80055a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80055a8:	e003      	b.n	80055b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055aa:	f7fe fde9 	bl	8004180 <HAL_RCC_GetPCLK1Freq>
 80055ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055bc:	f040 810c 	bne.w	80057d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055c4:	2200      	movs	r2, #0
 80055c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80055ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80055ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80055d2:	4622      	mov	r2, r4
 80055d4:	462b      	mov	r3, r5
 80055d6:	1891      	adds	r1, r2, r2
 80055d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80055da:	415b      	adcs	r3, r3
 80055dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80055e2:	4621      	mov	r1, r4
 80055e4:	eb12 0801 	adds.w	r8, r2, r1
 80055e8:	4629      	mov	r1, r5
 80055ea:	eb43 0901 	adc.w	r9, r3, r1
 80055ee:	f04f 0200 	mov.w	r2, #0
 80055f2:	f04f 0300 	mov.w	r3, #0
 80055f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005602:	4690      	mov	r8, r2
 8005604:	4699      	mov	r9, r3
 8005606:	4623      	mov	r3, r4
 8005608:	eb18 0303 	adds.w	r3, r8, r3
 800560c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005610:	462b      	mov	r3, r5
 8005612:	eb49 0303 	adc.w	r3, r9, r3
 8005616:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800561a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005626:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800562a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800562e:	460b      	mov	r3, r1
 8005630:	18db      	adds	r3, r3, r3
 8005632:	653b      	str	r3, [r7, #80]	; 0x50
 8005634:	4613      	mov	r3, r2
 8005636:	eb42 0303 	adc.w	r3, r2, r3
 800563a:	657b      	str	r3, [r7, #84]	; 0x54
 800563c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005640:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005644:	f7fb fa84 	bl	8000b50 <__aeabi_uldivmod>
 8005648:	4602      	mov	r2, r0
 800564a:	460b      	mov	r3, r1
 800564c:	4b61      	ldr	r3, [pc, #388]	; (80057d4 <UART_SetConfig+0x2d4>)
 800564e:	fba3 2302 	umull	r2, r3, r3, r2
 8005652:	095b      	lsrs	r3, r3, #5
 8005654:	011c      	lsls	r4, r3, #4
 8005656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800565a:	2200      	movs	r2, #0
 800565c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005660:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005664:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005668:	4642      	mov	r2, r8
 800566a:	464b      	mov	r3, r9
 800566c:	1891      	adds	r1, r2, r2
 800566e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005670:	415b      	adcs	r3, r3
 8005672:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005674:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005678:	4641      	mov	r1, r8
 800567a:	eb12 0a01 	adds.w	sl, r2, r1
 800567e:	4649      	mov	r1, r9
 8005680:	eb43 0b01 	adc.w	fp, r3, r1
 8005684:	f04f 0200 	mov.w	r2, #0
 8005688:	f04f 0300 	mov.w	r3, #0
 800568c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005690:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005694:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005698:	4692      	mov	sl, r2
 800569a:	469b      	mov	fp, r3
 800569c:	4643      	mov	r3, r8
 800569e:	eb1a 0303 	adds.w	r3, sl, r3
 80056a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056a6:	464b      	mov	r3, r9
 80056a8:	eb4b 0303 	adc.w	r3, fp, r3
 80056ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80056b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80056c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80056c4:	460b      	mov	r3, r1
 80056c6:	18db      	adds	r3, r3, r3
 80056c8:	643b      	str	r3, [r7, #64]	; 0x40
 80056ca:	4613      	mov	r3, r2
 80056cc:	eb42 0303 	adc.w	r3, r2, r3
 80056d0:	647b      	str	r3, [r7, #68]	; 0x44
 80056d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80056d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80056da:	f7fb fa39 	bl	8000b50 <__aeabi_uldivmod>
 80056de:	4602      	mov	r2, r0
 80056e0:	460b      	mov	r3, r1
 80056e2:	4611      	mov	r1, r2
 80056e4:	4b3b      	ldr	r3, [pc, #236]	; (80057d4 <UART_SetConfig+0x2d4>)
 80056e6:	fba3 2301 	umull	r2, r3, r3, r1
 80056ea:	095b      	lsrs	r3, r3, #5
 80056ec:	2264      	movs	r2, #100	; 0x64
 80056ee:	fb02 f303 	mul.w	r3, r2, r3
 80056f2:	1acb      	subs	r3, r1, r3
 80056f4:	00db      	lsls	r3, r3, #3
 80056f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80056fa:	4b36      	ldr	r3, [pc, #216]	; (80057d4 <UART_SetConfig+0x2d4>)
 80056fc:	fba3 2302 	umull	r2, r3, r3, r2
 8005700:	095b      	lsrs	r3, r3, #5
 8005702:	005b      	lsls	r3, r3, #1
 8005704:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005708:	441c      	add	r4, r3
 800570a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800570e:	2200      	movs	r2, #0
 8005710:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005714:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005718:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800571c:	4642      	mov	r2, r8
 800571e:	464b      	mov	r3, r9
 8005720:	1891      	adds	r1, r2, r2
 8005722:	63b9      	str	r1, [r7, #56]	; 0x38
 8005724:	415b      	adcs	r3, r3
 8005726:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005728:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800572c:	4641      	mov	r1, r8
 800572e:	1851      	adds	r1, r2, r1
 8005730:	6339      	str	r1, [r7, #48]	; 0x30
 8005732:	4649      	mov	r1, r9
 8005734:	414b      	adcs	r3, r1
 8005736:	637b      	str	r3, [r7, #52]	; 0x34
 8005738:	f04f 0200 	mov.w	r2, #0
 800573c:	f04f 0300 	mov.w	r3, #0
 8005740:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005744:	4659      	mov	r1, fp
 8005746:	00cb      	lsls	r3, r1, #3
 8005748:	4651      	mov	r1, sl
 800574a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800574e:	4651      	mov	r1, sl
 8005750:	00ca      	lsls	r2, r1, #3
 8005752:	4610      	mov	r0, r2
 8005754:	4619      	mov	r1, r3
 8005756:	4603      	mov	r3, r0
 8005758:	4642      	mov	r2, r8
 800575a:	189b      	adds	r3, r3, r2
 800575c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005760:	464b      	mov	r3, r9
 8005762:	460a      	mov	r2, r1
 8005764:	eb42 0303 	adc.w	r3, r2, r3
 8005768:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800576c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005778:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800577c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005780:	460b      	mov	r3, r1
 8005782:	18db      	adds	r3, r3, r3
 8005784:	62bb      	str	r3, [r7, #40]	; 0x28
 8005786:	4613      	mov	r3, r2
 8005788:	eb42 0303 	adc.w	r3, r2, r3
 800578c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800578e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005792:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005796:	f7fb f9db 	bl	8000b50 <__aeabi_uldivmod>
 800579a:	4602      	mov	r2, r0
 800579c:	460b      	mov	r3, r1
 800579e:	4b0d      	ldr	r3, [pc, #52]	; (80057d4 <UART_SetConfig+0x2d4>)
 80057a0:	fba3 1302 	umull	r1, r3, r3, r2
 80057a4:	095b      	lsrs	r3, r3, #5
 80057a6:	2164      	movs	r1, #100	; 0x64
 80057a8:	fb01 f303 	mul.w	r3, r1, r3
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	3332      	adds	r3, #50	; 0x32
 80057b2:	4a08      	ldr	r2, [pc, #32]	; (80057d4 <UART_SetConfig+0x2d4>)
 80057b4:	fba2 2303 	umull	r2, r3, r2, r3
 80057b8:	095b      	lsrs	r3, r3, #5
 80057ba:	f003 0207 	and.w	r2, r3, #7
 80057be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4422      	add	r2, r4
 80057c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80057c8:	e105      	b.n	80059d6 <UART_SetConfig+0x4d6>
 80057ca:	bf00      	nop
 80057cc:	40011000 	.word	0x40011000
 80057d0:	40011400 	.word	0x40011400
 80057d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057dc:	2200      	movs	r2, #0
 80057de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80057e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80057e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80057ea:	4642      	mov	r2, r8
 80057ec:	464b      	mov	r3, r9
 80057ee:	1891      	adds	r1, r2, r2
 80057f0:	6239      	str	r1, [r7, #32]
 80057f2:	415b      	adcs	r3, r3
 80057f4:	627b      	str	r3, [r7, #36]	; 0x24
 80057f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80057fa:	4641      	mov	r1, r8
 80057fc:	1854      	adds	r4, r2, r1
 80057fe:	4649      	mov	r1, r9
 8005800:	eb43 0501 	adc.w	r5, r3, r1
 8005804:	f04f 0200 	mov.w	r2, #0
 8005808:	f04f 0300 	mov.w	r3, #0
 800580c:	00eb      	lsls	r3, r5, #3
 800580e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005812:	00e2      	lsls	r2, r4, #3
 8005814:	4614      	mov	r4, r2
 8005816:	461d      	mov	r5, r3
 8005818:	4643      	mov	r3, r8
 800581a:	18e3      	adds	r3, r4, r3
 800581c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005820:	464b      	mov	r3, r9
 8005822:	eb45 0303 	adc.w	r3, r5, r3
 8005826:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800582a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005836:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800583a:	f04f 0200 	mov.w	r2, #0
 800583e:	f04f 0300 	mov.w	r3, #0
 8005842:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005846:	4629      	mov	r1, r5
 8005848:	008b      	lsls	r3, r1, #2
 800584a:	4621      	mov	r1, r4
 800584c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005850:	4621      	mov	r1, r4
 8005852:	008a      	lsls	r2, r1, #2
 8005854:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005858:	f7fb f97a 	bl	8000b50 <__aeabi_uldivmod>
 800585c:	4602      	mov	r2, r0
 800585e:	460b      	mov	r3, r1
 8005860:	4b60      	ldr	r3, [pc, #384]	; (80059e4 <UART_SetConfig+0x4e4>)
 8005862:	fba3 2302 	umull	r2, r3, r3, r2
 8005866:	095b      	lsrs	r3, r3, #5
 8005868:	011c      	lsls	r4, r3, #4
 800586a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800586e:	2200      	movs	r2, #0
 8005870:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005874:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005878:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800587c:	4642      	mov	r2, r8
 800587e:	464b      	mov	r3, r9
 8005880:	1891      	adds	r1, r2, r2
 8005882:	61b9      	str	r1, [r7, #24]
 8005884:	415b      	adcs	r3, r3
 8005886:	61fb      	str	r3, [r7, #28]
 8005888:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800588c:	4641      	mov	r1, r8
 800588e:	1851      	adds	r1, r2, r1
 8005890:	6139      	str	r1, [r7, #16]
 8005892:	4649      	mov	r1, r9
 8005894:	414b      	adcs	r3, r1
 8005896:	617b      	str	r3, [r7, #20]
 8005898:	f04f 0200 	mov.w	r2, #0
 800589c:	f04f 0300 	mov.w	r3, #0
 80058a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058a4:	4659      	mov	r1, fp
 80058a6:	00cb      	lsls	r3, r1, #3
 80058a8:	4651      	mov	r1, sl
 80058aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058ae:	4651      	mov	r1, sl
 80058b0:	00ca      	lsls	r2, r1, #3
 80058b2:	4610      	mov	r0, r2
 80058b4:	4619      	mov	r1, r3
 80058b6:	4603      	mov	r3, r0
 80058b8:	4642      	mov	r2, r8
 80058ba:	189b      	adds	r3, r3, r2
 80058bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80058c0:	464b      	mov	r3, r9
 80058c2:	460a      	mov	r2, r1
 80058c4:	eb42 0303 	adc.w	r3, r2, r3
 80058c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80058cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80058d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80058d8:	f04f 0200 	mov.w	r2, #0
 80058dc:	f04f 0300 	mov.w	r3, #0
 80058e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80058e4:	4649      	mov	r1, r9
 80058e6:	008b      	lsls	r3, r1, #2
 80058e8:	4641      	mov	r1, r8
 80058ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058ee:	4641      	mov	r1, r8
 80058f0:	008a      	lsls	r2, r1, #2
 80058f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80058f6:	f7fb f92b 	bl	8000b50 <__aeabi_uldivmod>
 80058fa:	4602      	mov	r2, r0
 80058fc:	460b      	mov	r3, r1
 80058fe:	4b39      	ldr	r3, [pc, #228]	; (80059e4 <UART_SetConfig+0x4e4>)
 8005900:	fba3 1302 	umull	r1, r3, r3, r2
 8005904:	095b      	lsrs	r3, r3, #5
 8005906:	2164      	movs	r1, #100	; 0x64
 8005908:	fb01 f303 	mul.w	r3, r1, r3
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	011b      	lsls	r3, r3, #4
 8005910:	3332      	adds	r3, #50	; 0x32
 8005912:	4a34      	ldr	r2, [pc, #208]	; (80059e4 <UART_SetConfig+0x4e4>)
 8005914:	fba2 2303 	umull	r2, r3, r2, r3
 8005918:	095b      	lsrs	r3, r3, #5
 800591a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800591e:	441c      	add	r4, r3
 8005920:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005924:	2200      	movs	r2, #0
 8005926:	673b      	str	r3, [r7, #112]	; 0x70
 8005928:	677a      	str	r2, [r7, #116]	; 0x74
 800592a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800592e:	4642      	mov	r2, r8
 8005930:	464b      	mov	r3, r9
 8005932:	1891      	adds	r1, r2, r2
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	415b      	adcs	r3, r3
 8005938:	60fb      	str	r3, [r7, #12]
 800593a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800593e:	4641      	mov	r1, r8
 8005940:	1851      	adds	r1, r2, r1
 8005942:	6039      	str	r1, [r7, #0]
 8005944:	4649      	mov	r1, r9
 8005946:	414b      	adcs	r3, r1
 8005948:	607b      	str	r3, [r7, #4]
 800594a:	f04f 0200 	mov.w	r2, #0
 800594e:	f04f 0300 	mov.w	r3, #0
 8005952:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005956:	4659      	mov	r1, fp
 8005958:	00cb      	lsls	r3, r1, #3
 800595a:	4651      	mov	r1, sl
 800595c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005960:	4651      	mov	r1, sl
 8005962:	00ca      	lsls	r2, r1, #3
 8005964:	4610      	mov	r0, r2
 8005966:	4619      	mov	r1, r3
 8005968:	4603      	mov	r3, r0
 800596a:	4642      	mov	r2, r8
 800596c:	189b      	adds	r3, r3, r2
 800596e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005970:	464b      	mov	r3, r9
 8005972:	460a      	mov	r2, r1
 8005974:	eb42 0303 	adc.w	r3, r2, r3
 8005978:	66fb      	str	r3, [r7, #108]	; 0x6c
 800597a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	663b      	str	r3, [r7, #96]	; 0x60
 8005984:	667a      	str	r2, [r7, #100]	; 0x64
 8005986:	f04f 0200 	mov.w	r2, #0
 800598a:	f04f 0300 	mov.w	r3, #0
 800598e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005992:	4649      	mov	r1, r9
 8005994:	008b      	lsls	r3, r1, #2
 8005996:	4641      	mov	r1, r8
 8005998:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800599c:	4641      	mov	r1, r8
 800599e:	008a      	lsls	r2, r1, #2
 80059a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80059a4:	f7fb f8d4 	bl	8000b50 <__aeabi_uldivmod>
 80059a8:	4602      	mov	r2, r0
 80059aa:	460b      	mov	r3, r1
 80059ac:	4b0d      	ldr	r3, [pc, #52]	; (80059e4 <UART_SetConfig+0x4e4>)
 80059ae:	fba3 1302 	umull	r1, r3, r3, r2
 80059b2:	095b      	lsrs	r3, r3, #5
 80059b4:	2164      	movs	r1, #100	; 0x64
 80059b6:	fb01 f303 	mul.w	r3, r1, r3
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	011b      	lsls	r3, r3, #4
 80059be:	3332      	adds	r3, #50	; 0x32
 80059c0:	4a08      	ldr	r2, [pc, #32]	; (80059e4 <UART_SetConfig+0x4e4>)
 80059c2:	fba2 2303 	umull	r2, r3, r2, r3
 80059c6:	095b      	lsrs	r3, r3, #5
 80059c8:	f003 020f 	and.w	r2, r3, #15
 80059cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4422      	add	r2, r4
 80059d4:	609a      	str	r2, [r3, #8]
}
 80059d6:	bf00      	nop
 80059d8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80059dc:	46bd      	mov	sp, r7
 80059de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059e2:	bf00      	nop
 80059e4:	51eb851f 	.word	0x51eb851f

080059e8 <__errno>:
 80059e8:	4b01      	ldr	r3, [pc, #4]	; (80059f0 <__errno+0x8>)
 80059ea:	6818      	ldr	r0, [r3, #0]
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	20000018 	.word	0x20000018

080059f4 <__libc_init_array>:
 80059f4:	b570      	push	{r4, r5, r6, lr}
 80059f6:	4d0d      	ldr	r5, [pc, #52]	; (8005a2c <__libc_init_array+0x38>)
 80059f8:	4c0d      	ldr	r4, [pc, #52]	; (8005a30 <__libc_init_array+0x3c>)
 80059fa:	1b64      	subs	r4, r4, r5
 80059fc:	10a4      	asrs	r4, r4, #2
 80059fe:	2600      	movs	r6, #0
 8005a00:	42a6      	cmp	r6, r4
 8005a02:	d109      	bne.n	8005a18 <__libc_init_array+0x24>
 8005a04:	4d0b      	ldr	r5, [pc, #44]	; (8005a34 <__libc_init_array+0x40>)
 8005a06:	4c0c      	ldr	r4, [pc, #48]	; (8005a38 <__libc_init_array+0x44>)
 8005a08:	f000 ff3c 	bl	8006884 <_init>
 8005a0c:	1b64      	subs	r4, r4, r5
 8005a0e:	10a4      	asrs	r4, r4, #2
 8005a10:	2600      	movs	r6, #0
 8005a12:	42a6      	cmp	r6, r4
 8005a14:	d105      	bne.n	8005a22 <__libc_init_array+0x2e>
 8005a16:	bd70      	pop	{r4, r5, r6, pc}
 8005a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a1c:	4798      	blx	r3
 8005a1e:	3601      	adds	r6, #1
 8005a20:	e7ee      	b.n	8005a00 <__libc_init_array+0xc>
 8005a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a26:	4798      	blx	r3
 8005a28:	3601      	adds	r6, #1
 8005a2a:	e7f2      	b.n	8005a12 <__libc_init_array+0x1e>
 8005a2c:	08006918 	.word	0x08006918
 8005a30:	08006918 	.word	0x08006918
 8005a34:	08006918 	.word	0x08006918
 8005a38:	0800691c 	.word	0x0800691c

08005a3c <memset>:
 8005a3c:	4402      	add	r2, r0
 8005a3e:	4603      	mov	r3, r0
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d100      	bne.n	8005a46 <memset+0xa>
 8005a44:	4770      	bx	lr
 8005a46:	f803 1b01 	strb.w	r1, [r3], #1
 8005a4a:	e7f9      	b.n	8005a40 <memset+0x4>

08005a4c <pow>:
 8005a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a4e:	ed2d 8b02 	vpush	{d8}
 8005a52:	eeb0 8a40 	vmov.f32	s16, s0
 8005a56:	eef0 8a60 	vmov.f32	s17, s1
 8005a5a:	ec55 4b11 	vmov	r4, r5, d1
 8005a5e:	f000 f867 	bl	8005b30 <__ieee754_pow>
 8005a62:	4622      	mov	r2, r4
 8005a64:	462b      	mov	r3, r5
 8005a66:	4620      	mov	r0, r4
 8005a68:	4629      	mov	r1, r5
 8005a6a:	ec57 6b10 	vmov	r6, r7, d0
 8005a6e:	f7fb f809 	bl	8000a84 <__aeabi_dcmpun>
 8005a72:	2800      	cmp	r0, #0
 8005a74:	d13b      	bne.n	8005aee <pow+0xa2>
 8005a76:	ec51 0b18 	vmov	r0, r1, d8
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	f7fa ffcf 	bl	8000a20 <__aeabi_dcmpeq>
 8005a82:	b1b8      	cbz	r0, 8005ab4 <pow+0x68>
 8005a84:	2200      	movs	r2, #0
 8005a86:	2300      	movs	r3, #0
 8005a88:	4620      	mov	r0, r4
 8005a8a:	4629      	mov	r1, r5
 8005a8c:	f7fa ffc8 	bl	8000a20 <__aeabi_dcmpeq>
 8005a90:	2800      	cmp	r0, #0
 8005a92:	d146      	bne.n	8005b22 <pow+0xd6>
 8005a94:	ec45 4b10 	vmov	d0, r4, r5
 8005a98:	f000 fe63 	bl	8006762 <finite>
 8005a9c:	b338      	cbz	r0, 8005aee <pow+0xa2>
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	4620      	mov	r0, r4
 8005aa4:	4629      	mov	r1, r5
 8005aa6:	f7fa ffc5 	bl	8000a34 <__aeabi_dcmplt>
 8005aaa:	b300      	cbz	r0, 8005aee <pow+0xa2>
 8005aac:	f7ff ff9c 	bl	80059e8 <__errno>
 8005ab0:	2322      	movs	r3, #34	; 0x22
 8005ab2:	e01b      	b.n	8005aec <pow+0xa0>
 8005ab4:	ec47 6b10 	vmov	d0, r6, r7
 8005ab8:	f000 fe53 	bl	8006762 <finite>
 8005abc:	b9e0      	cbnz	r0, 8005af8 <pow+0xac>
 8005abe:	eeb0 0a48 	vmov.f32	s0, s16
 8005ac2:	eef0 0a68 	vmov.f32	s1, s17
 8005ac6:	f000 fe4c 	bl	8006762 <finite>
 8005aca:	b1a8      	cbz	r0, 8005af8 <pow+0xac>
 8005acc:	ec45 4b10 	vmov	d0, r4, r5
 8005ad0:	f000 fe47 	bl	8006762 <finite>
 8005ad4:	b180      	cbz	r0, 8005af8 <pow+0xac>
 8005ad6:	4632      	mov	r2, r6
 8005ad8:	463b      	mov	r3, r7
 8005ada:	4630      	mov	r0, r6
 8005adc:	4639      	mov	r1, r7
 8005ade:	f7fa ffd1 	bl	8000a84 <__aeabi_dcmpun>
 8005ae2:	2800      	cmp	r0, #0
 8005ae4:	d0e2      	beq.n	8005aac <pow+0x60>
 8005ae6:	f7ff ff7f 	bl	80059e8 <__errno>
 8005aea:	2321      	movs	r3, #33	; 0x21
 8005aec:	6003      	str	r3, [r0, #0]
 8005aee:	ecbd 8b02 	vpop	{d8}
 8005af2:	ec47 6b10 	vmov	d0, r6, r7
 8005af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005af8:	2200      	movs	r2, #0
 8005afa:	2300      	movs	r3, #0
 8005afc:	4630      	mov	r0, r6
 8005afe:	4639      	mov	r1, r7
 8005b00:	f7fa ff8e 	bl	8000a20 <__aeabi_dcmpeq>
 8005b04:	2800      	cmp	r0, #0
 8005b06:	d0f2      	beq.n	8005aee <pow+0xa2>
 8005b08:	eeb0 0a48 	vmov.f32	s0, s16
 8005b0c:	eef0 0a68 	vmov.f32	s1, s17
 8005b10:	f000 fe27 	bl	8006762 <finite>
 8005b14:	2800      	cmp	r0, #0
 8005b16:	d0ea      	beq.n	8005aee <pow+0xa2>
 8005b18:	ec45 4b10 	vmov	d0, r4, r5
 8005b1c:	f000 fe21 	bl	8006762 <finite>
 8005b20:	e7c3      	b.n	8005aaa <pow+0x5e>
 8005b22:	4f01      	ldr	r7, [pc, #4]	; (8005b28 <pow+0xdc>)
 8005b24:	2600      	movs	r6, #0
 8005b26:	e7e2      	b.n	8005aee <pow+0xa2>
 8005b28:	3ff00000 	.word	0x3ff00000
 8005b2c:	00000000 	.word	0x00000000

08005b30 <__ieee754_pow>:
 8005b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b34:	ed2d 8b06 	vpush	{d8-d10}
 8005b38:	b089      	sub	sp, #36	; 0x24
 8005b3a:	ed8d 1b00 	vstr	d1, [sp]
 8005b3e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8005b42:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8005b46:	ea58 0102 	orrs.w	r1, r8, r2
 8005b4a:	ec57 6b10 	vmov	r6, r7, d0
 8005b4e:	d115      	bne.n	8005b7c <__ieee754_pow+0x4c>
 8005b50:	19b3      	adds	r3, r6, r6
 8005b52:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8005b56:	4152      	adcs	r2, r2
 8005b58:	4299      	cmp	r1, r3
 8005b5a:	4b89      	ldr	r3, [pc, #548]	; (8005d80 <__ieee754_pow+0x250>)
 8005b5c:	4193      	sbcs	r3, r2
 8005b5e:	f080 84d2 	bcs.w	8006506 <__ieee754_pow+0x9d6>
 8005b62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b66:	4630      	mov	r0, r6
 8005b68:	4639      	mov	r1, r7
 8005b6a:	f7fa fb3b 	bl	80001e4 <__adddf3>
 8005b6e:	ec41 0b10 	vmov	d0, r0, r1
 8005b72:	b009      	add	sp, #36	; 0x24
 8005b74:	ecbd 8b06 	vpop	{d8-d10}
 8005b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b7c:	4b81      	ldr	r3, [pc, #516]	; (8005d84 <__ieee754_pow+0x254>)
 8005b7e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8005b82:	429c      	cmp	r4, r3
 8005b84:	ee10 aa10 	vmov	sl, s0
 8005b88:	463d      	mov	r5, r7
 8005b8a:	dc06      	bgt.n	8005b9a <__ieee754_pow+0x6a>
 8005b8c:	d101      	bne.n	8005b92 <__ieee754_pow+0x62>
 8005b8e:	2e00      	cmp	r6, #0
 8005b90:	d1e7      	bne.n	8005b62 <__ieee754_pow+0x32>
 8005b92:	4598      	cmp	r8, r3
 8005b94:	dc01      	bgt.n	8005b9a <__ieee754_pow+0x6a>
 8005b96:	d10f      	bne.n	8005bb8 <__ieee754_pow+0x88>
 8005b98:	b172      	cbz	r2, 8005bb8 <__ieee754_pow+0x88>
 8005b9a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8005b9e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8005ba2:	ea55 050a 	orrs.w	r5, r5, sl
 8005ba6:	d1dc      	bne.n	8005b62 <__ieee754_pow+0x32>
 8005ba8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005bac:	18db      	adds	r3, r3, r3
 8005bae:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8005bb2:	4152      	adcs	r2, r2
 8005bb4:	429d      	cmp	r5, r3
 8005bb6:	e7d0      	b.n	8005b5a <__ieee754_pow+0x2a>
 8005bb8:	2d00      	cmp	r5, #0
 8005bba:	da3b      	bge.n	8005c34 <__ieee754_pow+0x104>
 8005bbc:	4b72      	ldr	r3, [pc, #456]	; (8005d88 <__ieee754_pow+0x258>)
 8005bbe:	4598      	cmp	r8, r3
 8005bc0:	dc51      	bgt.n	8005c66 <__ieee754_pow+0x136>
 8005bc2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005bc6:	4598      	cmp	r8, r3
 8005bc8:	f340 84ac 	ble.w	8006524 <__ieee754_pow+0x9f4>
 8005bcc:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005bd0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005bd4:	2b14      	cmp	r3, #20
 8005bd6:	dd0f      	ble.n	8005bf8 <__ieee754_pow+0xc8>
 8005bd8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005bdc:	fa22 f103 	lsr.w	r1, r2, r3
 8005be0:	fa01 f303 	lsl.w	r3, r1, r3
 8005be4:	4293      	cmp	r3, r2
 8005be6:	f040 849d 	bne.w	8006524 <__ieee754_pow+0x9f4>
 8005bea:	f001 0101 	and.w	r1, r1, #1
 8005bee:	f1c1 0302 	rsb	r3, r1, #2
 8005bf2:	9304      	str	r3, [sp, #16]
 8005bf4:	b182      	cbz	r2, 8005c18 <__ieee754_pow+0xe8>
 8005bf6:	e05f      	b.n	8005cb8 <__ieee754_pow+0x188>
 8005bf8:	2a00      	cmp	r2, #0
 8005bfa:	d15b      	bne.n	8005cb4 <__ieee754_pow+0x184>
 8005bfc:	f1c3 0314 	rsb	r3, r3, #20
 8005c00:	fa48 f103 	asr.w	r1, r8, r3
 8005c04:	fa01 f303 	lsl.w	r3, r1, r3
 8005c08:	4543      	cmp	r3, r8
 8005c0a:	f040 8488 	bne.w	800651e <__ieee754_pow+0x9ee>
 8005c0e:	f001 0101 	and.w	r1, r1, #1
 8005c12:	f1c1 0302 	rsb	r3, r1, #2
 8005c16:	9304      	str	r3, [sp, #16]
 8005c18:	4b5c      	ldr	r3, [pc, #368]	; (8005d8c <__ieee754_pow+0x25c>)
 8005c1a:	4598      	cmp	r8, r3
 8005c1c:	d132      	bne.n	8005c84 <__ieee754_pow+0x154>
 8005c1e:	f1b9 0f00 	cmp.w	r9, #0
 8005c22:	f280 8478 	bge.w	8006516 <__ieee754_pow+0x9e6>
 8005c26:	4959      	ldr	r1, [pc, #356]	; (8005d8c <__ieee754_pow+0x25c>)
 8005c28:	4632      	mov	r2, r6
 8005c2a:	463b      	mov	r3, r7
 8005c2c:	2000      	movs	r0, #0
 8005c2e:	f7fa fdb9 	bl	80007a4 <__aeabi_ddiv>
 8005c32:	e79c      	b.n	8005b6e <__ieee754_pow+0x3e>
 8005c34:	2300      	movs	r3, #0
 8005c36:	9304      	str	r3, [sp, #16]
 8005c38:	2a00      	cmp	r2, #0
 8005c3a:	d13d      	bne.n	8005cb8 <__ieee754_pow+0x188>
 8005c3c:	4b51      	ldr	r3, [pc, #324]	; (8005d84 <__ieee754_pow+0x254>)
 8005c3e:	4598      	cmp	r8, r3
 8005c40:	d1ea      	bne.n	8005c18 <__ieee754_pow+0xe8>
 8005c42:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005c46:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005c4a:	ea53 030a 	orrs.w	r3, r3, sl
 8005c4e:	f000 845a 	beq.w	8006506 <__ieee754_pow+0x9d6>
 8005c52:	4b4f      	ldr	r3, [pc, #316]	; (8005d90 <__ieee754_pow+0x260>)
 8005c54:	429c      	cmp	r4, r3
 8005c56:	dd08      	ble.n	8005c6a <__ieee754_pow+0x13a>
 8005c58:	f1b9 0f00 	cmp.w	r9, #0
 8005c5c:	f2c0 8457 	blt.w	800650e <__ieee754_pow+0x9de>
 8005c60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c64:	e783      	b.n	8005b6e <__ieee754_pow+0x3e>
 8005c66:	2302      	movs	r3, #2
 8005c68:	e7e5      	b.n	8005c36 <__ieee754_pow+0x106>
 8005c6a:	f1b9 0f00 	cmp.w	r9, #0
 8005c6e:	f04f 0000 	mov.w	r0, #0
 8005c72:	f04f 0100 	mov.w	r1, #0
 8005c76:	f6bf af7a 	bge.w	8005b6e <__ieee754_pow+0x3e>
 8005c7a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8005c7e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005c82:	e774      	b.n	8005b6e <__ieee754_pow+0x3e>
 8005c84:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8005c88:	d106      	bne.n	8005c98 <__ieee754_pow+0x168>
 8005c8a:	4632      	mov	r2, r6
 8005c8c:	463b      	mov	r3, r7
 8005c8e:	4630      	mov	r0, r6
 8005c90:	4639      	mov	r1, r7
 8005c92:	f7fa fc5d 	bl	8000550 <__aeabi_dmul>
 8005c96:	e76a      	b.n	8005b6e <__ieee754_pow+0x3e>
 8005c98:	4b3e      	ldr	r3, [pc, #248]	; (8005d94 <__ieee754_pow+0x264>)
 8005c9a:	4599      	cmp	r9, r3
 8005c9c:	d10c      	bne.n	8005cb8 <__ieee754_pow+0x188>
 8005c9e:	2d00      	cmp	r5, #0
 8005ca0:	db0a      	blt.n	8005cb8 <__ieee754_pow+0x188>
 8005ca2:	ec47 6b10 	vmov	d0, r6, r7
 8005ca6:	b009      	add	sp, #36	; 0x24
 8005ca8:	ecbd 8b06 	vpop	{d8-d10}
 8005cac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb0:	f000 bc6c 	b.w	800658c <__ieee754_sqrt>
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	9304      	str	r3, [sp, #16]
 8005cb8:	ec47 6b10 	vmov	d0, r6, r7
 8005cbc:	f000 fd48 	bl	8006750 <fabs>
 8005cc0:	ec51 0b10 	vmov	r0, r1, d0
 8005cc4:	f1ba 0f00 	cmp.w	sl, #0
 8005cc8:	d129      	bne.n	8005d1e <__ieee754_pow+0x1ee>
 8005cca:	b124      	cbz	r4, 8005cd6 <__ieee754_pow+0x1a6>
 8005ccc:	4b2f      	ldr	r3, [pc, #188]	; (8005d8c <__ieee754_pow+0x25c>)
 8005cce:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d123      	bne.n	8005d1e <__ieee754_pow+0x1ee>
 8005cd6:	f1b9 0f00 	cmp.w	r9, #0
 8005cda:	da05      	bge.n	8005ce8 <__ieee754_pow+0x1b8>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	460b      	mov	r3, r1
 8005ce0:	2000      	movs	r0, #0
 8005ce2:	492a      	ldr	r1, [pc, #168]	; (8005d8c <__ieee754_pow+0x25c>)
 8005ce4:	f7fa fd5e 	bl	80007a4 <__aeabi_ddiv>
 8005ce8:	2d00      	cmp	r5, #0
 8005cea:	f6bf af40 	bge.w	8005b6e <__ieee754_pow+0x3e>
 8005cee:	9b04      	ldr	r3, [sp, #16]
 8005cf0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005cf4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005cf8:	4323      	orrs	r3, r4
 8005cfa:	d108      	bne.n	8005d0e <__ieee754_pow+0x1de>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	460b      	mov	r3, r1
 8005d00:	4610      	mov	r0, r2
 8005d02:	4619      	mov	r1, r3
 8005d04:	f7fa fa6c 	bl	80001e0 <__aeabi_dsub>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	e78f      	b.n	8005c2e <__ieee754_pow+0xfe>
 8005d0e:	9b04      	ldr	r3, [sp, #16]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	f47f af2c 	bne.w	8005b6e <__ieee754_pow+0x3e>
 8005d16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	e727      	b.n	8005b6e <__ieee754_pow+0x3e>
 8005d1e:	0feb      	lsrs	r3, r5, #31
 8005d20:	3b01      	subs	r3, #1
 8005d22:	9306      	str	r3, [sp, #24]
 8005d24:	9a06      	ldr	r2, [sp, #24]
 8005d26:	9b04      	ldr	r3, [sp, #16]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	d102      	bne.n	8005d32 <__ieee754_pow+0x202>
 8005d2c:	4632      	mov	r2, r6
 8005d2e:	463b      	mov	r3, r7
 8005d30:	e7e6      	b.n	8005d00 <__ieee754_pow+0x1d0>
 8005d32:	4b19      	ldr	r3, [pc, #100]	; (8005d98 <__ieee754_pow+0x268>)
 8005d34:	4598      	cmp	r8, r3
 8005d36:	f340 80fb 	ble.w	8005f30 <__ieee754_pow+0x400>
 8005d3a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005d3e:	4598      	cmp	r8, r3
 8005d40:	4b13      	ldr	r3, [pc, #76]	; (8005d90 <__ieee754_pow+0x260>)
 8005d42:	dd0c      	ble.n	8005d5e <__ieee754_pow+0x22e>
 8005d44:	429c      	cmp	r4, r3
 8005d46:	dc0f      	bgt.n	8005d68 <__ieee754_pow+0x238>
 8005d48:	f1b9 0f00 	cmp.w	r9, #0
 8005d4c:	da0f      	bge.n	8005d6e <__ieee754_pow+0x23e>
 8005d4e:	2000      	movs	r0, #0
 8005d50:	b009      	add	sp, #36	; 0x24
 8005d52:	ecbd 8b06 	vpop	{d8-d10}
 8005d56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d5a:	f000 bcf0 	b.w	800673e <__math_oflow>
 8005d5e:	429c      	cmp	r4, r3
 8005d60:	dbf2      	blt.n	8005d48 <__ieee754_pow+0x218>
 8005d62:	4b0a      	ldr	r3, [pc, #40]	; (8005d8c <__ieee754_pow+0x25c>)
 8005d64:	429c      	cmp	r4, r3
 8005d66:	dd19      	ble.n	8005d9c <__ieee754_pow+0x26c>
 8005d68:	f1b9 0f00 	cmp.w	r9, #0
 8005d6c:	dcef      	bgt.n	8005d4e <__ieee754_pow+0x21e>
 8005d6e:	2000      	movs	r0, #0
 8005d70:	b009      	add	sp, #36	; 0x24
 8005d72:	ecbd 8b06 	vpop	{d8-d10}
 8005d76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d7a:	f000 bcd7 	b.w	800672c <__math_uflow>
 8005d7e:	bf00      	nop
 8005d80:	fff00000 	.word	0xfff00000
 8005d84:	7ff00000 	.word	0x7ff00000
 8005d88:	433fffff 	.word	0x433fffff
 8005d8c:	3ff00000 	.word	0x3ff00000
 8005d90:	3fefffff 	.word	0x3fefffff
 8005d94:	3fe00000 	.word	0x3fe00000
 8005d98:	41e00000 	.word	0x41e00000
 8005d9c:	4b60      	ldr	r3, [pc, #384]	; (8005f20 <__ieee754_pow+0x3f0>)
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f7fa fa1e 	bl	80001e0 <__aeabi_dsub>
 8005da4:	a354      	add	r3, pc, #336	; (adr r3, 8005ef8 <__ieee754_pow+0x3c8>)
 8005da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005daa:	4604      	mov	r4, r0
 8005dac:	460d      	mov	r5, r1
 8005dae:	f7fa fbcf 	bl	8000550 <__aeabi_dmul>
 8005db2:	a353      	add	r3, pc, #332	; (adr r3, 8005f00 <__ieee754_pow+0x3d0>)
 8005db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db8:	4606      	mov	r6, r0
 8005dba:	460f      	mov	r7, r1
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	4629      	mov	r1, r5
 8005dc0:	f7fa fbc6 	bl	8000550 <__aeabi_dmul>
 8005dc4:	4b57      	ldr	r3, [pc, #348]	; (8005f24 <__ieee754_pow+0x3f4>)
 8005dc6:	4682      	mov	sl, r0
 8005dc8:	468b      	mov	fp, r1
 8005dca:	2200      	movs	r2, #0
 8005dcc:	4620      	mov	r0, r4
 8005dce:	4629      	mov	r1, r5
 8005dd0:	f7fa fbbe 	bl	8000550 <__aeabi_dmul>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	a14b      	add	r1, pc, #300	; (adr r1, 8005f08 <__ieee754_pow+0x3d8>)
 8005dda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005dde:	f7fa f9ff 	bl	80001e0 <__aeabi_dsub>
 8005de2:	4622      	mov	r2, r4
 8005de4:	462b      	mov	r3, r5
 8005de6:	f7fa fbb3 	bl	8000550 <__aeabi_dmul>
 8005dea:	4602      	mov	r2, r0
 8005dec:	460b      	mov	r3, r1
 8005dee:	2000      	movs	r0, #0
 8005df0:	494d      	ldr	r1, [pc, #308]	; (8005f28 <__ieee754_pow+0x3f8>)
 8005df2:	f7fa f9f5 	bl	80001e0 <__aeabi_dsub>
 8005df6:	4622      	mov	r2, r4
 8005df8:	4680      	mov	r8, r0
 8005dfa:	4689      	mov	r9, r1
 8005dfc:	462b      	mov	r3, r5
 8005dfe:	4620      	mov	r0, r4
 8005e00:	4629      	mov	r1, r5
 8005e02:	f7fa fba5 	bl	8000550 <__aeabi_dmul>
 8005e06:	4602      	mov	r2, r0
 8005e08:	460b      	mov	r3, r1
 8005e0a:	4640      	mov	r0, r8
 8005e0c:	4649      	mov	r1, r9
 8005e0e:	f7fa fb9f 	bl	8000550 <__aeabi_dmul>
 8005e12:	a33f      	add	r3, pc, #252	; (adr r3, 8005f10 <__ieee754_pow+0x3e0>)
 8005e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e18:	f7fa fb9a 	bl	8000550 <__aeabi_dmul>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	460b      	mov	r3, r1
 8005e20:	4650      	mov	r0, sl
 8005e22:	4659      	mov	r1, fp
 8005e24:	f7fa f9dc 	bl	80001e0 <__aeabi_dsub>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	4680      	mov	r8, r0
 8005e2e:	4689      	mov	r9, r1
 8005e30:	4630      	mov	r0, r6
 8005e32:	4639      	mov	r1, r7
 8005e34:	f7fa f9d6 	bl	80001e4 <__adddf3>
 8005e38:	2000      	movs	r0, #0
 8005e3a:	4632      	mov	r2, r6
 8005e3c:	463b      	mov	r3, r7
 8005e3e:	4604      	mov	r4, r0
 8005e40:	460d      	mov	r5, r1
 8005e42:	f7fa f9cd 	bl	80001e0 <__aeabi_dsub>
 8005e46:	4602      	mov	r2, r0
 8005e48:	460b      	mov	r3, r1
 8005e4a:	4640      	mov	r0, r8
 8005e4c:	4649      	mov	r1, r9
 8005e4e:	f7fa f9c7 	bl	80001e0 <__aeabi_dsub>
 8005e52:	9b04      	ldr	r3, [sp, #16]
 8005e54:	9a06      	ldr	r2, [sp, #24]
 8005e56:	3b01      	subs	r3, #1
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	4682      	mov	sl, r0
 8005e5c:	468b      	mov	fp, r1
 8005e5e:	f040 81e7 	bne.w	8006230 <__ieee754_pow+0x700>
 8005e62:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005f18 <__ieee754_pow+0x3e8>
 8005e66:	eeb0 8a47 	vmov.f32	s16, s14
 8005e6a:	eef0 8a67 	vmov.f32	s17, s15
 8005e6e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005e72:	2600      	movs	r6, #0
 8005e74:	4632      	mov	r2, r6
 8005e76:	463b      	mov	r3, r7
 8005e78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e7c:	f7fa f9b0 	bl	80001e0 <__aeabi_dsub>
 8005e80:	4622      	mov	r2, r4
 8005e82:	462b      	mov	r3, r5
 8005e84:	f7fa fb64 	bl	8000550 <__aeabi_dmul>
 8005e88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e8c:	4680      	mov	r8, r0
 8005e8e:	4689      	mov	r9, r1
 8005e90:	4650      	mov	r0, sl
 8005e92:	4659      	mov	r1, fp
 8005e94:	f7fa fb5c 	bl	8000550 <__aeabi_dmul>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	4640      	mov	r0, r8
 8005e9e:	4649      	mov	r1, r9
 8005ea0:	f7fa f9a0 	bl	80001e4 <__adddf3>
 8005ea4:	4632      	mov	r2, r6
 8005ea6:	463b      	mov	r3, r7
 8005ea8:	4680      	mov	r8, r0
 8005eaa:	4689      	mov	r9, r1
 8005eac:	4620      	mov	r0, r4
 8005eae:	4629      	mov	r1, r5
 8005eb0:	f7fa fb4e 	bl	8000550 <__aeabi_dmul>
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	4604      	mov	r4, r0
 8005eb8:	460d      	mov	r5, r1
 8005eba:	4602      	mov	r2, r0
 8005ebc:	4649      	mov	r1, r9
 8005ebe:	4640      	mov	r0, r8
 8005ec0:	f7fa f990 	bl	80001e4 <__adddf3>
 8005ec4:	4b19      	ldr	r3, [pc, #100]	; (8005f2c <__ieee754_pow+0x3fc>)
 8005ec6:	4299      	cmp	r1, r3
 8005ec8:	ec45 4b19 	vmov	d9, r4, r5
 8005ecc:	4606      	mov	r6, r0
 8005ece:	460f      	mov	r7, r1
 8005ed0:	468b      	mov	fp, r1
 8005ed2:	f340 82f1 	ble.w	80064b8 <__ieee754_pow+0x988>
 8005ed6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005eda:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005ede:	4303      	orrs	r3, r0
 8005ee0:	f000 81e4 	beq.w	80062ac <__ieee754_pow+0x77c>
 8005ee4:	ec51 0b18 	vmov	r0, r1, d8
 8005ee8:	2200      	movs	r2, #0
 8005eea:	2300      	movs	r3, #0
 8005eec:	f7fa fda2 	bl	8000a34 <__aeabi_dcmplt>
 8005ef0:	3800      	subs	r0, #0
 8005ef2:	bf18      	it	ne
 8005ef4:	2001      	movne	r0, #1
 8005ef6:	e72b      	b.n	8005d50 <__ieee754_pow+0x220>
 8005ef8:	60000000 	.word	0x60000000
 8005efc:	3ff71547 	.word	0x3ff71547
 8005f00:	f85ddf44 	.word	0xf85ddf44
 8005f04:	3e54ae0b 	.word	0x3e54ae0b
 8005f08:	55555555 	.word	0x55555555
 8005f0c:	3fd55555 	.word	0x3fd55555
 8005f10:	652b82fe 	.word	0x652b82fe
 8005f14:	3ff71547 	.word	0x3ff71547
 8005f18:	00000000 	.word	0x00000000
 8005f1c:	bff00000 	.word	0xbff00000
 8005f20:	3ff00000 	.word	0x3ff00000
 8005f24:	3fd00000 	.word	0x3fd00000
 8005f28:	3fe00000 	.word	0x3fe00000
 8005f2c:	408fffff 	.word	0x408fffff
 8005f30:	4bd5      	ldr	r3, [pc, #852]	; (8006288 <__ieee754_pow+0x758>)
 8005f32:	402b      	ands	r3, r5
 8005f34:	2200      	movs	r2, #0
 8005f36:	b92b      	cbnz	r3, 8005f44 <__ieee754_pow+0x414>
 8005f38:	4bd4      	ldr	r3, [pc, #848]	; (800628c <__ieee754_pow+0x75c>)
 8005f3a:	f7fa fb09 	bl	8000550 <__aeabi_dmul>
 8005f3e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005f42:	460c      	mov	r4, r1
 8005f44:	1523      	asrs	r3, r4, #20
 8005f46:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005f4a:	4413      	add	r3, r2
 8005f4c:	9305      	str	r3, [sp, #20]
 8005f4e:	4bd0      	ldr	r3, [pc, #832]	; (8006290 <__ieee754_pow+0x760>)
 8005f50:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005f54:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005f58:	429c      	cmp	r4, r3
 8005f5a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005f5e:	dd08      	ble.n	8005f72 <__ieee754_pow+0x442>
 8005f60:	4bcc      	ldr	r3, [pc, #816]	; (8006294 <__ieee754_pow+0x764>)
 8005f62:	429c      	cmp	r4, r3
 8005f64:	f340 8162 	ble.w	800622c <__ieee754_pow+0x6fc>
 8005f68:	9b05      	ldr	r3, [sp, #20]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	9305      	str	r3, [sp, #20]
 8005f6e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005f72:	2400      	movs	r4, #0
 8005f74:	00e3      	lsls	r3, r4, #3
 8005f76:	9307      	str	r3, [sp, #28]
 8005f78:	4bc7      	ldr	r3, [pc, #796]	; (8006298 <__ieee754_pow+0x768>)
 8005f7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005f7e:	ed93 7b00 	vldr	d7, [r3]
 8005f82:	4629      	mov	r1, r5
 8005f84:	ec53 2b17 	vmov	r2, r3, d7
 8005f88:	eeb0 9a47 	vmov.f32	s18, s14
 8005f8c:	eef0 9a67 	vmov.f32	s19, s15
 8005f90:	4682      	mov	sl, r0
 8005f92:	f7fa f925 	bl	80001e0 <__aeabi_dsub>
 8005f96:	4652      	mov	r2, sl
 8005f98:	4606      	mov	r6, r0
 8005f9a:	460f      	mov	r7, r1
 8005f9c:	462b      	mov	r3, r5
 8005f9e:	ec51 0b19 	vmov	r0, r1, d9
 8005fa2:	f7fa f91f 	bl	80001e4 <__adddf3>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	460b      	mov	r3, r1
 8005faa:	2000      	movs	r0, #0
 8005fac:	49bb      	ldr	r1, [pc, #748]	; (800629c <__ieee754_pow+0x76c>)
 8005fae:	f7fa fbf9 	bl	80007a4 <__aeabi_ddiv>
 8005fb2:	ec41 0b1a 	vmov	d10, r0, r1
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	460b      	mov	r3, r1
 8005fba:	4630      	mov	r0, r6
 8005fbc:	4639      	mov	r1, r7
 8005fbe:	f7fa fac7 	bl	8000550 <__aeabi_dmul>
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fc8:	9302      	str	r3, [sp, #8]
 8005fca:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005fce:	46ab      	mov	fp, r5
 8005fd0:	106d      	asrs	r5, r5, #1
 8005fd2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005fd6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005fda:	ec41 0b18 	vmov	d8, r0, r1
 8005fde:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	4640      	mov	r0, r8
 8005fe6:	4649      	mov	r1, r9
 8005fe8:	4614      	mov	r4, r2
 8005fea:	461d      	mov	r5, r3
 8005fec:	f7fa fab0 	bl	8000550 <__aeabi_dmul>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	4630      	mov	r0, r6
 8005ff6:	4639      	mov	r1, r7
 8005ff8:	f7fa f8f2 	bl	80001e0 <__aeabi_dsub>
 8005ffc:	ec53 2b19 	vmov	r2, r3, d9
 8006000:	4606      	mov	r6, r0
 8006002:	460f      	mov	r7, r1
 8006004:	4620      	mov	r0, r4
 8006006:	4629      	mov	r1, r5
 8006008:	f7fa f8ea 	bl	80001e0 <__aeabi_dsub>
 800600c:	4602      	mov	r2, r0
 800600e:	460b      	mov	r3, r1
 8006010:	4650      	mov	r0, sl
 8006012:	4659      	mov	r1, fp
 8006014:	f7fa f8e4 	bl	80001e0 <__aeabi_dsub>
 8006018:	4642      	mov	r2, r8
 800601a:	464b      	mov	r3, r9
 800601c:	f7fa fa98 	bl	8000550 <__aeabi_dmul>
 8006020:	4602      	mov	r2, r0
 8006022:	460b      	mov	r3, r1
 8006024:	4630      	mov	r0, r6
 8006026:	4639      	mov	r1, r7
 8006028:	f7fa f8da 	bl	80001e0 <__aeabi_dsub>
 800602c:	ec53 2b1a 	vmov	r2, r3, d10
 8006030:	f7fa fa8e 	bl	8000550 <__aeabi_dmul>
 8006034:	ec53 2b18 	vmov	r2, r3, d8
 8006038:	ec41 0b19 	vmov	d9, r0, r1
 800603c:	ec51 0b18 	vmov	r0, r1, d8
 8006040:	f7fa fa86 	bl	8000550 <__aeabi_dmul>
 8006044:	a37c      	add	r3, pc, #496	; (adr r3, 8006238 <__ieee754_pow+0x708>)
 8006046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604a:	4604      	mov	r4, r0
 800604c:	460d      	mov	r5, r1
 800604e:	f7fa fa7f 	bl	8000550 <__aeabi_dmul>
 8006052:	a37b      	add	r3, pc, #492	; (adr r3, 8006240 <__ieee754_pow+0x710>)
 8006054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006058:	f7fa f8c4 	bl	80001e4 <__adddf3>
 800605c:	4622      	mov	r2, r4
 800605e:	462b      	mov	r3, r5
 8006060:	f7fa fa76 	bl	8000550 <__aeabi_dmul>
 8006064:	a378      	add	r3, pc, #480	; (adr r3, 8006248 <__ieee754_pow+0x718>)
 8006066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606a:	f7fa f8bb 	bl	80001e4 <__adddf3>
 800606e:	4622      	mov	r2, r4
 8006070:	462b      	mov	r3, r5
 8006072:	f7fa fa6d 	bl	8000550 <__aeabi_dmul>
 8006076:	a376      	add	r3, pc, #472	; (adr r3, 8006250 <__ieee754_pow+0x720>)
 8006078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607c:	f7fa f8b2 	bl	80001e4 <__adddf3>
 8006080:	4622      	mov	r2, r4
 8006082:	462b      	mov	r3, r5
 8006084:	f7fa fa64 	bl	8000550 <__aeabi_dmul>
 8006088:	a373      	add	r3, pc, #460	; (adr r3, 8006258 <__ieee754_pow+0x728>)
 800608a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608e:	f7fa f8a9 	bl	80001e4 <__adddf3>
 8006092:	4622      	mov	r2, r4
 8006094:	462b      	mov	r3, r5
 8006096:	f7fa fa5b 	bl	8000550 <__aeabi_dmul>
 800609a:	a371      	add	r3, pc, #452	; (adr r3, 8006260 <__ieee754_pow+0x730>)
 800609c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a0:	f7fa f8a0 	bl	80001e4 <__adddf3>
 80060a4:	4622      	mov	r2, r4
 80060a6:	4606      	mov	r6, r0
 80060a8:	460f      	mov	r7, r1
 80060aa:	462b      	mov	r3, r5
 80060ac:	4620      	mov	r0, r4
 80060ae:	4629      	mov	r1, r5
 80060b0:	f7fa fa4e 	bl	8000550 <__aeabi_dmul>
 80060b4:	4602      	mov	r2, r0
 80060b6:	460b      	mov	r3, r1
 80060b8:	4630      	mov	r0, r6
 80060ba:	4639      	mov	r1, r7
 80060bc:	f7fa fa48 	bl	8000550 <__aeabi_dmul>
 80060c0:	4642      	mov	r2, r8
 80060c2:	4604      	mov	r4, r0
 80060c4:	460d      	mov	r5, r1
 80060c6:	464b      	mov	r3, r9
 80060c8:	ec51 0b18 	vmov	r0, r1, d8
 80060cc:	f7fa f88a 	bl	80001e4 <__adddf3>
 80060d0:	ec53 2b19 	vmov	r2, r3, d9
 80060d4:	f7fa fa3c 	bl	8000550 <__aeabi_dmul>
 80060d8:	4622      	mov	r2, r4
 80060da:	462b      	mov	r3, r5
 80060dc:	f7fa f882 	bl	80001e4 <__adddf3>
 80060e0:	4642      	mov	r2, r8
 80060e2:	4682      	mov	sl, r0
 80060e4:	468b      	mov	fp, r1
 80060e6:	464b      	mov	r3, r9
 80060e8:	4640      	mov	r0, r8
 80060ea:	4649      	mov	r1, r9
 80060ec:	f7fa fa30 	bl	8000550 <__aeabi_dmul>
 80060f0:	4b6b      	ldr	r3, [pc, #428]	; (80062a0 <__ieee754_pow+0x770>)
 80060f2:	2200      	movs	r2, #0
 80060f4:	4606      	mov	r6, r0
 80060f6:	460f      	mov	r7, r1
 80060f8:	f7fa f874 	bl	80001e4 <__adddf3>
 80060fc:	4652      	mov	r2, sl
 80060fe:	465b      	mov	r3, fp
 8006100:	f7fa f870 	bl	80001e4 <__adddf3>
 8006104:	2000      	movs	r0, #0
 8006106:	4604      	mov	r4, r0
 8006108:	460d      	mov	r5, r1
 800610a:	4602      	mov	r2, r0
 800610c:	460b      	mov	r3, r1
 800610e:	4640      	mov	r0, r8
 8006110:	4649      	mov	r1, r9
 8006112:	f7fa fa1d 	bl	8000550 <__aeabi_dmul>
 8006116:	4b62      	ldr	r3, [pc, #392]	; (80062a0 <__ieee754_pow+0x770>)
 8006118:	4680      	mov	r8, r0
 800611a:	4689      	mov	r9, r1
 800611c:	2200      	movs	r2, #0
 800611e:	4620      	mov	r0, r4
 8006120:	4629      	mov	r1, r5
 8006122:	f7fa f85d 	bl	80001e0 <__aeabi_dsub>
 8006126:	4632      	mov	r2, r6
 8006128:	463b      	mov	r3, r7
 800612a:	f7fa f859 	bl	80001e0 <__aeabi_dsub>
 800612e:	4602      	mov	r2, r0
 8006130:	460b      	mov	r3, r1
 8006132:	4650      	mov	r0, sl
 8006134:	4659      	mov	r1, fp
 8006136:	f7fa f853 	bl	80001e0 <__aeabi_dsub>
 800613a:	ec53 2b18 	vmov	r2, r3, d8
 800613e:	f7fa fa07 	bl	8000550 <__aeabi_dmul>
 8006142:	4622      	mov	r2, r4
 8006144:	4606      	mov	r6, r0
 8006146:	460f      	mov	r7, r1
 8006148:	462b      	mov	r3, r5
 800614a:	ec51 0b19 	vmov	r0, r1, d9
 800614e:	f7fa f9ff 	bl	8000550 <__aeabi_dmul>
 8006152:	4602      	mov	r2, r0
 8006154:	460b      	mov	r3, r1
 8006156:	4630      	mov	r0, r6
 8006158:	4639      	mov	r1, r7
 800615a:	f7fa f843 	bl	80001e4 <__adddf3>
 800615e:	4606      	mov	r6, r0
 8006160:	460f      	mov	r7, r1
 8006162:	4602      	mov	r2, r0
 8006164:	460b      	mov	r3, r1
 8006166:	4640      	mov	r0, r8
 8006168:	4649      	mov	r1, r9
 800616a:	f7fa f83b 	bl	80001e4 <__adddf3>
 800616e:	a33e      	add	r3, pc, #248	; (adr r3, 8006268 <__ieee754_pow+0x738>)
 8006170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006174:	2000      	movs	r0, #0
 8006176:	4604      	mov	r4, r0
 8006178:	460d      	mov	r5, r1
 800617a:	f7fa f9e9 	bl	8000550 <__aeabi_dmul>
 800617e:	4642      	mov	r2, r8
 8006180:	ec41 0b18 	vmov	d8, r0, r1
 8006184:	464b      	mov	r3, r9
 8006186:	4620      	mov	r0, r4
 8006188:	4629      	mov	r1, r5
 800618a:	f7fa f829 	bl	80001e0 <__aeabi_dsub>
 800618e:	4602      	mov	r2, r0
 8006190:	460b      	mov	r3, r1
 8006192:	4630      	mov	r0, r6
 8006194:	4639      	mov	r1, r7
 8006196:	f7fa f823 	bl	80001e0 <__aeabi_dsub>
 800619a:	a335      	add	r3, pc, #212	; (adr r3, 8006270 <__ieee754_pow+0x740>)
 800619c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a0:	f7fa f9d6 	bl	8000550 <__aeabi_dmul>
 80061a4:	a334      	add	r3, pc, #208	; (adr r3, 8006278 <__ieee754_pow+0x748>)
 80061a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061aa:	4606      	mov	r6, r0
 80061ac:	460f      	mov	r7, r1
 80061ae:	4620      	mov	r0, r4
 80061b0:	4629      	mov	r1, r5
 80061b2:	f7fa f9cd 	bl	8000550 <__aeabi_dmul>
 80061b6:	4602      	mov	r2, r0
 80061b8:	460b      	mov	r3, r1
 80061ba:	4630      	mov	r0, r6
 80061bc:	4639      	mov	r1, r7
 80061be:	f7fa f811 	bl	80001e4 <__adddf3>
 80061c2:	9a07      	ldr	r2, [sp, #28]
 80061c4:	4b37      	ldr	r3, [pc, #220]	; (80062a4 <__ieee754_pow+0x774>)
 80061c6:	4413      	add	r3, r2
 80061c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061cc:	f7fa f80a 	bl	80001e4 <__adddf3>
 80061d0:	4682      	mov	sl, r0
 80061d2:	9805      	ldr	r0, [sp, #20]
 80061d4:	468b      	mov	fp, r1
 80061d6:	f7fa f951 	bl	800047c <__aeabi_i2d>
 80061da:	9a07      	ldr	r2, [sp, #28]
 80061dc:	4b32      	ldr	r3, [pc, #200]	; (80062a8 <__ieee754_pow+0x778>)
 80061de:	4413      	add	r3, r2
 80061e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80061e4:	4606      	mov	r6, r0
 80061e6:	460f      	mov	r7, r1
 80061e8:	4652      	mov	r2, sl
 80061ea:	465b      	mov	r3, fp
 80061ec:	ec51 0b18 	vmov	r0, r1, d8
 80061f0:	f7f9 fff8 	bl	80001e4 <__adddf3>
 80061f4:	4642      	mov	r2, r8
 80061f6:	464b      	mov	r3, r9
 80061f8:	f7f9 fff4 	bl	80001e4 <__adddf3>
 80061fc:	4632      	mov	r2, r6
 80061fe:	463b      	mov	r3, r7
 8006200:	f7f9 fff0 	bl	80001e4 <__adddf3>
 8006204:	2000      	movs	r0, #0
 8006206:	4632      	mov	r2, r6
 8006208:	463b      	mov	r3, r7
 800620a:	4604      	mov	r4, r0
 800620c:	460d      	mov	r5, r1
 800620e:	f7f9 ffe7 	bl	80001e0 <__aeabi_dsub>
 8006212:	4642      	mov	r2, r8
 8006214:	464b      	mov	r3, r9
 8006216:	f7f9 ffe3 	bl	80001e0 <__aeabi_dsub>
 800621a:	ec53 2b18 	vmov	r2, r3, d8
 800621e:	f7f9 ffdf 	bl	80001e0 <__aeabi_dsub>
 8006222:	4602      	mov	r2, r0
 8006224:	460b      	mov	r3, r1
 8006226:	4650      	mov	r0, sl
 8006228:	4659      	mov	r1, fp
 800622a:	e610      	b.n	8005e4e <__ieee754_pow+0x31e>
 800622c:	2401      	movs	r4, #1
 800622e:	e6a1      	b.n	8005f74 <__ieee754_pow+0x444>
 8006230:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8006280 <__ieee754_pow+0x750>
 8006234:	e617      	b.n	8005e66 <__ieee754_pow+0x336>
 8006236:	bf00      	nop
 8006238:	4a454eef 	.word	0x4a454eef
 800623c:	3fca7e28 	.word	0x3fca7e28
 8006240:	93c9db65 	.word	0x93c9db65
 8006244:	3fcd864a 	.word	0x3fcd864a
 8006248:	a91d4101 	.word	0xa91d4101
 800624c:	3fd17460 	.word	0x3fd17460
 8006250:	518f264d 	.word	0x518f264d
 8006254:	3fd55555 	.word	0x3fd55555
 8006258:	db6fabff 	.word	0xdb6fabff
 800625c:	3fdb6db6 	.word	0x3fdb6db6
 8006260:	33333303 	.word	0x33333303
 8006264:	3fe33333 	.word	0x3fe33333
 8006268:	e0000000 	.word	0xe0000000
 800626c:	3feec709 	.word	0x3feec709
 8006270:	dc3a03fd 	.word	0xdc3a03fd
 8006274:	3feec709 	.word	0x3feec709
 8006278:	145b01f5 	.word	0x145b01f5
 800627c:	be3e2fe0 	.word	0xbe3e2fe0
 8006280:	00000000 	.word	0x00000000
 8006284:	3ff00000 	.word	0x3ff00000
 8006288:	7ff00000 	.word	0x7ff00000
 800628c:	43400000 	.word	0x43400000
 8006290:	0003988e 	.word	0x0003988e
 8006294:	000bb679 	.word	0x000bb679
 8006298:	080068e0 	.word	0x080068e0
 800629c:	3ff00000 	.word	0x3ff00000
 80062a0:	40080000 	.word	0x40080000
 80062a4:	08006900 	.word	0x08006900
 80062a8:	080068f0 	.word	0x080068f0
 80062ac:	a3b5      	add	r3, pc, #724	; (adr r3, 8006584 <__ieee754_pow+0xa54>)
 80062ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b2:	4640      	mov	r0, r8
 80062b4:	4649      	mov	r1, r9
 80062b6:	f7f9 ff95 	bl	80001e4 <__adddf3>
 80062ba:	4622      	mov	r2, r4
 80062bc:	ec41 0b1a 	vmov	d10, r0, r1
 80062c0:	462b      	mov	r3, r5
 80062c2:	4630      	mov	r0, r6
 80062c4:	4639      	mov	r1, r7
 80062c6:	f7f9 ff8b 	bl	80001e0 <__aeabi_dsub>
 80062ca:	4602      	mov	r2, r0
 80062cc:	460b      	mov	r3, r1
 80062ce:	ec51 0b1a 	vmov	r0, r1, d10
 80062d2:	f7fa fbcd 	bl	8000a70 <__aeabi_dcmpgt>
 80062d6:	2800      	cmp	r0, #0
 80062d8:	f47f ae04 	bne.w	8005ee4 <__ieee754_pow+0x3b4>
 80062dc:	4aa4      	ldr	r2, [pc, #656]	; (8006570 <__ieee754_pow+0xa40>)
 80062de:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80062e2:	4293      	cmp	r3, r2
 80062e4:	f340 8108 	ble.w	80064f8 <__ieee754_pow+0x9c8>
 80062e8:	151b      	asrs	r3, r3, #20
 80062ea:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80062ee:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80062f2:	fa4a f303 	asr.w	r3, sl, r3
 80062f6:	445b      	add	r3, fp
 80062f8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80062fc:	4e9d      	ldr	r6, [pc, #628]	; (8006574 <__ieee754_pow+0xa44>)
 80062fe:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006302:	4116      	asrs	r6, r2
 8006304:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006308:	2000      	movs	r0, #0
 800630a:	ea23 0106 	bic.w	r1, r3, r6
 800630e:	f1c2 0214 	rsb	r2, r2, #20
 8006312:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006316:	fa4a fa02 	asr.w	sl, sl, r2
 800631a:	f1bb 0f00 	cmp.w	fp, #0
 800631e:	4602      	mov	r2, r0
 8006320:	460b      	mov	r3, r1
 8006322:	4620      	mov	r0, r4
 8006324:	4629      	mov	r1, r5
 8006326:	bfb8      	it	lt
 8006328:	f1ca 0a00 	rsblt	sl, sl, #0
 800632c:	f7f9 ff58 	bl	80001e0 <__aeabi_dsub>
 8006330:	ec41 0b19 	vmov	d9, r0, r1
 8006334:	4642      	mov	r2, r8
 8006336:	464b      	mov	r3, r9
 8006338:	ec51 0b19 	vmov	r0, r1, d9
 800633c:	f7f9 ff52 	bl	80001e4 <__adddf3>
 8006340:	a37b      	add	r3, pc, #492	; (adr r3, 8006530 <__ieee754_pow+0xa00>)
 8006342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006346:	2000      	movs	r0, #0
 8006348:	4604      	mov	r4, r0
 800634a:	460d      	mov	r5, r1
 800634c:	f7fa f900 	bl	8000550 <__aeabi_dmul>
 8006350:	ec53 2b19 	vmov	r2, r3, d9
 8006354:	4606      	mov	r6, r0
 8006356:	460f      	mov	r7, r1
 8006358:	4620      	mov	r0, r4
 800635a:	4629      	mov	r1, r5
 800635c:	f7f9 ff40 	bl	80001e0 <__aeabi_dsub>
 8006360:	4602      	mov	r2, r0
 8006362:	460b      	mov	r3, r1
 8006364:	4640      	mov	r0, r8
 8006366:	4649      	mov	r1, r9
 8006368:	f7f9 ff3a 	bl	80001e0 <__aeabi_dsub>
 800636c:	a372      	add	r3, pc, #456	; (adr r3, 8006538 <__ieee754_pow+0xa08>)
 800636e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006372:	f7fa f8ed 	bl	8000550 <__aeabi_dmul>
 8006376:	a372      	add	r3, pc, #456	; (adr r3, 8006540 <__ieee754_pow+0xa10>)
 8006378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637c:	4680      	mov	r8, r0
 800637e:	4689      	mov	r9, r1
 8006380:	4620      	mov	r0, r4
 8006382:	4629      	mov	r1, r5
 8006384:	f7fa f8e4 	bl	8000550 <__aeabi_dmul>
 8006388:	4602      	mov	r2, r0
 800638a:	460b      	mov	r3, r1
 800638c:	4640      	mov	r0, r8
 800638e:	4649      	mov	r1, r9
 8006390:	f7f9 ff28 	bl	80001e4 <__adddf3>
 8006394:	4604      	mov	r4, r0
 8006396:	460d      	mov	r5, r1
 8006398:	4602      	mov	r2, r0
 800639a:	460b      	mov	r3, r1
 800639c:	4630      	mov	r0, r6
 800639e:	4639      	mov	r1, r7
 80063a0:	f7f9 ff20 	bl	80001e4 <__adddf3>
 80063a4:	4632      	mov	r2, r6
 80063a6:	463b      	mov	r3, r7
 80063a8:	4680      	mov	r8, r0
 80063aa:	4689      	mov	r9, r1
 80063ac:	f7f9 ff18 	bl	80001e0 <__aeabi_dsub>
 80063b0:	4602      	mov	r2, r0
 80063b2:	460b      	mov	r3, r1
 80063b4:	4620      	mov	r0, r4
 80063b6:	4629      	mov	r1, r5
 80063b8:	f7f9 ff12 	bl	80001e0 <__aeabi_dsub>
 80063bc:	4642      	mov	r2, r8
 80063be:	4606      	mov	r6, r0
 80063c0:	460f      	mov	r7, r1
 80063c2:	464b      	mov	r3, r9
 80063c4:	4640      	mov	r0, r8
 80063c6:	4649      	mov	r1, r9
 80063c8:	f7fa f8c2 	bl	8000550 <__aeabi_dmul>
 80063cc:	a35e      	add	r3, pc, #376	; (adr r3, 8006548 <__ieee754_pow+0xa18>)
 80063ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d2:	4604      	mov	r4, r0
 80063d4:	460d      	mov	r5, r1
 80063d6:	f7fa f8bb 	bl	8000550 <__aeabi_dmul>
 80063da:	a35d      	add	r3, pc, #372	; (adr r3, 8006550 <__ieee754_pow+0xa20>)
 80063dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e0:	f7f9 fefe 	bl	80001e0 <__aeabi_dsub>
 80063e4:	4622      	mov	r2, r4
 80063e6:	462b      	mov	r3, r5
 80063e8:	f7fa f8b2 	bl	8000550 <__aeabi_dmul>
 80063ec:	a35a      	add	r3, pc, #360	; (adr r3, 8006558 <__ieee754_pow+0xa28>)
 80063ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f2:	f7f9 fef7 	bl	80001e4 <__adddf3>
 80063f6:	4622      	mov	r2, r4
 80063f8:	462b      	mov	r3, r5
 80063fa:	f7fa f8a9 	bl	8000550 <__aeabi_dmul>
 80063fe:	a358      	add	r3, pc, #352	; (adr r3, 8006560 <__ieee754_pow+0xa30>)
 8006400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006404:	f7f9 feec 	bl	80001e0 <__aeabi_dsub>
 8006408:	4622      	mov	r2, r4
 800640a:	462b      	mov	r3, r5
 800640c:	f7fa f8a0 	bl	8000550 <__aeabi_dmul>
 8006410:	a355      	add	r3, pc, #340	; (adr r3, 8006568 <__ieee754_pow+0xa38>)
 8006412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006416:	f7f9 fee5 	bl	80001e4 <__adddf3>
 800641a:	4622      	mov	r2, r4
 800641c:	462b      	mov	r3, r5
 800641e:	f7fa f897 	bl	8000550 <__aeabi_dmul>
 8006422:	4602      	mov	r2, r0
 8006424:	460b      	mov	r3, r1
 8006426:	4640      	mov	r0, r8
 8006428:	4649      	mov	r1, r9
 800642a:	f7f9 fed9 	bl	80001e0 <__aeabi_dsub>
 800642e:	4604      	mov	r4, r0
 8006430:	460d      	mov	r5, r1
 8006432:	4602      	mov	r2, r0
 8006434:	460b      	mov	r3, r1
 8006436:	4640      	mov	r0, r8
 8006438:	4649      	mov	r1, r9
 800643a:	f7fa f889 	bl	8000550 <__aeabi_dmul>
 800643e:	2200      	movs	r2, #0
 8006440:	ec41 0b19 	vmov	d9, r0, r1
 8006444:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006448:	4620      	mov	r0, r4
 800644a:	4629      	mov	r1, r5
 800644c:	f7f9 fec8 	bl	80001e0 <__aeabi_dsub>
 8006450:	4602      	mov	r2, r0
 8006452:	460b      	mov	r3, r1
 8006454:	ec51 0b19 	vmov	r0, r1, d9
 8006458:	f7fa f9a4 	bl	80007a4 <__aeabi_ddiv>
 800645c:	4632      	mov	r2, r6
 800645e:	4604      	mov	r4, r0
 8006460:	460d      	mov	r5, r1
 8006462:	463b      	mov	r3, r7
 8006464:	4640      	mov	r0, r8
 8006466:	4649      	mov	r1, r9
 8006468:	f7fa f872 	bl	8000550 <__aeabi_dmul>
 800646c:	4632      	mov	r2, r6
 800646e:	463b      	mov	r3, r7
 8006470:	f7f9 feb8 	bl	80001e4 <__adddf3>
 8006474:	4602      	mov	r2, r0
 8006476:	460b      	mov	r3, r1
 8006478:	4620      	mov	r0, r4
 800647a:	4629      	mov	r1, r5
 800647c:	f7f9 feb0 	bl	80001e0 <__aeabi_dsub>
 8006480:	4642      	mov	r2, r8
 8006482:	464b      	mov	r3, r9
 8006484:	f7f9 feac 	bl	80001e0 <__aeabi_dsub>
 8006488:	460b      	mov	r3, r1
 800648a:	4602      	mov	r2, r0
 800648c:	493a      	ldr	r1, [pc, #232]	; (8006578 <__ieee754_pow+0xa48>)
 800648e:	2000      	movs	r0, #0
 8006490:	f7f9 fea6 	bl	80001e0 <__aeabi_dsub>
 8006494:	ec41 0b10 	vmov	d0, r0, r1
 8006498:	ee10 3a90 	vmov	r3, s1
 800649c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80064a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064a4:	da2b      	bge.n	80064fe <__ieee754_pow+0x9ce>
 80064a6:	4650      	mov	r0, sl
 80064a8:	f000 f966 	bl	8006778 <scalbn>
 80064ac:	ec51 0b10 	vmov	r0, r1, d0
 80064b0:	ec53 2b18 	vmov	r2, r3, d8
 80064b4:	f7ff bbed 	b.w	8005c92 <__ieee754_pow+0x162>
 80064b8:	4b30      	ldr	r3, [pc, #192]	; (800657c <__ieee754_pow+0xa4c>)
 80064ba:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80064be:	429e      	cmp	r6, r3
 80064c0:	f77f af0c 	ble.w	80062dc <__ieee754_pow+0x7ac>
 80064c4:	4b2e      	ldr	r3, [pc, #184]	; (8006580 <__ieee754_pow+0xa50>)
 80064c6:	440b      	add	r3, r1
 80064c8:	4303      	orrs	r3, r0
 80064ca:	d009      	beq.n	80064e0 <__ieee754_pow+0x9b0>
 80064cc:	ec51 0b18 	vmov	r0, r1, d8
 80064d0:	2200      	movs	r2, #0
 80064d2:	2300      	movs	r3, #0
 80064d4:	f7fa faae 	bl	8000a34 <__aeabi_dcmplt>
 80064d8:	3800      	subs	r0, #0
 80064da:	bf18      	it	ne
 80064dc:	2001      	movne	r0, #1
 80064de:	e447      	b.n	8005d70 <__ieee754_pow+0x240>
 80064e0:	4622      	mov	r2, r4
 80064e2:	462b      	mov	r3, r5
 80064e4:	f7f9 fe7c 	bl	80001e0 <__aeabi_dsub>
 80064e8:	4642      	mov	r2, r8
 80064ea:	464b      	mov	r3, r9
 80064ec:	f7fa fab6 	bl	8000a5c <__aeabi_dcmpge>
 80064f0:	2800      	cmp	r0, #0
 80064f2:	f43f aef3 	beq.w	80062dc <__ieee754_pow+0x7ac>
 80064f6:	e7e9      	b.n	80064cc <__ieee754_pow+0x99c>
 80064f8:	f04f 0a00 	mov.w	sl, #0
 80064fc:	e71a      	b.n	8006334 <__ieee754_pow+0x804>
 80064fe:	ec51 0b10 	vmov	r0, r1, d0
 8006502:	4619      	mov	r1, r3
 8006504:	e7d4      	b.n	80064b0 <__ieee754_pow+0x980>
 8006506:	491c      	ldr	r1, [pc, #112]	; (8006578 <__ieee754_pow+0xa48>)
 8006508:	2000      	movs	r0, #0
 800650a:	f7ff bb30 	b.w	8005b6e <__ieee754_pow+0x3e>
 800650e:	2000      	movs	r0, #0
 8006510:	2100      	movs	r1, #0
 8006512:	f7ff bb2c 	b.w	8005b6e <__ieee754_pow+0x3e>
 8006516:	4630      	mov	r0, r6
 8006518:	4639      	mov	r1, r7
 800651a:	f7ff bb28 	b.w	8005b6e <__ieee754_pow+0x3e>
 800651e:	9204      	str	r2, [sp, #16]
 8006520:	f7ff bb7a 	b.w	8005c18 <__ieee754_pow+0xe8>
 8006524:	2300      	movs	r3, #0
 8006526:	f7ff bb64 	b.w	8005bf2 <__ieee754_pow+0xc2>
 800652a:	bf00      	nop
 800652c:	f3af 8000 	nop.w
 8006530:	00000000 	.word	0x00000000
 8006534:	3fe62e43 	.word	0x3fe62e43
 8006538:	fefa39ef 	.word	0xfefa39ef
 800653c:	3fe62e42 	.word	0x3fe62e42
 8006540:	0ca86c39 	.word	0x0ca86c39
 8006544:	be205c61 	.word	0xbe205c61
 8006548:	72bea4d0 	.word	0x72bea4d0
 800654c:	3e663769 	.word	0x3e663769
 8006550:	c5d26bf1 	.word	0xc5d26bf1
 8006554:	3ebbbd41 	.word	0x3ebbbd41
 8006558:	af25de2c 	.word	0xaf25de2c
 800655c:	3f11566a 	.word	0x3f11566a
 8006560:	16bebd93 	.word	0x16bebd93
 8006564:	3f66c16c 	.word	0x3f66c16c
 8006568:	5555553e 	.word	0x5555553e
 800656c:	3fc55555 	.word	0x3fc55555
 8006570:	3fe00000 	.word	0x3fe00000
 8006574:	000fffff 	.word	0x000fffff
 8006578:	3ff00000 	.word	0x3ff00000
 800657c:	4090cbff 	.word	0x4090cbff
 8006580:	3f6f3400 	.word	0x3f6f3400
 8006584:	652b82fe 	.word	0x652b82fe
 8006588:	3c971547 	.word	0x3c971547

0800658c <__ieee754_sqrt>:
 800658c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006590:	ec55 4b10 	vmov	r4, r5, d0
 8006594:	4e55      	ldr	r6, [pc, #340]	; (80066ec <__ieee754_sqrt+0x160>)
 8006596:	43ae      	bics	r6, r5
 8006598:	ee10 0a10 	vmov	r0, s0
 800659c:	ee10 3a10 	vmov	r3, s0
 80065a0:	462a      	mov	r2, r5
 80065a2:	4629      	mov	r1, r5
 80065a4:	d110      	bne.n	80065c8 <__ieee754_sqrt+0x3c>
 80065a6:	ee10 2a10 	vmov	r2, s0
 80065aa:	462b      	mov	r3, r5
 80065ac:	f7f9 ffd0 	bl	8000550 <__aeabi_dmul>
 80065b0:	4602      	mov	r2, r0
 80065b2:	460b      	mov	r3, r1
 80065b4:	4620      	mov	r0, r4
 80065b6:	4629      	mov	r1, r5
 80065b8:	f7f9 fe14 	bl	80001e4 <__adddf3>
 80065bc:	4604      	mov	r4, r0
 80065be:	460d      	mov	r5, r1
 80065c0:	ec45 4b10 	vmov	d0, r4, r5
 80065c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065c8:	2d00      	cmp	r5, #0
 80065ca:	dc10      	bgt.n	80065ee <__ieee754_sqrt+0x62>
 80065cc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80065d0:	4330      	orrs	r0, r6
 80065d2:	d0f5      	beq.n	80065c0 <__ieee754_sqrt+0x34>
 80065d4:	b15d      	cbz	r5, 80065ee <__ieee754_sqrt+0x62>
 80065d6:	ee10 2a10 	vmov	r2, s0
 80065da:	462b      	mov	r3, r5
 80065dc:	ee10 0a10 	vmov	r0, s0
 80065e0:	f7f9 fdfe 	bl	80001e0 <__aeabi_dsub>
 80065e4:	4602      	mov	r2, r0
 80065e6:	460b      	mov	r3, r1
 80065e8:	f7fa f8dc 	bl	80007a4 <__aeabi_ddiv>
 80065ec:	e7e6      	b.n	80065bc <__ieee754_sqrt+0x30>
 80065ee:	1512      	asrs	r2, r2, #20
 80065f0:	d074      	beq.n	80066dc <__ieee754_sqrt+0x150>
 80065f2:	07d4      	lsls	r4, r2, #31
 80065f4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80065f8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80065fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006600:	bf5e      	ittt	pl
 8006602:	0fda      	lsrpl	r2, r3, #31
 8006604:	005b      	lslpl	r3, r3, #1
 8006606:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800660a:	2400      	movs	r4, #0
 800660c:	0fda      	lsrs	r2, r3, #31
 800660e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8006612:	107f      	asrs	r7, r7, #1
 8006614:	005b      	lsls	r3, r3, #1
 8006616:	2516      	movs	r5, #22
 8006618:	4620      	mov	r0, r4
 800661a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800661e:	1886      	adds	r6, r0, r2
 8006620:	428e      	cmp	r6, r1
 8006622:	bfde      	ittt	le
 8006624:	1b89      	suble	r1, r1, r6
 8006626:	18b0      	addle	r0, r6, r2
 8006628:	18a4      	addle	r4, r4, r2
 800662a:	0049      	lsls	r1, r1, #1
 800662c:	3d01      	subs	r5, #1
 800662e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8006632:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006636:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800663a:	d1f0      	bne.n	800661e <__ieee754_sqrt+0x92>
 800663c:	462a      	mov	r2, r5
 800663e:	f04f 0e20 	mov.w	lr, #32
 8006642:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006646:	4281      	cmp	r1, r0
 8006648:	eb06 0c05 	add.w	ip, r6, r5
 800664c:	dc02      	bgt.n	8006654 <__ieee754_sqrt+0xc8>
 800664e:	d113      	bne.n	8006678 <__ieee754_sqrt+0xec>
 8006650:	459c      	cmp	ip, r3
 8006652:	d811      	bhi.n	8006678 <__ieee754_sqrt+0xec>
 8006654:	f1bc 0f00 	cmp.w	ip, #0
 8006658:	eb0c 0506 	add.w	r5, ip, r6
 800665c:	da43      	bge.n	80066e6 <__ieee754_sqrt+0x15a>
 800665e:	2d00      	cmp	r5, #0
 8006660:	db41      	blt.n	80066e6 <__ieee754_sqrt+0x15a>
 8006662:	f100 0801 	add.w	r8, r0, #1
 8006666:	1a09      	subs	r1, r1, r0
 8006668:	459c      	cmp	ip, r3
 800666a:	bf88      	it	hi
 800666c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8006670:	eba3 030c 	sub.w	r3, r3, ip
 8006674:	4432      	add	r2, r6
 8006676:	4640      	mov	r0, r8
 8006678:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800667c:	f1be 0e01 	subs.w	lr, lr, #1
 8006680:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8006684:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006688:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800668c:	d1db      	bne.n	8006646 <__ieee754_sqrt+0xba>
 800668e:	430b      	orrs	r3, r1
 8006690:	d006      	beq.n	80066a0 <__ieee754_sqrt+0x114>
 8006692:	1c50      	adds	r0, r2, #1
 8006694:	bf13      	iteet	ne
 8006696:	3201      	addne	r2, #1
 8006698:	3401      	addeq	r4, #1
 800669a:	4672      	moveq	r2, lr
 800669c:	f022 0201 	bicne.w	r2, r2, #1
 80066a0:	1063      	asrs	r3, r4, #1
 80066a2:	0852      	lsrs	r2, r2, #1
 80066a4:	07e1      	lsls	r1, r4, #31
 80066a6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80066aa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80066ae:	bf48      	it	mi
 80066b0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80066b4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80066b8:	4614      	mov	r4, r2
 80066ba:	e781      	b.n	80065c0 <__ieee754_sqrt+0x34>
 80066bc:	0ad9      	lsrs	r1, r3, #11
 80066be:	3815      	subs	r0, #21
 80066c0:	055b      	lsls	r3, r3, #21
 80066c2:	2900      	cmp	r1, #0
 80066c4:	d0fa      	beq.n	80066bc <__ieee754_sqrt+0x130>
 80066c6:	02cd      	lsls	r5, r1, #11
 80066c8:	d50a      	bpl.n	80066e0 <__ieee754_sqrt+0x154>
 80066ca:	f1c2 0420 	rsb	r4, r2, #32
 80066ce:	fa23 f404 	lsr.w	r4, r3, r4
 80066d2:	1e55      	subs	r5, r2, #1
 80066d4:	4093      	lsls	r3, r2
 80066d6:	4321      	orrs	r1, r4
 80066d8:	1b42      	subs	r2, r0, r5
 80066da:	e78a      	b.n	80065f2 <__ieee754_sqrt+0x66>
 80066dc:	4610      	mov	r0, r2
 80066de:	e7f0      	b.n	80066c2 <__ieee754_sqrt+0x136>
 80066e0:	0049      	lsls	r1, r1, #1
 80066e2:	3201      	adds	r2, #1
 80066e4:	e7ef      	b.n	80066c6 <__ieee754_sqrt+0x13a>
 80066e6:	4680      	mov	r8, r0
 80066e8:	e7bd      	b.n	8006666 <__ieee754_sqrt+0xda>
 80066ea:	bf00      	nop
 80066ec:	7ff00000 	.word	0x7ff00000

080066f0 <with_errno>:
 80066f0:	b570      	push	{r4, r5, r6, lr}
 80066f2:	4604      	mov	r4, r0
 80066f4:	460d      	mov	r5, r1
 80066f6:	4616      	mov	r6, r2
 80066f8:	f7ff f976 	bl	80059e8 <__errno>
 80066fc:	4629      	mov	r1, r5
 80066fe:	6006      	str	r6, [r0, #0]
 8006700:	4620      	mov	r0, r4
 8006702:	bd70      	pop	{r4, r5, r6, pc}

08006704 <xflow>:
 8006704:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006706:	4614      	mov	r4, r2
 8006708:	461d      	mov	r5, r3
 800670a:	b108      	cbz	r0, 8006710 <xflow+0xc>
 800670c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006710:	e9cd 2300 	strd	r2, r3, [sp]
 8006714:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006718:	4620      	mov	r0, r4
 800671a:	4629      	mov	r1, r5
 800671c:	f7f9 ff18 	bl	8000550 <__aeabi_dmul>
 8006720:	2222      	movs	r2, #34	; 0x22
 8006722:	b003      	add	sp, #12
 8006724:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006728:	f7ff bfe2 	b.w	80066f0 <with_errno>

0800672c <__math_uflow>:
 800672c:	b508      	push	{r3, lr}
 800672e:	2200      	movs	r2, #0
 8006730:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006734:	f7ff ffe6 	bl	8006704 <xflow>
 8006738:	ec41 0b10 	vmov	d0, r0, r1
 800673c:	bd08      	pop	{r3, pc}

0800673e <__math_oflow>:
 800673e:	b508      	push	{r3, lr}
 8006740:	2200      	movs	r2, #0
 8006742:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006746:	f7ff ffdd 	bl	8006704 <xflow>
 800674a:	ec41 0b10 	vmov	d0, r0, r1
 800674e:	bd08      	pop	{r3, pc}

08006750 <fabs>:
 8006750:	ec51 0b10 	vmov	r0, r1, d0
 8006754:	ee10 2a10 	vmov	r2, s0
 8006758:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800675c:	ec43 2b10 	vmov	d0, r2, r3
 8006760:	4770      	bx	lr

08006762 <finite>:
 8006762:	b082      	sub	sp, #8
 8006764:	ed8d 0b00 	vstr	d0, [sp]
 8006768:	9801      	ldr	r0, [sp, #4]
 800676a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800676e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006772:	0fc0      	lsrs	r0, r0, #31
 8006774:	b002      	add	sp, #8
 8006776:	4770      	bx	lr

08006778 <scalbn>:
 8006778:	b570      	push	{r4, r5, r6, lr}
 800677a:	ec55 4b10 	vmov	r4, r5, d0
 800677e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006782:	4606      	mov	r6, r0
 8006784:	462b      	mov	r3, r5
 8006786:	b99a      	cbnz	r2, 80067b0 <scalbn+0x38>
 8006788:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800678c:	4323      	orrs	r3, r4
 800678e:	d036      	beq.n	80067fe <scalbn+0x86>
 8006790:	4b39      	ldr	r3, [pc, #228]	; (8006878 <scalbn+0x100>)
 8006792:	4629      	mov	r1, r5
 8006794:	ee10 0a10 	vmov	r0, s0
 8006798:	2200      	movs	r2, #0
 800679a:	f7f9 fed9 	bl	8000550 <__aeabi_dmul>
 800679e:	4b37      	ldr	r3, [pc, #220]	; (800687c <scalbn+0x104>)
 80067a0:	429e      	cmp	r6, r3
 80067a2:	4604      	mov	r4, r0
 80067a4:	460d      	mov	r5, r1
 80067a6:	da10      	bge.n	80067ca <scalbn+0x52>
 80067a8:	a32b      	add	r3, pc, #172	; (adr r3, 8006858 <scalbn+0xe0>)
 80067aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ae:	e03a      	b.n	8006826 <scalbn+0xae>
 80067b0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80067b4:	428a      	cmp	r2, r1
 80067b6:	d10c      	bne.n	80067d2 <scalbn+0x5a>
 80067b8:	ee10 2a10 	vmov	r2, s0
 80067bc:	4620      	mov	r0, r4
 80067be:	4629      	mov	r1, r5
 80067c0:	f7f9 fd10 	bl	80001e4 <__adddf3>
 80067c4:	4604      	mov	r4, r0
 80067c6:	460d      	mov	r5, r1
 80067c8:	e019      	b.n	80067fe <scalbn+0x86>
 80067ca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80067ce:	460b      	mov	r3, r1
 80067d0:	3a36      	subs	r2, #54	; 0x36
 80067d2:	4432      	add	r2, r6
 80067d4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80067d8:	428a      	cmp	r2, r1
 80067da:	dd08      	ble.n	80067ee <scalbn+0x76>
 80067dc:	2d00      	cmp	r5, #0
 80067de:	a120      	add	r1, pc, #128	; (adr r1, 8006860 <scalbn+0xe8>)
 80067e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067e4:	da1c      	bge.n	8006820 <scalbn+0xa8>
 80067e6:	a120      	add	r1, pc, #128	; (adr r1, 8006868 <scalbn+0xf0>)
 80067e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067ec:	e018      	b.n	8006820 <scalbn+0xa8>
 80067ee:	2a00      	cmp	r2, #0
 80067f0:	dd08      	ble.n	8006804 <scalbn+0x8c>
 80067f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80067f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80067fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80067fe:	ec45 4b10 	vmov	d0, r4, r5
 8006802:	bd70      	pop	{r4, r5, r6, pc}
 8006804:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006808:	da19      	bge.n	800683e <scalbn+0xc6>
 800680a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800680e:	429e      	cmp	r6, r3
 8006810:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8006814:	dd0a      	ble.n	800682c <scalbn+0xb4>
 8006816:	a112      	add	r1, pc, #72	; (adr r1, 8006860 <scalbn+0xe8>)
 8006818:	e9d1 0100 	ldrd	r0, r1, [r1]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1e2      	bne.n	80067e6 <scalbn+0x6e>
 8006820:	a30f      	add	r3, pc, #60	; (adr r3, 8006860 <scalbn+0xe8>)
 8006822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006826:	f7f9 fe93 	bl	8000550 <__aeabi_dmul>
 800682a:	e7cb      	b.n	80067c4 <scalbn+0x4c>
 800682c:	a10a      	add	r1, pc, #40	; (adr r1, 8006858 <scalbn+0xe0>)
 800682e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d0b8      	beq.n	80067a8 <scalbn+0x30>
 8006836:	a10e      	add	r1, pc, #56	; (adr r1, 8006870 <scalbn+0xf8>)
 8006838:	e9d1 0100 	ldrd	r0, r1, [r1]
 800683c:	e7b4      	b.n	80067a8 <scalbn+0x30>
 800683e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006842:	3236      	adds	r2, #54	; 0x36
 8006844:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006848:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800684c:	4620      	mov	r0, r4
 800684e:	4b0c      	ldr	r3, [pc, #48]	; (8006880 <scalbn+0x108>)
 8006850:	2200      	movs	r2, #0
 8006852:	e7e8      	b.n	8006826 <scalbn+0xae>
 8006854:	f3af 8000 	nop.w
 8006858:	c2f8f359 	.word	0xc2f8f359
 800685c:	01a56e1f 	.word	0x01a56e1f
 8006860:	8800759c 	.word	0x8800759c
 8006864:	7e37e43c 	.word	0x7e37e43c
 8006868:	8800759c 	.word	0x8800759c
 800686c:	fe37e43c 	.word	0xfe37e43c
 8006870:	c2f8f359 	.word	0xc2f8f359
 8006874:	81a56e1f 	.word	0x81a56e1f
 8006878:	43500000 	.word	0x43500000
 800687c:	ffff3cb0 	.word	0xffff3cb0
 8006880:	3c900000 	.word	0x3c900000

08006884 <_init>:
 8006884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006886:	bf00      	nop
 8006888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800688a:	bc08      	pop	{r3}
 800688c:	469e      	mov	lr, r3
 800688e:	4770      	bx	lr

08006890 <_fini>:
 8006890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006892:	bf00      	nop
 8006894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006896:	bc08      	pop	{r3}
 8006898:	469e      	mov	lr, r3
 800689a:	4770      	bx	lr
