
Control_Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066ac  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08006848  08006848  00016848  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068c8  080068c8  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080068c8  080068c8  000168c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068d0  080068d0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068d0  080068d0  000168d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068d4  080068d4  000168d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080068d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000051c  20000080  08006958  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000059c  08006958  0002059c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e264  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a31  00000000  00000000  0002e314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be8  00000000  00000000  0002fd48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b60  00000000  00000000  00030930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e96  00000000  00000000  00031490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cfa1  00000000  00000000  00047326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d949  00000000  00000000  000542c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e1c10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003704  00000000  00000000  000e1c64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000080 	.word	0x20000080
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800682c 	.word	0x0800682c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000084 	.word	0x20000084
 80001d4:	0800682c 	.word	0x0800682c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295
 8000b64:	f000 b96e 	b.w	8000e44 <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9d08      	ldr	r5, [sp, #32]
 8000b86:	4604      	mov	r4, r0
 8000b88:	468c      	mov	ip, r1
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	f040 8083 	bne.w	8000c96 <__udivmoddi4+0x116>
 8000b90:	428a      	cmp	r2, r1
 8000b92:	4617      	mov	r7, r2
 8000b94:	d947      	bls.n	8000c26 <__udivmoddi4+0xa6>
 8000b96:	fab2 f282 	clz	r2, r2
 8000b9a:	b142      	cbz	r2, 8000bae <__udivmoddi4+0x2e>
 8000b9c:	f1c2 0020 	rsb	r0, r2, #32
 8000ba0:	fa24 f000 	lsr.w	r0, r4, r0
 8000ba4:	4091      	lsls	r1, r2
 8000ba6:	4097      	lsls	r7, r2
 8000ba8:	ea40 0c01 	orr.w	ip, r0, r1
 8000bac:	4094      	lsls	r4, r2
 8000bae:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bb2:	0c23      	lsrs	r3, r4, #16
 8000bb4:	fbbc f6f8 	udiv	r6, ip, r8
 8000bb8:	fa1f fe87 	uxth.w	lr, r7
 8000bbc:	fb08 c116 	mls	r1, r8, r6, ip
 8000bc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc4:	fb06 f10e 	mul.w	r1, r6, lr
 8000bc8:	4299      	cmp	r1, r3
 8000bca:	d909      	bls.n	8000be0 <__udivmoddi4+0x60>
 8000bcc:	18fb      	adds	r3, r7, r3
 8000bce:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bd2:	f080 8119 	bcs.w	8000e08 <__udivmoddi4+0x288>
 8000bd6:	4299      	cmp	r1, r3
 8000bd8:	f240 8116 	bls.w	8000e08 <__udivmoddi4+0x288>
 8000bdc:	3e02      	subs	r6, #2
 8000bde:	443b      	add	r3, r7
 8000be0:	1a5b      	subs	r3, r3, r1
 8000be2:	b2a4      	uxth	r4, r4
 8000be4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000be8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bf4:	45a6      	cmp	lr, r4
 8000bf6:	d909      	bls.n	8000c0c <__udivmoddi4+0x8c>
 8000bf8:	193c      	adds	r4, r7, r4
 8000bfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bfe:	f080 8105 	bcs.w	8000e0c <__udivmoddi4+0x28c>
 8000c02:	45a6      	cmp	lr, r4
 8000c04:	f240 8102 	bls.w	8000e0c <__udivmoddi4+0x28c>
 8000c08:	3802      	subs	r0, #2
 8000c0a:	443c      	add	r4, r7
 8000c0c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c10:	eba4 040e 	sub.w	r4, r4, lr
 8000c14:	2600      	movs	r6, #0
 8000c16:	b11d      	cbz	r5, 8000c20 <__udivmoddi4+0xa0>
 8000c18:	40d4      	lsrs	r4, r2
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c20:	4631      	mov	r1, r6
 8000c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c26:	b902      	cbnz	r2, 8000c2a <__udivmoddi4+0xaa>
 8000c28:	deff      	udf	#255	; 0xff
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	2a00      	cmp	r2, #0
 8000c30:	d150      	bne.n	8000cd4 <__udivmoddi4+0x154>
 8000c32:	1bcb      	subs	r3, r1, r7
 8000c34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c38:	fa1f f887 	uxth.w	r8, r7
 8000c3c:	2601      	movs	r6, #1
 8000c3e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c42:	0c21      	lsrs	r1, r4, #16
 8000c44:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c4c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c50:	428b      	cmp	r3, r1
 8000c52:	d907      	bls.n	8000c64 <__udivmoddi4+0xe4>
 8000c54:	1879      	adds	r1, r7, r1
 8000c56:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c5a:	d202      	bcs.n	8000c62 <__udivmoddi4+0xe2>
 8000c5c:	428b      	cmp	r3, r1
 8000c5e:	f200 80e9 	bhi.w	8000e34 <__udivmoddi4+0x2b4>
 8000c62:	4684      	mov	ip, r0
 8000c64:	1ac9      	subs	r1, r1, r3
 8000c66:	b2a3      	uxth	r3, r4
 8000c68:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c6c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c70:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c74:	fb08 f800 	mul.w	r8, r8, r0
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	d907      	bls.n	8000c8c <__udivmoddi4+0x10c>
 8000c7c:	193c      	adds	r4, r7, r4
 8000c7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c82:	d202      	bcs.n	8000c8a <__udivmoddi4+0x10a>
 8000c84:	45a0      	cmp	r8, r4
 8000c86:	f200 80d9 	bhi.w	8000e3c <__udivmoddi4+0x2bc>
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	eba4 0408 	sub.w	r4, r4, r8
 8000c90:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c94:	e7bf      	b.n	8000c16 <__udivmoddi4+0x96>
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d909      	bls.n	8000cae <__udivmoddi4+0x12e>
 8000c9a:	2d00      	cmp	r5, #0
 8000c9c:	f000 80b1 	beq.w	8000e02 <__udivmoddi4+0x282>
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca6:	4630      	mov	r0, r6
 8000ca8:	4631      	mov	r1, r6
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	fab3 f683 	clz	r6, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d14a      	bne.n	8000d4c <__udivmoddi4+0x1cc>
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d302      	bcc.n	8000cc0 <__udivmoddi4+0x140>
 8000cba:	4282      	cmp	r2, r0
 8000cbc:	f200 80b8 	bhi.w	8000e30 <__udivmoddi4+0x2b0>
 8000cc0:	1a84      	subs	r4, r0, r2
 8000cc2:	eb61 0103 	sbc.w	r1, r1, r3
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	468c      	mov	ip, r1
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	d0a8      	beq.n	8000c20 <__udivmoddi4+0xa0>
 8000cce:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cd2:	e7a5      	b.n	8000c20 <__udivmoddi4+0xa0>
 8000cd4:	f1c2 0320 	rsb	r3, r2, #32
 8000cd8:	fa20 f603 	lsr.w	r6, r0, r3
 8000cdc:	4097      	lsls	r7, r2
 8000cde:	fa01 f002 	lsl.w	r0, r1, r2
 8000ce2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce6:	40d9      	lsrs	r1, r3
 8000ce8:	4330      	orrs	r0, r6
 8000cea:	0c03      	lsrs	r3, r0, #16
 8000cec:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cf0:	fa1f f887 	uxth.w	r8, r7
 8000cf4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f108 	mul.w	r1, r6, r8
 8000d00:	4299      	cmp	r1, r3
 8000d02:	fa04 f402 	lsl.w	r4, r4, r2
 8000d06:	d909      	bls.n	8000d1c <__udivmoddi4+0x19c>
 8000d08:	18fb      	adds	r3, r7, r3
 8000d0a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d0e:	f080 808d 	bcs.w	8000e2c <__udivmoddi4+0x2ac>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 808a 	bls.w	8000e2c <__udivmoddi4+0x2ac>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	443b      	add	r3, r7
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b281      	uxth	r1, r0
 8000d20:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d24:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d2c:	fb00 f308 	mul.w	r3, r0, r8
 8000d30:	428b      	cmp	r3, r1
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x1c4>
 8000d34:	1879      	adds	r1, r7, r1
 8000d36:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d3a:	d273      	bcs.n	8000e24 <__udivmoddi4+0x2a4>
 8000d3c:	428b      	cmp	r3, r1
 8000d3e:	d971      	bls.n	8000e24 <__udivmoddi4+0x2a4>
 8000d40:	3802      	subs	r0, #2
 8000d42:	4439      	add	r1, r7
 8000d44:	1acb      	subs	r3, r1, r3
 8000d46:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d4a:	e778      	b.n	8000c3e <__udivmoddi4+0xbe>
 8000d4c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d50:	fa03 f406 	lsl.w	r4, r3, r6
 8000d54:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d58:	431c      	orrs	r4, r3
 8000d5a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d62:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d66:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d6a:	431f      	orrs	r7, r3
 8000d6c:	0c3b      	lsrs	r3, r7, #16
 8000d6e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d72:	fa1f f884 	uxth.w	r8, r4
 8000d76:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d7a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d7e:	fb09 fa08 	mul.w	sl, r9, r8
 8000d82:	458a      	cmp	sl, r1
 8000d84:	fa02 f206 	lsl.w	r2, r2, r6
 8000d88:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8c:	d908      	bls.n	8000da0 <__udivmoddi4+0x220>
 8000d8e:	1861      	adds	r1, r4, r1
 8000d90:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d94:	d248      	bcs.n	8000e28 <__udivmoddi4+0x2a8>
 8000d96:	458a      	cmp	sl, r1
 8000d98:	d946      	bls.n	8000e28 <__udivmoddi4+0x2a8>
 8000d9a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d9e:	4421      	add	r1, r4
 8000da0:	eba1 010a 	sub.w	r1, r1, sl
 8000da4:	b2bf      	uxth	r7, r7
 8000da6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000daa:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dae:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000db2:	fb00 f808 	mul.w	r8, r0, r8
 8000db6:	45b8      	cmp	r8, r7
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x24a>
 8000dba:	19e7      	adds	r7, r4, r7
 8000dbc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc0:	d22e      	bcs.n	8000e20 <__udivmoddi4+0x2a0>
 8000dc2:	45b8      	cmp	r8, r7
 8000dc4:	d92c      	bls.n	8000e20 <__udivmoddi4+0x2a0>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4427      	add	r7, r4
 8000dca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dce:	eba7 0708 	sub.w	r7, r7, r8
 8000dd2:	fba0 8902 	umull	r8, r9, r0, r2
 8000dd6:	454f      	cmp	r7, r9
 8000dd8:	46c6      	mov	lr, r8
 8000dda:	4649      	mov	r1, r9
 8000ddc:	d31a      	bcc.n	8000e14 <__udivmoddi4+0x294>
 8000dde:	d017      	beq.n	8000e10 <__udivmoddi4+0x290>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x27a>
 8000de2:	ebb3 020e 	subs.w	r2, r3, lr
 8000de6:	eb67 0701 	sbc.w	r7, r7, r1
 8000dea:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dee:	40f2      	lsrs	r2, r6
 8000df0:	ea4c 0202 	orr.w	r2, ip, r2
 8000df4:	40f7      	lsrs	r7, r6
 8000df6:	e9c5 2700 	strd	r2, r7, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	462e      	mov	r6, r5
 8000e04:	4628      	mov	r0, r5
 8000e06:	e70b      	b.n	8000c20 <__udivmoddi4+0xa0>
 8000e08:	4606      	mov	r6, r0
 8000e0a:	e6e9      	b.n	8000be0 <__udivmoddi4+0x60>
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	e6fd      	b.n	8000c0c <__udivmoddi4+0x8c>
 8000e10:	4543      	cmp	r3, r8
 8000e12:	d2e5      	bcs.n	8000de0 <__udivmoddi4+0x260>
 8000e14:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e18:	eb69 0104 	sbc.w	r1, r9, r4
 8000e1c:	3801      	subs	r0, #1
 8000e1e:	e7df      	b.n	8000de0 <__udivmoddi4+0x260>
 8000e20:	4608      	mov	r0, r1
 8000e22:	e7d2      	b.n	8000dca <__udivmoddi4+0x24a>
 8000e24:	4660      	mov	r0, ip
 8000e26:	e78d      	b.n	8000d44 <__udivmoddi4+0x1c4>
 8000e28:	4681      	mov	r9, r0
 8000e2a:	e7b9      	b.n	8000da0 <__udivmoddi4+0x220>
 8000e2c:	4666      	mov	r6, ip
 8000e2e:	e775      	b.n	8000d1c <__udivmoddi4+0x19c>
 8000e30:	4630      	mov	r0, r6
 8000e32:	e74a      	b.n	8000cca <__udivmoddi4+0x14a>
 8000e34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e38:	4439      	add	r1, r7
 8000e3a:	e713      	b.n	8000c64 <__udivmoddi4+0xe4>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	443c      	add	r4, r7
 8000e40:	e724      	b.n	8000c8c <__udivmoddi4+0x10c>
 8000e42:	bf00      	nop

08000e44 <__aeabi_idiv0>:
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop

08000e48 <Create_Matrix>:
}Matrix;

Matrix A, C, R, Q, x_k0, x_k1, z_k, xp_k, pp_k, p_k0, p_k1, A_T, C_T, y_k, s_k, s_k_inv, K, I, test;

Matrix Create_Matrix(int rows, int cols, float b[9])
{
 8000e48:	b4b0      	push	{r4, r5, r7}
 8000e4a:	b095      	sub	sp, #84	; 0x54
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
 8000e54:	603b      	str	r3, [r7, #0]
	Matrix a;
	a.rows = rows;
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	637b      	str	r3, [r7, #52]	; 0x34
	a.cols = cols;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	63bb      	str	r3, [r7, #56]	; 0x38

	for (int i = 0; i < 3; i++)
 8000e5e:	2300      	movs	r3, #0
 8000e60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e62:	e019      	b.n	8000e98 <Create_Matrix+0x50>
	{
		for (int j = 0; j < 3; j++)
 8000e64:	2300      	movs	r3, #0
 8000e66:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e68:	e010      	b.n	8000e8c <Create_Matrix+0x44>
		{
			a.data[i][j] = 0;
 8000e6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	4413      	add	r3, r2
 8000e72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000e74:	4413      	add	r3, r2
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000e7c:	4413      	add	r3, r2
 8000e7e:	3b40      	subs	r3, #64	; 0x40
 8000e80:	f04f 0200 	mov.w	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 3; j++)
 8000e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e88:	3301      	adds	r3, #1
 8000e8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	ddeb      	ble.n	8000e6a <Create_Matrix+0x22>
	for (int i = 0; i < 3; i++)
 8000e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e94:	3301      	adds	r3, #1
 8000e96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	dde2      	ble.n	8000e64 <Create_Matrix+0x1c>
		}
	}

	int n = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	647b      	str	r3, [r7, #68]	; 0x44
	for (int i = 0; i < rows; i++)
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	643b      	str	r3, [r7, #64]	; 0x40
 8000ea6:	e02e      	b.n	8000f06 <Create_Matrix+0xbe>
	{
		for (int j = 0; j < cols; j++)
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000eac:	e024      	b.n	8000ef8 <Create_Matrix+0xb0>
		{
			a.data[i][j] = 0;
 8000eae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	4413      	add	r3, r2
 8000eb6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000eb8:	4413      	add	r3, r2
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000ec0:	4413      	add	r3, r2
 8000ec2:	3b40      	subs	r3, #64	; 0x40
 8000ec4:	f04f 0200 	mov.w	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
			a.data[i][j] = b[n];
 8000eca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	683a      	ldr	r2, [r7, #0]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	6819      	ldr	r1, [r3, #0]
 8000ed4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	4413      	add	r3, r2
 8000edc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000ede:	4413      	add	r3, r2
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000ee6:	4413      	add	r3, r2
 8000ee8:	3b40      	subs	r3, #64	; 0x40
 8000eea:	6019      	str	r1, [r3, #0]
			n++;
 8000eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000eee:	3301      	adds	r3, #1
 8000ef0:	647b      	str	r3, [r7, #68]	; 0x44
		for (int j = 0; j < cols; j++)
 8000ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ef8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	dbd6      	blt.n	8000eae <Create_Matrix+0x66>
	for (int i = 0; i < rows; i++)
 8000f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f02:	3301      	adds	r3, #1
 8000f04:	643b      	str	r3, [r7, #64]	; 0x40
 8000f06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	dbcc      	blt.n	8000ea8 <Create_Matrix+0x60>
		}
	}
	return a;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	461d      	mov	r5, r3
 8000f12:	f107 0410 	add.w	r4, r7, #16
 8000f16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f1e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000f22:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000f26:	68f8      	ldr	r0, [r7, #12]
 8000f28:	3754      	adds	r7, #84	; 0x54
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bcb0      	pop	{r4, r5, r7}
 8000f2e:	4770      	bx	lr

08000f30 <Multiply>:

Matrix Multiply(Matrix a, Matrix b)
{
 8000f30:	b084      	sub	sp, #16
 8000f32:	b4b0      	push	{r4, r5, r7}
 8000f34:	b093      	sub	sp, #76	; 0x4c
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8000f3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Matrix c;
	c.rows = a.rows;
 8000f42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f46:	62fb      	str	r3, [r7, #44]	; 0x2c
	c.cols = b.cols;
 8000f48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000f4c:	633b      	str	r3, [r7, #48]	; 0x30
	for (int i = 0; i < 3; i++)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	647b      	str	r3, [r7, #68]	; 0x44
 8000f52:	e019      	b.n	8000f88 <Multiply+0x58>
	{
		for (int j = 0; j < 3; j++)
 8000f54:	2300      	movs	r3, #0
 8000f56:	643b      	str	r3, [r7, #64]	; 0x40
 8000f58:	e010      	b.n	8000f7c <Multiply+0x4c>
		{
			c.data[i][j] = 0;
 8000f5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	4413      	add	r3, r2
 8000f62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000f64:	4413      	add	r3, r2
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000f6c:	4413      	add	r3, r2
 8000f6e:	3b40      	subs	r3, #64	; 0x40
 8000f70:	f04f 0200 	mov.w	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 3; j++)
 8000f76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f78:	3301      	adds	r3, #1
 8000f7a:	643b      	str	r3, [r7, #64]	; 0x40
 8000f7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	ddeb      	ble.n	8000f5a <Multiply+0x2a>
	for (int i = 0; i < 3; i++)
 8000f82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f84:	3301      	adds	r3, #1
 8000f86:	647b      	str	r3, [r7, #68]	; 0x44
 8000f88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	dde2      	ble.n	8000f54 <Multiply+0x24>
		}
	}

	for (int i = 0; i < a.rows; i++)
 8000f8e:	2300      	movs	r3, #0
 8000f90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f92:	e050      	b.n	8001036 <Multiply+0x106>
	{
		for (int j = 0; j < b.cols; j++)
 8000f94:	2300      	movs	r3, #0
 8000f96:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f98:	e045      	b.n	8001026 <Multiply+0xf6>
		{
			for (int k = 0; k < b.rows; k++)
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8000f9e:	e03a      	b.n	8001016 <Multiply+0xe6>
			{
				c.data[i][j] += a.data[i][k] * b.data[k][j];
 8000fa0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	4413      	add	r3, r2
 8000fa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000faa:	4413      	add	r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000fb2:	4413      	add	r3, r2
 8000fb4:	3b40      	subs	r3, #64	; 0x40
 8000fb6:	ed93 7a00 	vldr	s14, [r3]
 8000fba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	4413      	add	r3, r2
 8000fc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000fc4:	4413      	add	r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000fcc:	4413      	add	r3, r2
 8000fce:	3304      	adds	r3, #4
 8000fd0:	edd3 6a00 	vldr	s13, [r3]
 8000fd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	4413      	add	r3, r2
 8000fdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000fde:	4413      	add	r3, r2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000fe6:	4413      	add	r3, r2
 8000fe8:	3330      	adds	r3, #48	; 0x30
 8000fea:	edd3 7a00 	vldr	s15, [r3]
 8000fee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ff6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	4413      	add	r3, r2
 8000ffe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001000:	4413      	add	r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001008:	4413      	add	r3, r2
 800100a:	3b40      	subs	r3, #64	; 0x40
 800100c:	edc3 7a00 	vstr	s15, [r3]
			for (int k = 0; k < b.rows; k++)
 8001010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001012:	3301      	adds	r3, #1
 8001014:	637b      	str	r3, [r7, #52]	; 0x34
 8001016:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800101a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800101c:	429a      	cmp	r2, r3
 800101e:	dbbf      	blt.n	8000fa0 <Multiply+0x70>
		for (int j = 0; j < b.cols; j++)
 8001020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001022:	3301      	adds	r3, #1
 8001024:	63bb      	str	r3, [r7, #56]	; 0x38
 8001026:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800102a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800102c:	429a      	cmp	r2, r3
 800102e:	dbb4      	blt.n	8000f9a <Multiply+0x6a>
	for (int i = 0; i < a.rows; i++)
 8001030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001032:	3301      	adds	r3, #1
 8001034:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001036:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800103a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800103c:	429a      	cmp	r2, r3
 800103e:	dba9      	blt.n	8000f94 <Multiply+0x64>
			}
		}
	}
	return c;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	461d      	mov	r5, r3
 8001044:	f107 0408 	add.w	r4, r7, #8
 8001048:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800104a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800104c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800104e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001050:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001054:	e885 0007 	stmia.w	r5, {r0, r1, r2}

}
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	374c      	adds	r7, #76	; 0x4c
 800105c:	46bd      	mov	sp, r7
 800105e:	bcb0      	pop	{r4, r5, r7}
 8001060:	b004      	add	sp, #16
 8001062:	4770      	bx	lr

08001064 <Sum>:

Matrix Sum(Matrix a, Matrix b)
{
 8001064:	b084      	sub	sp, #16
 8001066:	b4b0      	push	{r4, r5, r7}
 8001068:	b093      	sub	sp, #76	; 0x4c
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
 800106e:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8001072:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Matrix c;
	c.rows = a.rows;
 8001076:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800107a:	633b      	str	r3, [r7, #48]	; 0x30
	c.cols = b.cols;
 800107c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001080:	637b      	str	r3, [r7, #52]	; 0x34

	for (int i = 0; i < 3; i++)
 8001082:	2300      	movs	r3, #0
 8001084:	647b      	str	r3, [r7, #68]	; 0x44
 8001086:	e019      	b.n	80010bc <Sum+0x58>
	{
		for (int j = 0; j < 3; j++)
 8001088:	2300      	movs	r3, #0
 800108a:	643b      	str	r3, [r7, #64]	; 0x40
 800108c:	e010      	b.n	80010b0 <Sum+0x4c>
		{
			c.data[i][j] = 0;
 800108e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001090:	4613      	mov	r3, r2
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	4413      	add	r3, r2
 8001096:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001098:	4413      	add	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80010a0:	4413      	add	r3, r2
 80010a2:	3b3c      	subs	r3, #60	; 0x3c
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 3; j++)
 80010aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010ac:	3301      	adds	r3, #1
 80010ae:	643b      	str	r3, [r7, #64]	; 0x40
 80010b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	ddeb      	ble.n	800108e <Sum+0x2a>
	for (int i = 0; i < 3; i++)
 80010b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010b8:	3301      	adds	r3, #1
 80010ba:	647b      	str	r3, [r7, #68]	; 0x44
 80010bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010be:	2b02      	cmp	r3, #2
 80010c0:	dde2      	ble.n	8001088 <Sum+0x24>
		}
	}

	for (int i = 0; i < a.rows; i++)
 80010c2:	2300      	movs	r3, #0
 80010c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010c6:	e036      	b.n	8001136 <Sum+0xd2>
	{
		for (int j = 0; j < a.cols; j++)
 80010c8:	2300      	movs	r3, #0
 80010ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80010cc:	e02b      	b.n	8001126 <Sum+0xc2>
		{
			c.data[i][j] = a.data[i][j] + b.data[i][j];
 80010ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80010d0:	4613      	mov	r3, r2
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	4413      	add	r3, r2
 80010d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010d8:	4413      	add	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80010e0:	4413      	add	r3, r2
 80010e2:	3304      	adds	r3, #4
 80010e4:	ed93 7a00 	vldr	s14, [r3]
 80010e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80010ea:	4613      	mov	r3, r2
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	4413      	add	r3, r2
 80010f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010f2:	4413      	add	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80010fa:	4413      	add	r3, r2
 80010fc:	3330      	adds	r3, #48	; 0x30
 80010fe:	edd3 7a00 	vldr	s15, [r3]
 8001102:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001106:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001108:	4613      	mov	r3, r2
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	4413      	add	r3, r2
 800110e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001110:	4413      	add	r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001118:	4413      	add	r3, r2
 800111a:	3b3c      	subs	r3, #60	; 0x3c
 800111c:	edc3 7a00 	vstr	s15, [r3]
		for (int j = 0; j < a.cols; j++)
 8001120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001122:	3301      	adds	r3, #1
 8001124:	63bb      	str	r3, [r7, #56]	; 0x38
 8001126:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800112a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800112c:	429a      	cmp	r2, r3
 800112e:	dbce      	blt.n	80010ce <Sum+0x6a>
	for (int i = 0; i < a.rows; i++)
 8001130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001132:	3301      	adds	r3, #1
 8001134:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001136:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800113a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800113c:	429a      	cmp	r2, r3
 800113e:	dbc3      	blt.n	80010c8 <Sum+0x64>
		}
	}

	return c;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	461d      	mov	r5, r3
 8001144:	f107 040c 	add.w	r4, r7, #12
 8001148:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800114a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800114c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800114e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001150:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001154:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	374c      	adds	r7, #76	; 0x4c
 800115c:	46bd      	mov	sp, r7
 800115e:	bcb0      	pop	{r4, r5, r7}
 8001160:	b004      	add	sp, #16
 8001162:	4770      	bx	lr

08001164 <Minus>:

Matrix Minus(Matrix a, Matrix b)
{
 8001164:	b084      	sub	sp, #16
 8001166:	b4b0      	push	{r4, r5, r7}
 8001168:	b093      	sub	sp, #76	; 0x4c
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
 800116e:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8001172:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Matrix c;
	c.rows = a.rows;
 8001176:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800117a:	633b      	str	r3, [r7, #48]	; 0x30
	c.cols = b.cols;
 800117c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001180:	637b      	str	r3, [r7, #52]	; 0x34

	for (int i = 0; i < 3; i++)
 8001182:	2300      	movs	r3, #0
 8001184:	647b      	str	r3, [r7, #68]	; 0x44
 8001186:	e019      	b.n	80011bc <Minus+0x58>
	{
		for (int j = 0; j < 3; j++)
 8001188:	2300      	movs	r3, #0
 800118a:	643b      	str	r3, [r7, #64]	; 0x40
 800118c:	e010      	b.n	80011b0 <Minus+0x4c>
		{
			c.data[i][j] = 0;
 800118e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001190:	4613      	mov	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4413      	add	r3, r2
 8001196:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001198:	4413      	add	r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80011a0:	4413      	add	r3, r2
 80011a2:	3b3c      	subs	r3, #60	; 0x3c
 80011a4:	f04f 0200 	mov.w	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 3; j++)
 80011aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011ac:	3301      	adds	r3, #1
 80011ae:	643b      	str	r3, [r7, #64]	; 0x40
 80011b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	ddeb      	ble.n	800118e <Minus+0x2a>
	for (int i = 0; i < 3; i++)
 80011b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011b8:	3301      	adds	r3, #1
 80011ba:	647b      	str	r3, [r7, #68]	; 0x44
 80011bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011be:	2b02      	cmp	r3, #2
 80011c0:	dde2      	ble.n	8001188 <Minus+0x24>
		}
	}

	for (int i = 0; i < a.rows; i++)
 80011c2:	2300      	movs	r3, #0
 80011c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011c6:	e036      	b.n	8001236 <Minus+0xd2>
	{
		for (int j = 0; j < a.cols; j++)
 80011c8:	2300      	movs	r3, #0
 80011ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80011cc:	e02b      	b.n	8001226 <Minus+0xc2>
		{
			c.data[i][j] = a.data[i][j] - b.data[i][j];
 80011ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80011d0:	4613      	mov	r3, r2
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	4413      	add	r3, r2
 80011d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80011d8:	4413      	add	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80011e0:	4413      	add	r3, r2
 80011e2:	3304      	adds	r3, #4
 80011e4:	ed93 7a00 	vldr	s14, [r3]
 80011e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80011ea:	4613      	mov	r3, r2
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	4413      	add	r3, r2
 80011f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80011f2:	4413      	add	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80011fa:	4413      	add	r3, r2
 80011fc:	3330      	adds	r3, #48	; 0x30
 80011fe:	edd3 7a00 	vldr	s15, [r3]
 8001202:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001206:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001208:	4613      	mov	r3, r2
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	4413      	add	r3, r2
 800120e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001210:	4413      	add	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001218:	4413      	add	r3, r2
 800121a:	3b3c      	subs	r3, #60	; 0x3c
 800121c:	edc3 7a00 	vstr	s15, [r3]
		for (int j = 0; j < a.cols; j++)
 8001220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001222:	3301      	adds	r3, #1
 8001224:	63bb      	str	r3, [r7, #56]	; 0x38
 8001226:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800122a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800122c:	429a      	cmp	r2, r3
 800122e:	dbce      	blt.n	80011ce <Minus+0x6a>
	for (int i = 0; i < a.rows; i++)
 8001230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001232:	3301      	adds	r3, #1
 8001234:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001236:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800123a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800123c:	429a      	cmp	r2, r3
 800123e:	dbc3      	blt.n	80011c8 <Minus+0x64>
		}
	}

	return c;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	461d      	mov	r5, r3
 8001244:	f107 040c 	add.w	r4, r7, #12
 8001248:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800124a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800124c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800124e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001250:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001254:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	374c      	adds	r7, #76	; 0x4c
 800125c:	46bd      	mov	sp, r7
 800125e:	bcb0      	pop	{r4, r5, r7}
 8001260:	b004      	add	sp, #16
 8001262:	4770      	bx	lr

08001264 <Transpose>:

Matrix Transpose(Matrix a)
{
 8001264:	b084      	sub	sp, #16
 8001266:	b4b0      	push	{r4, r5, r7}
 8001268:	b093      	sub	sp, #76	; 0x4c
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
 800126e:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8001272:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Matrix c;
	c.rows = a.rows;
 8001276:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800127a:	633b      	str	r3, [r7, #48]	; 0x30
	c.cols = a.cols;
 800127c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001280:	637b      	str	r3, [r7, #52]	; 0x34

	for (int i = 0; i < 3; i++)
 8001282:	2300      	movs	r3, #0
 8001284:	647b      	str	r3, [r7, #68]	; 0x44
 8001286:	e019      	b.n	80012bc <Transpose+0x58>
	{
		for (int j = 0; j < 3; j++)
 8001288:	2300      	movs	r3, #0
 800128a:	643b      	str	r3, [r7, #64]	; 0x40
 800128c:	e010      	b.n	80012b0 <Transpose+0x4c>
		{
			c.data[i][j] = 0;
 800128e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001290:	4613      	mov	r3, r2
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	4413      	add	r3, r2
 8001296:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001298:	4413      	add	r3, r2
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80012a0:	4413      	add	r3, r2
 80012a2:	3b3c      	subs	r3, #60	; 0x3c
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 3; j++)
 80012aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012ac:	3301      	adds	r3, #1
 80012ae:	643b      	str	r3, [r7, #64]	; 0x40
 80012b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	ddeb      	ble.n	800128e <Transpose+0x2a>
	for (int i = 0; i < 3; i++)
 80012b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012b8:	3301      	adds	r3, #1
 80012ba:	647b      	str	r3, [r7, #68]	; 0x44
 80012bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012be:	2b02      	cmp	r3, #2
 80012c0:	dde2      	ble.n	8001288 <Transpose+0x24>
		}
	}

	for (int i = 0; i < a.rows; i++)
 80012c2:	2300      	movs	r3, #0
 80012c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012c6:	e025      	b.n	8001314 <Transpose+0xb0>
	{
		for (int j = 0; j < a.cols; j++)
 80012c8:	2300      	movs	r3, #0
 80012ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80012cc:	e01a      	b.n	8001304 <Transpose+0xa0>
		{
			c.data[i][j] = a.data[j][i];
 80012ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80012d0:	4613      	mov	r3, r2
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	4413      	add	r3, r2
 80012d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80012d8:	4413      	add	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80012e0:	4413      	add	r3, r2
 80012e2:	3304      	adds	r3, #4
 80012e4:	6819      	ldr	r1, [r3, #0]
 80012e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80012e8:	4613      	mov	r3, r2
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	4413      	add	r3, r2
 80012ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80012f0:	4413      	add	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80012f8:	4413      	add	r3, r2
 80012fa:	3b3c      	subs	r3, #60	; 0x3c
 80012fc:	6019      	str	r1, [r3, #0]
		for (int j = 0; j < a.cols; j++)
 80012fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001300:	3301      	adds	r3, #1
 8001302:	63bb      	str	r3, [r7, #56]	; 0x38
 8001304:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001308:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800130a:	429a      	cmp	r2, r3
 800130c:	dbdf      	blt.n	80012ce <Transpose+0x6a>
	for (int i = 0; i < a.rows; i++)
 800130e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001310:	3301      	adds	r3, #1
 8001312:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001314:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001318:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800131a:	429a      	cmp	r2, r3
 800131c:	dbd4      	blt.n	80012c8 <Transpose+0x64>
		}
	}
	return c;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	461d      	mov	r5, r3
 8001322:	f107 040c 	add.w	r4, r7, #12
 8001326:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001328:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800132a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800132c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800132e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001332:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	374c      	adds	r7, #76	; 0x4c
 800133a:	46bd      	mov	sp, r7
 800133c:	bcb0      	pop	{r4, r5, r7}
 800133e:	b004      	add	sp, #16
 8001340:	4770      	bx	lr

08001342 <Inverse>:

Matrix Inverse(Matrix a)
{
 8001342:	b084      	sub	sp, #16
 8001344:	b4b0      	push	{r4, r5, r7}
 8001346:	b093      	sub	sp, #76	; 0x4c
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8001350:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//this function is for only 1x1 matrix
	Matrix c;
	c.rows = a.rows;
 8001354:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001358:	633b      	str	r3, [r7, #48]	; 0x30
	c.cols = a.cols;
 800135a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800135e:	637b      	str	r3, [r7, #52]	; 0x34

	for (int i = 0; i < 3; i++)
 8001360:	2300      	movs	r3, #0
 8001362:	647b      	str	r3, [r7, #68]	; 0x44
 8001364:	e019      	b.n	800139a <Inverse+0x58>
	{
		for (int j = 0; j < 3; j++)
 8001366:	2300      	movs	r3, #0
 8001368:	643b      	str	r3, [r7, #64]	; 0x40
 800136a:	e010      	b.n	800138e <Inverse+0x4c>
		{
			c.data[i][j] = 0;
 800136c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800136e:	4613      	mov	r3, r2
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	4413      	add	r3, r2
 8001374:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001376:	4413      	add	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800137e:	4413      	add	r3, r2
 8001380:	3b3c      	subs	r3, #60	; 0x3c
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 3; j++)
 8001388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800138a:	3301      	adds	r3, #1
 800138c:	643b      	str	r3, [r7, #64]	; 0x40
 800138e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001390:	2b02      	cmp	r3, #2
 8001392:	ddeb      	ble.n	800136c <Inverse+0x2a>
	for (int i = 0; i < 3; i++)
 8001394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001396:	3301      	adds	r3, #1
 8001398:	647b      	str	r3, [r7, #68]	; 0x44
 800139a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800139c:	2b02      	cmp	r3, #2
 800139e:	dde2      	ble.n	8001366 <Inverse+0x24>
		}
	}

	for (int i = 0; i < a.rows; i++)
 80013a0:	2300      	movs	r3, #0
 80013a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013a4:	e02b      	b.n	80013fe <Inverse+0xbc>
	{
		for (int j = 0; j < a.cols; j++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80013aa:	e020      	b.n	80013ee <Inverse+0xac>
		{
			c.data[i][j] = 1/(a.data[i][j]);
 80013ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80013ae:	4613      	mov	r3, r2
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	4413      	add	r3, r2
 80013b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80013b6:	4413      	add	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80013be:	4413      	add	r3, r2
 80013c0:	3304      	adds	r3, #4
 80013c2:	ed93 7a00 	vldr	s14, [r3]
 80013c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80013ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80013d0:	4613      	mov	r3, r2
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	4413      	add	r3, r2
 80013d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80013d8:	4413      	add	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80013e0:	4413      	add	r3, r2
 80013e2:	3b3c      	subs	r3, #60	; 0x3c
 80013e4:	edc3 7a00 	vstr	s15, [r3]
		for (int j = 0; j < a.cols; j++)
 80013e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013ea:	3301      	adds	r3, #1
 80013ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80013ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80013f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80013f4:	429a      	cmp	r2, r3
 80013f6:	dbd9      	blt.n	80013ac <Inverse+0x6a>
	for (int i = 0; i < a.rows; i++)
 80013f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013fa:	3301      	adds	r3, #1
 80013fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001402:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001404:	429a      	cmp	r2, r3
 8001406:	dbce      	blt.n	80013a6 <Inverse+0x64>
		}
	}
	return c;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	461d      	mov	r5, r3
 800140c:	f107 040c 	add.w	r4, r7, #12
 8001410:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001412:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001414:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001416:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001418:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800141c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	374c      	adds	r7, #76	; 0x4c
 8001424:	46bd      	mov	sp, r7
 8001426:	bcb0      	pop	{r4, r5, r7}
 8001428:	b004      	add	sp, #16
 800142a:	4770      	bx	lr

0800142c <Store>:

Matrix Store(Matrix a)
{
 800142c:	b084      	sub	sp, #16
 800142e:	b4b0      	push	{r4, r5, r7}
 8001430:	b093      	sub	sp, #76	; 0x4c
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
 8001436:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800143a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Matrix c;
	c.rows = a.rows;
 800143e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001442:	633b      	str	r3, [r7, #48]	; 0x30
	c.cols = a.cols;
 8001444:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001448:	637b      	str	r3, [r7, #52]	; 0x34

	for (int i = 0; i < 3; i++)
 800144a:	2300      	movs	r3, #0
 800144c:	647b      	str	r3, [r7, #68]	; 0x44
 800144e:	e019      	b.n	8001484 <Store+0x58>
	{
		for (int j = 0; j < 3; j++)
 8001450:	2300      	movs	r3, #0
 8001452:	643b      	str	r3, [r7, #64]	; 0x40
 8001454:	e010      	b.n	8001478 <Store+0x4c>
		{
			c.data[i][j] = 0;
 8001456:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001458:	4613      	mov	r3, r2
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	4413      	add	r3, r2
 800145e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001460:	4413      	add	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001468:	4413      	add	r3, r2
 800146a:	3b3c      	subs	r3, #60	; 0x3c
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 3; j++)
 8001472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001474:	3301      	adds	r3, #1
 8001476:	643b      	str	r3, [r7, #64]	; 0x40
 8001478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800147a:	2b02      	cmp	r3, #2
 800147c:	ddeb      	ble.n	8001456 <Store+0x2a>
	for (int i = 0; i < 3; i++)
 800147e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001480:	3301      	adds	r3, #1
 8001482:	647b      	str	r3, [r7, #68]	; 0x44
 8001484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001486:	2b02      	cmp	r3, #2
 8001488:	dde2      	ble.n	8001450 <Store+0x24>
		}
	}

	for (int i = 0; i < a.rows; i++)
 800148a:	2300      	movs	r3, #0
 800148c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800148e:	e025      	b.n	80014dc <Store+0xb0>
	{
		for (int j = 0; j < a.cols; j++)
 8001490:	2300      	movs	r3, #0
 8001492:	63bb      	str	r3, [r7, #56]	; 0x38
 8001494:	e01a      	b.n	80014cc <Store+0xa0>
		{
			c.data[i][j] = (a.data[i][j]);
 8001496:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001498:	4613      	mov	r3, r2
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	4413      	add	r3, r2
 800149e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80014a0:	4413      	add	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80014a8:	4413      	add	r3, r2
 80014aa:	3304      	adds	r3, #4
 80014ac:	6819      	ldr	r1, [r3, #0]
 80014ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80014b0:	4613      	mov	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	4413      	add	r3, r2
 80014b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80014b8:	4413      	add	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80014c0:	4413      	add	r3, r2
 80014c2:	3b3c      	subs	r3, #60	; 0x3c
 80014c4:	6019      	str	r1, [r3, #0]
		for (int j = 0; j < a.cols; j++)
 80014c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014c8:	3301      	adds	r3, #1
 80014ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80014cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80014d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80014d2:	429a      	cmp	r2, r3
 80014d4:	dbdf      	blt.n	8001496 <Store+0x6a>
	for (int i = 0; i < a.rows; i++)
 80014d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014d8:	3301      	adds	r3, #1
 80014da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80014e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80014e2:	429a      	cmp	r2, r3
 80014e4:	dbd4      	blt.n	8001490 <Store+0x64>
		}
	}
	return c;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	461d      	mov	r5, r3
 80014ea:	f107 040c 	add.w	r4, r7, #12
 80014ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014f6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80014fa:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	374c      	adds	r7, #76	; 0x4c
 8001502:	46bd      	mov	sp, r7
 8001504:	bcb0      	pop	{r4, r5, r7}
 8001506:	b004      	add	sp, #16
 8001508:	4770      	bx	lr
 800150a:	0000      	movs	r0, r0
 800150c:	0000      	movs	r0, r0
	...

08001510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001512:	b0c7      	sub	sp, #284	; 0x11c
 8001514:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001516:	f001 fead 	bl	8003274 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800151a:	f000 fb6d 	bl	8001bf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800151e:	f000 fd3f 	bl	8001fa0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001522:	f000 fd13 	bl	8001f4c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001526:	f000 fbcf 	bl	8001cc8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800152a:	f000 fc6d 	bl	8001e08 <MX_TIM2_Init>
  MX_TIM5_Init();
 800152e:	f000 fcbf 	bl	8001eb0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8001532:	213c      	movs	r1, #60	; 0x3c
 8001534:	48e6      	ldr	r0, [pc, #920]	; (80018d0 <main+0x3c0>)
 8001536:	f003 f895 	bl	8004664 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800153a:	2100      	movs	r1, #0
 800153c:	48e5      	ldr	r0, [pc, #916]	; (80018d4 <main+0x3c4>)
 800153e:	f002 ff3b 	bl	80043b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001542:	2104      	movs	r1, #4
 8001544:	48e3      	ldr	r0, [pc, #908]	; (80018d4 <main+0x3c4>)
 8001546:	f002 ff37 	bl	80043b8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 800154a:	48e3      	ldr	r0, [pc, #908]	; (80018d8 <main+0x3c8>)
 800154c:	f002 fe78 	bl	8004240 <HAL_TIM_Base_Start_IT>

  endtime = (2.0*t_acc) + t_constant;
 8001550:	4be2      	ldr	r3, [pc, #904]	; (80018dc <main+0x3cc>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f7fe ffa3 	bl	80004a0 <__aeabi_f2d>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	f7fe fe41 	bl	80001e4 <__adddf3>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4614      	mov	r4, r2
 8001568:	461d      	mov	r5, r3
 800156a:	4bdd      	ldr	r3, [pc, #884]	; (80018e0 <main+0x3d0>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe ff96 	bl	80004a0 <__aeabi_f2d>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4620      	mov	r0, r4
 800157a:	4629      	mov	r1, r5
 800157c:	f7fe fe32 	bl	80001e4 <__adddf3>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4610      	mov	r0, r2
 8001586:	4619      	mov	r1, r3
 8001588:	f7ff fa92 	bl	8000ab0 <__aeabi_d2f>
 800158c:	4603      	mov	r3, r0
 800158e:	4ad5      	ldr	r2, [pc, #852]	; (80018e4 <main+0x3d4>)
 8001590:	6013      	str	r3, [r2, #0]
  v_max = 2.0*theta/(t_constant + endtime);
 8001592:	4bd5      	ldr	r3, [pc, #852]	; (80018e8 <main+0x3d8>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f7fe ff82 	bl	80004a0 <__aeabi_f2d>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	f7fe fe20 	bl	80001e4 <__adddf3>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4614      	mov	r4, r2
 80015aa:	461d      	mov	r5, r3
 80015ac:	4bcc      	ldr	r3, [pc, #816]	; (80018e0 <main+0x3d0>)
 80015ae:	ed93 7a00 	vldr	s14, [r3]
 80015b2:	4bcc      	ldr	r3, [pc, #816]	; (80018e4 <main+0x3d4>)
 80015b4:	edd3 7a00 	vldr	s15, [r3]
 80015b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015bc:	ee17 0a90 	vmov	r0, s15
 80015c0:	f7fe ff6e 	bl	80004a0 <__aeabi_f2d>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4620      	mov	r0, r4
 80015ca:	4629      	mov	r1, r5
 80015cc:	f7ff f8ea 	bl	80007a4 <__aeabi_ddiv>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4610      	mov	r0, r2
 80015d6:	4619      	mov	r1, r3
 80015d8:	f7ff fa6a 	bl	8000ab0 <__aeabi_d2f>
 80015dc:	4603      	mov	r3, r0
 80015de:	4ac3      	ldr	r2, [pc, #780]	; (80018ec <main+0x3dc>)
 80015e0:	6013      	str	r3, [r2, #0]
  a = v_max/t_acc;
 80015e2:	4bc2      	ldr	r3, [pc, #776]	; (80018ec <main+0x3dc>)
 80015e4:	edd3 6a00 	vldr	s13, [r3]
 80015e8:	4bbc      	ldr	r3, [pc, #752]	; (80018dc <main+0x3cc>)
 80015ea:	ed93 7a00 	vldr	s14, [r3]
 80015ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015f2:	4bbf      	ldr	r3, [pc, #764]	; (80018f0 <main+0x3e0>)
 80015f4:	edc3 7a00 	vstr	s15, [r3]


  float dt = 1/100.0;
 80015f8:	4bbe      	ldr	r3, [pc, #760]	; (80018f4 <main+0x3e4>)
 80015fa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  float mat_a[9] = { 1, dt, (0.5 * (pow(dt,2))), 0, 1, dt, 0, 0, 1 };
 80015fe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001602:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800160a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800160e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8001612:	f7fe ff45 	bl	80004a0 <__aeabi_f2d>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	ed9f 1ba1 	vldr	d1, [pc, #644]	; 80018a0 <main+0x390>
 800161e:	ec43 2b10 	vmov	d0, r2, r3
 8001622:	f004 f94f 	bl	80058c4 <pow>
 8001626:	ec51 0b10 	vmov	r0, r1, d0
 800162a:	f04f 0200 	mov.w	r2, #0
 800162e:	4bb2      	ldr	r3, [pc, #712]	; (80018f8 <main+0x3e8>)
 8001630:	f7fe ff8e 	bl	8000550 <__aeabi_dmul>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	4610      	mov	r0, r2
 800163a:	4619      	mov	r1, r3
 800163c:	f7ff fa38 	bl	8000ab0 <__aeabi_d2f>
 8001640:	4603      	mov	r3, r0
 8001642:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001646:	f04f 0300 	mov.w	r3, #0
 800164a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800164e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001652:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800165a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800165e:	f04f 0300 	mov.w	r3, #0
 8001662:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001666:	f04f 0300 	mov.w	r3, #0
 800166a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800166e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001672:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  float mat_c[3] = { 1, 0, 0 };
 8001676:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800167a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800167e:	f04f 0300 	mov.w	r3, #0
 8001682:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001686:	f04f 0300 	mov.w	r3, #0
 800168a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  float mat_r[1] = { 0.000961807 };
 800168e:	4b9b      	ldr	r3, [pc, #620]	; (80018fc <main+0x3ec>)
 8001690:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  float eye[9] = { 1, 0, 0, 0, 1, 0, 0, 0, 1 };
 8001694:	4b9a      	ldr	r3, [pc, #616]	; (8001900 <main+0x3f0>)
 8001696:	f107 0480 	add.w	r4, r7, #128	; 0x80
 800169a:	461d      	mov	r5, r3
 800169c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800169e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016a4:	682b      	ldr	r3, [r5, #0]
 80016a6:	6023      	str	r3, [r4, #0]
  float zero[9] = { 0 };
 80016a8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016ac:	2224      	movs	r2, #36	; 0x24
 80016ae:	2100      	movs	r1, #0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f004 f8ff 	bl	80058b4 <memset>
  float var_jerk = 10;
 80016b6:	4b93      	ldr	r3, [pc, #588]	; (8001904 <main+0x3f4>)
 80016b8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  float var_theta = (pow(((1 / 6.0) * pow(dt,3)), 2))*var_jerk;
 80016bc:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 80016c0:	f7fe feee 	bl	80004a0 <__aeabi_f2d>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	ed9f 1b77 	vldr	d1, [pc, #476]	; 80018a8 <main+0x398>
 80016cc:	ec43 2b10 	vmov	d0, r2, r3
 80016d0:	f004 f8f8 	bl	80058c4 <pow>
 80016d4:	ec51 0b10 	vmov	r0, r1, d0
 80016d8:	a375      	add	r3, pc, #468	; (adr r3, 80018b0 <main+0x3a0>)
 80016da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016de:	f7fe ff37 	bl	8000550 <__aeabi_dmul>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	ec43 2b17 	vmov	d7, r2, r3
 80016ea:	ed9f 1b6d 	vldr	d1, [pc, #436]	; 80018a0 <main+0x390>
 80016ee:	eeb0 0a47 	vmov.f32	s0, s14
 80016f2:	eef0 0a67 	vmov.f32	s1, s15
 80016f6:	f004 f8e5 	bl	80058c4 <pow>
 80016fa:	ec55 4b10 	vmov	r4, r5, d0
 80016fe:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8001702:	f7fe fecd 	bl	80004a0 <__aeabi_f2d>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4620      	mov	r0, r4
 800170c:	4629      	mov	r1, r5
 800170e:	f7fe ff1f 	bl	8000550 <__aeabi_dmul>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4610      	mov	r0, r2
 8001718:	4619      	mov	r1, r3
 800171a:	f7ff f9c9 	bl	8000ab0 <__aeabi_d2f>
 800171e:	4603      	mov	r3, r0
 8001720:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  float var_omega = (pow(((1 / 2.0) * pow(dt, 2)), 2)) * var_jerk;
 8001724:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8001728:	f7fe feba 	bl	80004a0 <__aeabi_f2d>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	ed9f 1b5b 	vldr	d1, [pc, #364]	; 80018a0 <main+0x390>
 8001734:	ec43 2b10 	vmov	d0, r2, r3
 8001738:	f004 f8c4 	bl	80058c4 <pow>
 800173c:	ec51 0b10 	vmov	r0, r1, d0
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	4b6c      	ldr	r3, [pc, #432]	; (80018f8 <main+0x3e8>)
 8001746:	f7fe ff03 	bl	8000550 <__aeabi_dmul>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	ec43 2b17 	vmov	d7, r2, r3
 8001752:	ed9f 1b53 	vldr	d1, [pc, #332]	; 80018a0 <main+0x390>
 8001756:	eeb0 0a47 	vmov.f32	s0, s14
 800175a:	eef0 0a67 	vmov.f32	s1, s15
 800175e:	f004 f8b1 	bl	80058c4 <pow>
 8001762:	ec55 4b10 	vmov	r4, r5, d0
 8001766:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800176a:	f7fe fe99 	bl	80004a0 <__aeabi_f2d>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4620      	mov	r0, r4
 8001774:	4629      	mov	r1, r5
 8001776:	f7fe feeb 	bl	8000550 <__aeabi_dmul>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4610      	mov	r0, r2
 8001780:	4619      	mov	r1, r3
 8001782:	f7ff f995 	bl	8000ab0 <__aeabi_d2f>
 8001786:	4603      	mov	r3, r0
 8001788:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  float var_alpha = (pow(dt, 2)) * var_jerk;
 800178c:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8001790:	f7fe fe86 	bl	80004a0 <__aeabi_f2d>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	ed9f 1b41 	vldr	d1, [pc, #260]	; 80018a0 <main+0x390>
 800179c:	ec43 2b10 	vmov	d0, r2, r3
 80017a0:	f004 f890 	bl	80058c4 <pow>
 80017a4:	ec55 4b10 	vmov	r4, r5, d0
 80017a8:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 80017ac:	f7fe fe78 	bl	80004a0 <__aeabi_f2d>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4620      	mov	r0, r4
 80017b6:	4629      	mov	r1, r5
 80017b8:	f7fe feca 	bl	8000550 <__aeabi_dmul>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4610      	mov	r0, r2
 80017c2:	4619      	mov	r1, r3
 80017c4:	f7ff f974 	bl	8000ab0 <__aeabi_d2f>
 80017c8:	4603      	mov	r3, r0
 80017ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  float var_theta_omega = ((1 / 12.0) * pow(dt, 5)) * var_jerk;
 80017ce:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 80017d2:	f7fe fe65 	bl	80004a0 <__aeabi_f2d>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	ed9f 1b37 	vldr	d1, [pc, #220]	; 80018b8 <main+0x3a8>
 80017de:	ec43 2b10 	vmov	d0, r2, r3
 80017e2:	f004 f86f 	bl	80058c4 <pow>
 80017e6:	ec51 0b10 	vmov	r0, r1, d0
 80017ea:	a335      	add	r3, pc, #212	; (adr r3, 80018c0 <main+0x3b0>)
 80017ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f0:	f7fe feae 	bl	8000550 <__aeabi_dmul>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	4614      	mov	r4, r2
 80017fa:	461d      	mov	r5, r3
 80017fc:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8001800:	f7fe fe4e 	bl	80004a0 <__aeabi_f2d>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4620      	mov	r0, r4
 800180a:	4629      	mov	r1, r5
 800180c:	f7fe fea0 	bl	8000550 <__aeabi_dmul>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4610      	mov	r0, r2
 8001816:	4619      	mov	r1, r3
 8001818:	f7ff f94a 	bl	8000ab0 <__aeabi_d2f>
 800181c:	4603      	mov	r3, r0
 800181e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  float var_theta_alpha = ((1 / 6.0) * pow(dt, 4)) * var_jerk;
 8001822:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8001826:	f7fe fe3b 	bl	80004a0 <__aeabi_f2d>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	ed9f 1b26 	vldr	d1, [pc, #152]	; 80018c8 <main+0x3b8>
 8001832:	ec43 2b10 	vmov	d0, r2, r3
 8001836:	f004 f845 	bl	80058c4 <pow>
 800183a:	ec51 0b10 	vmov	r0, r1, d0
 800183e:	a31c      	add	r3, pc, #112	; (adr r3, 80018b0 <main+0x3a0>)
 8001840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001844:	f7fe fe84 	bl	8000550 <__aeabi_dmul>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4614      	mov	r4, r2
 800184e:	461d      	mov	r5, r3
 8001850:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8001854:	f7fe fe24 	bl	80004a0 <__aeabi_f2d>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4620      	mov	r0, r4
 800185e:	4629      	mov	r1, r5
 8001860:	f7fe fe76 	bl	8000550 <__aeabi_dmul>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4610      	mov	r0, r2
 800186a:	4619      	mov	r1, r3
 800186c:	f7ff f920 	bl	8000ab0 <__aeabi_d2f>
 8001870:	4603      	mov	r3, r0
 8001872:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  float var_omega_alpha = ((1 / 2.0) * pow(dt, 3))* var_jerk;
 8001876:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800187a:	f7fe fe11 	bl	80004a0 <__aeabi_f2d>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	ed9f 1b09 	vldr	d1, [pc, #36]	; 80018a8 <main+0x398>
 8001886:	ec43 2b10 	vmov	d0, r2, r3
 800188a:	f004 f81b 	bl	80058c4 <pow>
 800188e:	ec51 0b10 	vmov	r0, r1, d0
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	4b18      	ldr	r3, [pc, #96]	; (80018f8 <main+0x3e8>)
 8001898:	f7fe fe5a 	bl	8000550 <__aeabi_dmul>
 800189c:	e034      	b.n	8001908 <main+0x3f8>
 800189e:	bf00      	nop
 80018a0:	00000000 	.word	0x00000000
 80018a4:	40000000 	.word	0x40000000
 80018a8:	00000000 	.word	0x00000000
 80018ac:	40080000 	.word	0x40080000
 80018b0:	55555555 	.word	0x55555555
 80018b4:	3fc55555 	.word	0x3fc55555
 80018b8:	00000000 	.word	0x00000000
 80018bc:	40140000 	.word	0x40140000
 80018c0:	55555555 	.word	0x55555555
 80018c4:	3fb55555 	.word	0x3fb55555
 80018c8:	00000000 	.word	0x00000000
 80018cc:	40100000 	.word	0x40100000
 80018d0:	2000050c 	.word	0x2000050c
 80018d4:	20000440 	.word	0x20000440
 80018d8:	200002f0 	.word	0x200002f0
 80018dc:	20000004 	.word	0x20000004
 80018e0:	20000008 	.word	0x20000008
 80018e4:	200000c8 	.word	0x200000c8
 80018e8:	20000000 	.word	0x20000000
 80018ec:	200000cc 	.word	0x200000cc
 80018f0:	200000d0 	.word	0x200000d0
 80018f4:	3c23d70a 	.word	0x3c23d70a
 80018f8:	3fe00000 	.word	0x3fe00000
 80018fc:	3a7c21c6 	.word	0x3a7c21c6
 8001900:	08006848 	.word	0x08006848
 8001904:	41200000 	.word	0x41200000
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4614      	mov	r4, r2
 800190e:	461d      	mov	r5, r3
 8001910:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8001914:	f7fe fdc4 	bl	80004a0 <__aeabi_f2d>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4620      	mov	r0, r4
 800191e:	4629      	mov	r1, r5
 8001920:	f7fe fe16 	bl	8000550 <__aeabi_dmul>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4610      	mov	r0, r2
 800192a:	4619      	mov	r1, r3
 800192c:	f7ff f8c0 	bl	8000ab0 <__aeabi_d2f>
 8001930:	4603      	mov	r3, r0
 8001932:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  float mat_q[9] = {var_theta, var_theta_omega, var_theta_alpha, var_theta_omega, var_omega, var_omega_alpha, var_theta_alpha, var_omega_alpha, var_alpha };
 8001936:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800193a:	63bb      	str	r3, [r7, #56]	; 0x38
 800193c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001940:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001942:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001946:	643b      	str	r3, [r7, #64]	; 0x40
 8001948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800194c:	647b      	str	r3, [r7, #68]	; 0x44
 800194e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001952:	64bb      	str	r3, [r7, #72]	; 0x48
 8001954:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001958:	64fb      	str	r3, [r7, #76]	; 0x4c
 800195a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800195e:	653b      	str	r3, [r7, #80]	; 0x50
 8001960:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001964:	657b      	str	r3, [r7, #84]	; 0x54
 8001966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800196a:	65bb      	str	r3, [r7, #88]	; 0x58

  A = Create_Matrix(3, 3, mat_a);
 800196c:	4c92      	ldr	r4, [pc, #584]	; (8001bb8 <main+0x6a8>)
 800196e:	f107 0008 	add.w	r0, r7, #8
 8001972:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001976:	2203      	movs	r2, #3
 8001978:	2103      	movs	r1, #3
 800197a:	f7ff fa65 	bl	8000e48 <Create_Matrix>
 800197e:	4625      	mov	r5, r4
 8001980:	f107 0408 	add.w	r4, r7, #8
 8001984:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001986:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001988:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800198a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800198c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001990:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  A_T = Transpose(A);
 8001994:	4b89      	ldr	r3, [pc, #548]	; (8001bbc <main+0x6ac>)
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	f107 0c08 	add.w	ip, r7, #8
 800199c:	4e86      	ldr	r6, [pc, #536]	; (8001bb8 <main+0x6a8>)
 800199e:	466d      	mov	r5, sp
 80019a0:	f106 040c 	add.w	r4, r6, #12
 80019a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80019ac:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80019b0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80019b4:	4660      	mov	r0, ip
 80019b6:	f7ff fc55 	bl	8001264 <Transpose>
 80019ba:	687d      	ldr	r5, [r7, #4]
 80019bc:	f107 0408 	add.w	r4, r7, #8
 80019c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80019cc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  C = Create_Matrix(1, 3, mat_c);
 80019d0:	4c7b      	ldr	r4, [pc, #492]	; (8001bc0 <main+0x6b0>)
 80019d2:	f107 0008 	add.w	r0, r7, #8
 80019d6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80019da:	2203      	movs	r2, #3
 80019dc:	2101      	movs	r1, #1
 80019de:	f7ff fa33 	bl	8000e48 <Create_Matrix>
 80019e2:	4625      	mov	r5, r4
 80019e4:	f107 0408 	add.w	r4, r7, #8
 80019e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019f0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80019f4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  C_T = Transpose(C);
 80019f8:	4b72      	ldr	r3, [pc, #456]	; (8001bc4 <main+0x6b4>)
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	f107 0c08 	add.w	ip, r7, #8
 8001a00:	4e6f      	ldr	r6, [pc, #444]	; (8001bc0 <main+0x6b0>)
 8001a02:	466d      	mov	r5, sp
 8001a04:	f106 040c 	add.w	r4, r6, #12
 8001a08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a0c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a10:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001a14:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001a18:	4660      	mov	r0, ip
 8001a1a:	f7ff fc23 	bl	8001264 <Transpose>
 8001a1e:	687d      	ldr	r5, [r7, #4]
 8001a20:	f107 0408 	add.w	r4, r7, #8
 8001a24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a2c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001a30:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  R = Create_Matrix(1, 1, mat_r);
 8001a34:	4c64      	ldr	r4, [pc, #400]	; (8001bc8 <main+0x6b8>)
 8001a36:	f107 0008 	add.w	r0, r7, #8
 8001a3a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a3e:	2201      	movs	r2, #1
 8001a40:	2101      	movs	r1, #1
 8001a42:	f7ff fa01 	bl	8000e48 <Create_Matrix>
 8001a46:	4625      	mov	r5, r4
 8001a48:	f107 0408 	add.w	r4, r7, #8
 8001a4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a54:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001a58:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  Q = Create_Matrix(3, 3, mat_q);
 8001a5c:	4c5b      	ldr	r4, [pc, #364]	; (8001bcc <main+0x6bc>)
 8001a5e:	f107 0008 	add.w	r0, r7, #8
 8001a62:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a66:	2203      	movs	r2, #3
 8001a68:	2103      	movs	r1, #3
 8001a6a:	f7ff f9ed 	bl	8000e48 <Create_Matrix>
 8001a6e:	4625      	mov	r5, r4
 8001a70:	f107 0408 	add.w	r4, r7, #8
 8001a74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a7c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001a80:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  I = Create_Matrix(3, 3, eye);
 8001a84:	4c52      	ldr	r4, [pc, #328]	; (8001bd0 <main+0x6c0>)
 8001a86:	f107 0008 	add.w	r0, r7, #8
 8001a8a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001a8e:	2203      	movs	r2, #3
 8001a90:	2103      	movs	r1, #3
 8001a92:	f7ff f9d9 	bl	8000e48 <Create_Matrix>
 8001a96:	4625      	mov	r5, r4
 8001a98:	f107 0408 	add.w	r4, r7, #8
 8001a9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aa4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001aa8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  x_k1 = Create_Matrix(3, 1, zero);
 8001aac:	4c49      	ldr	r4, [pc, #292]	; (8001bd4 <main+0x6c4>)
 8001aae:	f107 0008 	add.w	r0, r7, #8
 8001ab2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	2103      	movs	r1, #3
 8001aba:	f7ff f9c5 	bl	8000e48 <Create_Matrix>
 8001abe:	4625      	mov	r5, r4
 8001ac0:	f107 0408 	add.w	r4, r7, #8
 8001ac4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ac6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ac8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001acc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001ad0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  p_k1 = Create_Matrix(3, 3, zero);
 8001ad4:	4c40      	ldr	r4, [pc, #256]	; (8001bd8 <main+0x6c8>)
 8001ad6:	f107 0008 	add.w	r0, r7, #8
 8001ada:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ade:	2203      	movs	r2, #3
 8001ae0:	2103      	movs	r1, #3
 8001ae2:	f7ff f9b1 	bl	8000e48 <Create_Matrix>
 8001ae6:	4625      	mov	r5, r4
 8001ae8:	f107 0408 	add.w	r4, r7, #8
 8001aec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001af0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001af2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001af4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001af8:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  t = (HAL_GetTick() - traject_time - 1000.0)/1000.0;
 8001afc:	f001 fc20 	bl	8003340 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	4b36      	ldr	r3, [pc, #216]	; (8001bdc <main+0x6cc>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7fe fca7 	bl	800045c <__aeabi_ui2d>
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	4b33      	ldr	r3, [pc, #204]	; (8001be0 <main+0x6d0>)
 8001b14:	f7fe fb64 	bl	80001e0 <__aeabi_dsub>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4610      	mov	r0, r2
 8001b1e:	4619      	mov	r1, r3
 8001b20:	f04f 0200 	mov.w	r2, #0
 8001b24:	4b2e      	ldr	r3, [pc, #184]	; (8001be0 <main+0x6d0>)
 8001b26:	f7fe fe3d 	bl	80007a4 <__aeabi_ddiv>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	4610      	mov	r0, r2
 8001b30:	4619      	mov	r1, r3
 8001b32:	f7fe ffbd 	bl	8000ab0 <__aeabi_d2f>
 8001b36:	4603      	mov	r3, r0
 8001b38:	4a2a      	ldr	r2, [pc, #168]	; (8001be4 <main+0x6d4>)
 8001b3a:	6013      	str	r3, [r2, #0]
	  if(t >= endtime)
 8001b3c:	4b29      	ldr	r3, [pc, #164]	; (8001be4 <main+0x6d4>)
 8001b3e:	ed93 7a00 	vldr	s14, [r3]
 8001b42:	4b29      	ldr	r3, [pc, #164]	; (8001be8 <main+0x6d8>)
 8001b44:	edd3 7a00 	vldr	s15, [r3]
 8001b48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b50:	db03      	blt.n	8001b5a <main+0x64a>
	  {
		  state = Steadystate;
 8001b52:	4b26      	ldr	r3, [pc, #152]	; (8001bec <main+0x6dc>)
 8001b54:	2205      	movs	r2, #5
 8001b56:	701a      	strb	r2, [r3, #0]
 8001b58:	e7d0      	b.n	8001afc <main+0x5ec>
	  }
	  else if(t >= (t_constant + t_acc))
 8001b5a:	4b25      	ldr	r3, [pc, #148]	; (8001bf0 <main+0x6e0>)
 8001b5c:	ed93 7a00 	vldr	s14, [r3]
 8001b60:	4b24      	ldr	r3, [pc, #144]	; (8001bf4 <main+0x6e4>)
 8001b62:	edd3 7a00 	vldr	s15, [r3]
 8001b66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b6a:	4b1e      	ldr	r3, [pc, #120]	; (8001be4 <main+0x6d4>)
 8001b6c:	edd3 7a00 	vldr	s15, [r3]
 8001b70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b78:	d803      	bhi.n	8001b82 <main+0x672>
	  {
		  state = Decelelation;
 8001b7a:	4b1c      	ldr	r3, [pc, #112]	; (8001bec <main+0x6dc>)
 8001b7c:	2204      	movs	r2, #4
 8001b7e:	701a      	strb	r2, [r3, #0]
 8001b80:	e7bc      	b.n	8001afc <main+0x5ec>
	  }
	  else if(t >= t_acc)
 8001b82:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <main+0x6d4>)
 8001b84:	ed93 7a00 	vldr	s14, [r3]
 8001b88:	4b1a      	ldr	r3, [pc, #104]	; (8001bf4 <main+0x6e4>)
 8001b8a:	edd3 7a00 	vldr	s15, [r3]
 8001b8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b96:	db03      	blt.n	8001ba0 <main+0x690>
	  {
		  state = Constant;
 8001b98:	4b14      	ldr	r3, [pc, #80]	; (8001bec <main+0x6dc>)
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	701a      	strb	r2, [r3, #0]
 8001b9e:	e7ad      	b.n	8001afc <main+0x5ec>
	  }
	  else if(t >= 0)
 8001ba0:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <main+0x6d4>)
 8001ba2:	edd3 7a00 	vldr	s15, [r3]
 8001ba6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bae:	db02      	blt.n	8001bb6 <main+0x6a6>
	  {
		  state = Accerelation;
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <main+0x6dc>)
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	701a      	strb	r2, [r3, #0]
	  t = (HAL_GetTick() - traject_time - 1000.0)/1000.0;
 8001bb6:	e7a1      	b.n	8001afc <main+0x5ec>
 8001bb8:	200001bc 	.word	0x200001bc
 8001bbc:	20000390 	.word	0x20000390
 8001bc0:	20000364 	.word	0x20000364
 8001bc4:	20000414 	.word	0x20000414
 8001bc8:	200004b4 	.word	0x200004b4
 8001bcc:	20000240 	.word	0x20000240
 8001bd0:	200004e0 	.word	0x200004e0
 8001bd4:	20000338 	.word	0x20000338
 8001bd8:	20000298 	.word	0x20000298
 8001bdc:	200000b8 	.word	0x200000b8
 8001be0:	408f4000 	.word	0x408f4000
 8001be4:	200000c4 	.word	0x200000c4
 8001be8:	200000c8 	.word	0x200000c8
 8001bec:	200000b4 	.word	0x200000b4
 8001bf0:	20000008 	.word	0x20000008
 8001bf4:	20000004 	.word	0x20000004

08001bf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b094      	sub	sp, #80	; 0x50
 8001bfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bfe:	f107 0320 	add.w	r3, r7, #32
 8001c02:	2230      	movs	r2, #48	; 0x30
 8001c04:	2100      	movs	r1, #0
 8001c06:	4618      	mov	r0, r3
 8001c08:	f003 fe54 	bl	80058b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c0c:	f107 030c 	add.w	r3, r7, #12
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	4b27      	ldr	r3, [pc, #156]	; (8001cc0 <SystemClock_Config+0xc8>)
 8001c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c24:	4a26      	ldr	r2, [pc, #152]	; (8001cc0 <SystemClock_Config+0xc8>)
 8001c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c2a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2c:	4b24      	ldr	r3, [pc, #144]	; (8001cc0 <SystemClock_Config+0xc8>)
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c34:	60bb      	str	r3, [r7, #8]
 8001c36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c38:	2300      	movs	r3, #0
 8001c3a:	607b      	str	r3, [r7, #4]
 8001c3c:	4b21      	ldr	r3, [pc, #132]	; (8001cc4 <SystemClock_Config+0xcc>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a20      	ldr	r2, [pc, #128]	; (8001cc4 <SystemClock_Config+0xcc>)
 8001c42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c46:	6013      	str	r3, [r2, #0]
 8001c48:	4b1e      	ldr	r3, [pc, #120]	; (8001cc4 <SystemClock_Config+0xcc>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c50:	607b      	str	r3, [r7, #4]
 8001c52:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c54:	2302      	movs	r3, #2
 8001c56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c5c:	2310      	movs	r3, #16
 8001c5e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c60:	2302      	movs	r3, #2
 8001c62:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c64:	2300      	movs	r3, #0
 8001c66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c68:	2308      	movs	r3, #8
 8001c6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001c6c:	2364      	movs	r3, #100	; 0x64
 8001c6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c70:	2302      	movs	r3, #2
 8001c72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c74:	2304      	movs	r3, #4
 8001c76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c78:	f107 0320 	add.w	r3, r7, #32
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f001 fe1b 	bl	80038b8 <HAL_RCC_OscConfig>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c88:	f001 f930 	bl	8002eec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c8c:	230f      	movs	r3, #15
 8001c8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c90:	2302      	movs	r3, #2
 8001c92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001ca2:	f107 030c 	add.w	r3, r7, #12
 8001ca6:	2103      	movs	r1, #3
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f002 f87d 	bl	8003da8 <HAL_RCC_ClockConfig>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001cb4:	f001 f91a 	bl	8002eec <Error_Handler>
  }
}
 8001cb8:	bf00      	nop
 8001cba:	3750      	adds	r7, #80	; 0x50
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40007000 	.word	0x40007000

08001cc8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b096      	sub	sp, #88	; 0x58
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cdc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
 8001cf2:	60da      	str	r2, [r3, #12]
 8001cf4:	611a      	str	r2, [r3, #16]
 8001cf6:	615a      	str	r2, [r3, #20]
 8001cf8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cfa:	1d3b      	adds	r3, r7, #4
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4618      	mov	r0, r3
 8001d02:	f003 fdd7 	bl	80058b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d06:	4b3e      	ldr	r3, [pc, #248]	; (8001e00 <MX_TIM1_Init+0x138>)
 8001d08:	4a3e      	ldr	r2, [pc, #248]	; (8001e04 <MX_TIM1_Init+0x13c>)
 8001d0a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d0c:	4b3c      	ldr	r3, [pc, #240]	; (8001e00 <MX_TIM1_Init+0x138>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d12:	4b3b      	ldr	r3, [pc, #236]	; (8001e00 <MX_TIM1_Init+0x138>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 8001d18:	4b39      	ldr	r3, [pc, #228]	; (8001e00 <MX_TIM1_Init+0x138>)
 8001d1a:	f241 3287 	movw	r2, #4999	; 0x1387
 8001d1e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d20:	4b37      	ldr	r3, [pc, #220]	; (8001e00 <MX_TIM1_Init+0x138>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d26:	4b36      	ldr	r3, [pc, #216]	; (8001e00 <MX_TIM1_Init+0x138>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d2c:	4b34      	ldr	r3, [pc, #208]	; (8001e00 <MX_TIM1_Init+0x138>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d32:	4833      	ldr	r0, [pc, #204]	; (8001e00 <MX_TIM1_Init+0x138>)
 8001d34:	f002 fa34 	bl	80041a0 <HAL_TIM_Base_Init>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001d3e:	f001 f8d5 	bl	8002eec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d46:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d48:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	482c      	ldr	r0, [pc, #176]	; (8001e00 <MX_TIM1_Init+0x138>)
 8001d50:	f002 fee0 	bl	8004b14 <HAL_TIM_ConfigClockSource>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001d5a:	f001 f8c7 	bl	8002eec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d5e:	4828      	ldr	r0, [pc, #160]	; (8001e00 <MX_TIM1_Init+0x138>)
 8001d60:	f002 fad0 	bl	8004304 <HAL_TIM_PWM_Init>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001d6a:	f001 f8bf 	bl	8002eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d72:	2300      	movs	r3, #0
 8001d74:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4820      	ldr	r0, [pc, #128]	; (8001e00 <MX_TIM1_Init+0x138>)
 8001d7e:	f003 fa85 	bl	800528c <HAL_TIMEx_MasterConfigSynchronization>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001d88:	f001 f8b0 	bl	8002eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d8c:	2360      	movs	r3, #96	; 0x60
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d94:	2300      	movs	r3, #0
 8001d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001da0:	2300      	movs	r3, #0
 8001da2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001da4:	2300      	movs	r3, #0
 8001da6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001da8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dac:	2200      	movs	r2, #0
 8001dae:	4619      	mov	r1, r3
 8001db0:	4813      	ldr	r0, [pc, #76]	; (8001e00 <MX_TIM1_Init+0x138>)
 8001db2:	f002 fded 	bl	8004990 <HAL_TIM_PWM_ConfigChannel>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001dbc:	f001 f896 	bl	8002eec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001dd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dd8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001dde:	1d3b      	adds	r3, r7, #4
 8001de0:	4619      	mov	r1, r3
 8001de2:	4807      	ldr	r0, [pc, #28]	; (8001e00 <MX_TIM1_Init+0x138>)
 8001de4:	f003 fac0 	bl	8005368 <HAL_TIMEx_ConfigBreakDeadTime>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001dee:	f001 f87d 	bl	8002eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001df2:	4803      	ldr	r0, [pc, #12]	; (8001e00 <MX_TIM1_Init+0x138>)
 8001df4:	f001 f94c 	bl	8003090 <HAL_TIM_MspPostInit>

}
 8001df8:	bf00      	nop
 8001dfa:	3758      	adds	r7, #88	; 0x58
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20000440 	.word	0x20000440
 8001e04:	40010000 	.word	0x40010000

08001e08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08c      	sub	sp, #48	; 0x30
 8001e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e0e:	f107 030c 	add.w	r3, r7, #12
 8001e12:	2224      	movs	r2, #36	; 0x24
 8001e14:	2100      	movs	r1, #0
 8001e16:	4618      	mov	r0, r3
 8001e18:	f003 fd4c 	bl	80058b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e1c:	1d3b      	adds	r3, r7, #4
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e24:	4b21      	ldr	r3, [pc, #132]	; (8001eac <MX_TIM2_Init+0xa4>)
 8001e26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e2c:	4b1f      	ldr	r3, [pc, #124]	; (8001eac <MX_TIM2_Init+0xa4>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e32:	4b1e      	ldr	r3, [pc, #120]	; (8001eac <MX_TIM2_Init+0xa4>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001e38:	4b1c      	ldr	r3, [pc, #112]	; (8001eac <MX_TIM2_Init+0xa4>)
 8001e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8001e3e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e40:	4b1a      	ldr	r3, [pc, #104]	; (8001eac <MX_TIM2_Init+0xa4>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e46:	4b19      	ldr	r3, [pc, #100]	; (8001eac <MX_TIM2_Init+0xa4>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e50:	2300      	movs	r3, #0
 8001e52:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e54:	2301      	movs	r3, #1
 8001e56:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e60:	2300      	movs	r3, #0
 8001e62:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e64:	2301      	movs	r3, #1
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001e70:	f107 030c 	add.w	r3, r7, #12
 8001e74:	4619      	mov	r1, r3
 8001e76:	480d      	ldr	r0, [pc, #52]	; (8001eac <MX_TIM2_Init+0xa4>)
 8001e78:	f002 fb4e 	bl	8004518 <HAL_TIM_Encoder_Init>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001e82:	f001 f833 	bl	8002eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e86:	2300      	movs	r3, #0
 8001e88:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e8e:	1d3b      	adds	r3, r7, #4
 8001e90:	4619      	mov	r1, r3
 8001e92:	4806      	ldr	r0, [pc, #24]	; (8001eac <MX_TIM2_Init+0xa4>)
 8001e94:	f003 f9fa 	bl	800528c <HAL_TIMEx_MasterConfigSynchronization>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001e9e:	f001 f825 	bl	8002eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ea2:	bf00      	nop
 8001ea4:	3730      	adds	r7, #48	; 0x30
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	2000050c 	.word	0x2000050c

08001eb0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eb6:	f107 0308 	add.w	r3, r7, #8
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	605a      	str	r2, [r3, #4]
 8001ec0:	609a      	str	r2, [r3, #8]
 8001ec2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ec4:	463b      	mov	r3, r7
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ecc:	4b1d      	ldr	r3, [pc, #116]	; (8001f44 <MX_TIM5_Init+0x94>)
 8001ece:	4a1e      	ldr	r2, [pc, #120]	; (8001f48 <MX_TIM5_Init+0x98>)
 8001ed0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 999;
 8001ed2:	4b1c      	ldr	r3, [pc, #112]	; (8001f44 <MX_TIM5_Init+0x94>)
 8001ed4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ed8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eda:	4b1a      	ldr	r3, [pc, #104]	; (8001f44 <MX_TIM5_Init+0x94>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8001ee0:	4b18      	ldr	r3, [pc, #96]	; (8001f44 <MX_TIM5_Init+0x94>)
 8001ee2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ee6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee8:	4b16      	ldr	r3, [pc, #88]	; (8001f44 <MX_TIM5_Init+0x94>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eee:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <MX_TIM5_Init+0x94>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001ef4:	4813      	ldr	r0, [pc, #76]	; (8001f44 <MX_TIM5_Init+0x94>)
 8001ef6:	f002 f953 	bl	80041a0 <HAL_TIM_Base_Init>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001f00:	f000 fff4 	bl	8002eec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001f0a:	f107 0308 	add.w	r3, r7, #8
 8001f0e:	4619      	mov	r1, r3
 8001f10:	480c      	ldr	r0, [pc, #48]	; (8001f44 <MX_TIM5_Init+0x94>)
 8001f12:	f002 fdff 	bl	8004b14 <HAL_TIM_ConfigClockSource>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001f1c:	f000 ffe6 	bl	8002eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f20:	2300      	movs	r3, #0
 8001f22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f24:	2300      	movs	r3, #0
 8001f26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f28:	463b      	mov	r3, r7
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4805      	ldr	r0, [pc, #20]	; (8001f44 <MX_TIM5_Init+0x94>)
 8001f2e:	f003 f9ad 	bl	800528c <HAL_TIMEx_MasterConfigSynchronization>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001f38:	f000 ffd8 	bl	8002eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001f3c:	bf00      	nop
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	200002f0 	.word	0x200002f0
 8001f48:	40000c00 	.word	0x40000c00

08001f4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f50:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <MX_USART2_UART_Init+0x4c>)
 8001f52:	4a12      	ldr	r2, [pc, #72]	; (8001f9c <MX_USART2_UART_Init+0x50>)
 8001f54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f56:	4b10      	ldr	r3, [pc, #64]	; (8001f98 <MX_USART2_UART_Init+0x4c>)
 8001f58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f5e:	4b0e      	ldr	r3, [pc, #56]	; (8001f98 <MX_USART2_UART_Init+0x4c>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f64:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <MX_USART2_UART_Init+0x4c>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f6a:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <MX_USART2_UART_Init+0x4c>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f70:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <MX_USART2_UART_Init+0x4c>)
 8001f72:	220c      	movs	r2, #12
 8001f74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f76:	4b08      	ldr	r3, [pc, #32]	; (8001f98 <MX_USART2_UART_Init+0x4c>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f7c:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <MX_USART2_UART_Init+0x4c>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f82:	4805      	ldr	r0, [pc, #20]	; (8001f98 <MX_USART2_UART_Init+0x4c>)
 8001f84:	f003 fa56 	bl	8005434 <HAL_UART_Init>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f8e:	f000 ffad 	bl	8002eec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000554 	.word	0x20000554
 8001f9c:	40004400 	.word	0x40004400

08001fa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08a      	sub	sp, #40	; 0x28
 8001fa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa6:	f107 0314 	add.w	r3, r7, #20
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	605a      	str	r2, [r3, #4]
 8001fb0:	609a      	str	r2, [r3, #8]
 8001fb2:	60da      	str	r2, [r3, #12]
 8001fb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	4b39      	ldr	r3, [pc, #228]	; (80020a0 <MX_GPIO_Init+0x100>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	4a38      	ldr	r2, [pc, #224]	; (80020a0 <MX_GPIO_Init+0x100>)
 8001fc0:	f043 0304 	orr.w	r3, r3, #4
 8001fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc6:	4b36      	ldr	r3, [pc, #216]	; (80020a0 <MX_GPIO_Init+0x100>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	f003 0304 	and.w	r3, r3, #4
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	4b32      	ldr	r3, [pc, #200]	; (80020a0 <MX_GPIO_Init+0x100>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	4a31      	ldr	r2, [pc, #196]	; (80020a0 <MX_GPIO_Init+0x100>)
 8001fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe2:	4b2f      	ldr	r3, [pc, #188]	; (80020a0 <MX_GPIO_Init+0x100>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60bb      	str	r3, [r7, #8]
 8001ff2:	4b2b      	ldr	r3, [pc, #172]	; (80020a0 <MX_GPIO_Init+0x100>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	4a2a      	ldr	r2, [pc, #168]	; (80020a0 <MX_GPIO_Init+0x100>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffe:	4b28      	ldr	r3, [pc, #160]	; (80020a0 <MX_GPIO_Init+0x100>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	607b      	str	r3, [r7, #4]
 800200e:	4b24      	ldr	r3, [pc, #144]	; (80020a0 <MX_GPIO_Init+0x100>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	4a23      	ldr	r2, [pc, #140]	; (80020a0 <MX_GPIO_Init+0x100>)
 8002014:	f043 0302 	orr.w	r3, r3, #2
 8002018:	6313      	str	r3, [r2, #48]	; 0x30
 800201a:	4b21      	ldr	r3, [pc, #132]	; (80020a0 <MX_GPIO_Init+0x100>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	607b      	str	r3, [r7, #4]
 8002024:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8002026:	2200      	movs	r2, #0
 8002028:	f44f 7108 	mov.w	r1, #544	; 0x220
 800202c:	481d      	ldr	r0, [pc, #116]	; (80020a4 <MX_GPIO_Init+0x104>)
 800202e:	f001 fc29 	bl	8003884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002032:	2200      	movs	r2, #0
 8002034:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002038:	481b      	ldr	r0, [pc, #108]	; (80020a8 <MX_GPIO_Init+0x108>)
 800203a:	f001 fc23 	bl	8003884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800203e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002042:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002044:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002048:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	2300      	movs	r3, #0
 800204c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800204e:	f107 0314 	add.w	r3, r7, #20
 8002052:	4619      	mov	r1, r3
 8002054:	4815      	ldr	r0, [pc, #84]	; (80020ac <MX_GPIO_Init+0x10c>)
 8002056:	f001 fa91 	bl	800357c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 800205a:	f44f 7308 	mov.w	r3, #544	; 0x220
 800205e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002060:	2301      	movs	r3, #1
 8002062:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002068:	2300      	movs	r3, #0
 800206a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206c:	f107 0314 	add.w	r3, r7, #20
 8002070:	4619      	mov	r1, r3
 8002072:	480c      	ldr	r0, [pc, #48]	; (80020a4 <MX_GPIO_Init+0x104>)
 8002074:	f001 fa82 	bl	800357c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002078:	f44f 7340 	mov.w	r3, #768	; 0x300
 800207c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800207e:	2301      	movs	r3, #1
 8002080:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002086:	2300      	movs	r3, #0
 8002088:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800208a:	f107 0314 	add.w	r3, r7, #20
 800208e:	4619      	mov	r1, r3
 8002090:	4805      	ldr	r0, [pc, #20]	; (80020a8 <MX_GPIO_Init+0x108>)
 8002092:	f001 fa73 	bl	800357c <HAL_GPIO_Init>

}
 8002096:	bf00      	nop
 8002098:	3728      	adds	r7, #40	; 0x28
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40023800 	.word	0x40023800
 80020a4:	40020000 	.word	0x40020000
 80020a8:	40020400 	.word	0x40020400
 80020ac:	40020800 	.word	0x40020800

080020b0 <Drivemotor>:

/* USER CODE BEGIN 4 */

void Drivemotor(float PWM)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	ed87 0a01 	vstr	s0, [r7, #4]
	if(PWM<0 && PWM>=-5000)
 80020ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80020be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c6:	d51a      	bpl.n	80020fe <Drivemotor+0x4e>
 80020c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80020cc:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800219c <Drivemotor+0xec>
 80020d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d8:	db11      	blt.n	80020fe <Drivemotor+0x4e>
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1 , -1*PWM);
 80020da:	edd7 7a01 	vldr	s15, [r7, #4]
 80020de:	eef1 7a67 	vneg.f32	s15, s15
 80020e2:	4b2f      	ldr	r3, [pc, #188]	; (80021a0 <Drivemotor+0xf0>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020ea:	ee17 2a90 	vmov	r2, s15
 80020ee:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 80020f0:	2201      	movs	r2, #1
 80020f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020f6:	482b      	ldr	r0, [pc, #172]	; (80021a4 <Drivemotor+0xf4>)
 80020f8:	f001 fbc4 	bl	8003884 <HAL_GPIO_WritePin>
 80020fc:	e04a      	b.n	8002194 <Drivemotor+0xe4>
	}
	else if (PWM<-5000)
 80020fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002102:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800219c <Drivemotor+0xec>
 8002106:	eef4 7ac7 	vcmpe.f32	s15, s14
 800210a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800210e:	d50b      	bpl.n	8002128 <Drivemotor+0x78>
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1 , 5000);
 8002110:	4b23      	ldr	r3, [pc, #140]	; (80021a0 <Drivemotor+0xf0>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f241 3288 	movw	r2, #5000	; 0x1388
 8002118:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 800211a:	2201      	movs	r2, #1
 800211c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002120:	4820      	ldr	r0, [pc, #128]	; (80021a4 <Drivemotor+0xf4>)
 8002122:	f001 fbaf 	bl	8003884 <HAL_GPIO_WritePin>
	else if(PWM>5000)
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1 , 5000);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
	}
}
 8002126:	e035      	b.n	8002194 <Drivemotor+0xe4>
	else if(PWM>=0 && PWM<=5000)
 8002128:	edd7 7a01 	vldr	s15, [r7, #4]
 800212c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002134:	db18      	blt.n	8002168 <Drivemotor+0xb8>
 8002136:	edd7 7a01 	vldr	s15, [r7, #4]
 800213a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80021a8 <Drivemotor+0xf8>
 800213e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002146:	d80f      	bhi.n	8002168 <Drivemotor+0xb8>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1 , PWM);
 8002148:	4b15      	ldr	r3, [pc, #84]	; (80021a0 <Drivemotor+0xf0>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002154:	ee17 2a90 	vmov	r2, s15
 8002158:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 800215a:	2200      	movs	r2, #0
 800215c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002160:	4810      	ldr	r0, [pc, #64]	; (80021a4 <Drivemotor+0xf4>)
 8002162:	f001 fb8f 	bl	8003884 <HAL_GPIO_WritePin>
 8002166:	e015      	b.n	8002194 <Drivemotor+0xe4>
	else if(PWM>5000)
 8002168:	edd7 7a01 	vldr	s15, [r7, #4]
 800216c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80021a8 <Drivemotor+0xf8>
 8002170:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002178:	dc00      	bgt.n	800217c <Drivemotor+0xcc>
}
 800217a:	e00b      	b.n	8002194 <Drivemotor+0xe4>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1 , 5000);
 800217c:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <Drivemotor+0xf0>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f241 3288 	movw	r2, #5000	; 0x1388
 8002184:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8002186:	2200      	movs	r2, #0
 8002188:	f44f 7100 	mov.w	r1, #512	; 0x200
 800218c:	4805      	ldr	r0, [pc, #20]	; (80021a4 <Drivemotor+0xf4>)
 800218e:	f001 fb79 	bl	8003884 <HAL_GPIO_WritePin>
}
 8002192:	e7ff      	b.n	8002194 <Drivemotor+0xe4>
 8002194:	bf00      	nop
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	c59c4000 	.word	0xc59c4000
 80021a0:	20000440 	.word	0x20000440
 80021a4:	40020000 	.word	0x40020000
 80021a8:	459c4000 	.word	0x459c4000
 80021ac:	00000000 	.word	0x00000000

080021b0 <PID_Controller_Innerloop>:

float PID_Controller_Innerloop(float Error1)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	ed87 0a01 	vstr	s0, [r7, #4]
	static float Output1[2] = {0};
	static float error1[3] = {0};
	float Sampletime = 1/100.0 ;
 80021ba:	4b33      	ldr	r3, [pc, #204]	; (8002288 <PID_Controller_Innerloop+0xd8>)
 80021bc:	617b      	str	r3, [r7, #20]
	float Kp1 = 1.9899 ;
 80021be:	4b33      	ldr	r3, [pc, #204]	; (800228c <PID_Controller_Innerloop+0xdc>)
 80021c0:	613b      	str	r3, [r7, #16]
	float Ki1 = Sampletime * (7.596*1.9899);
 80021c2:	6978      	ldr	r0, [r7, #20]
 80021c4:	f7fe f96c 	bl	80004a0 <__aeabi_f2d>
 80021c8:	a32d      	add	r3, pc, #180	; (adr r3, 8002280 <PID_Controller_Innerloop+0xd0>)
 80021ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ce:	f7fe f9bf 	bl	8000550 <__aeabi_dmul>
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	4610      	mov	r0, r2
 80021d8:	4619      	mov	r1, r3
 80021da:	f7fe fc69 	bl	8000ab0 <__aeabi_d2f>
 80021de:	4603      	mov	r3, r0
 80021e0:	60fb      	str	r3, [r7, #12]
	float Kd1 = 0.0 / Sampletime;
 80021e2:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002290 <PID_Controller_Innerloop+0xe0>
 80021e6:	ed97 7a05 	vldr	s14, [r7, #20]
 80021ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021ee:	edc7 7a02 	vstr	s15, [r7, #8]

	error1[0] = Error1;
 80021f2:	4a28      	ldr	r2, [pc, #160]	; (8002294 <PID_Controller_Innerloop+0xe4>)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6013      	str	r3, [r2, #0]
	Output1[0] = Output1[1] + ( (Kp1+Ki1+Kd1)*error1[0] ) - ( (Kp1 + (2*Kd1))*error1[1] ) + (Kd1*error1[2]);
 80021f8:	4b27      	ldr	r3, [pc, #156]	; (8002298 <PID_Controller_Innerloop+0xe8>)
 80021fa:	ed93 7a01 	vldr	s14, [r3, #4]
 80021fe:	edd7 6a04 	vldr	s13, [r7, #16]
 8002202:	edd7 7a03 	vldr	s15, [r7, #12]
 8002206:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800220a:	edd7 7a02 	vldr	s15, [r7, #8]
 800220e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002212:	4b20      	ldr	r3, [pc, #128]	; (8002294 <PID_Controller_Innerloop+0xe4>)
 8002214:	edd3 7a00 	vldr	s15, [r3]
 8002218:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800221c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002220:	edd7 7a02 	vldr	s15, [r7, #8]
 8002224:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002228:	edd7 7a04 	vldr	s15, [r7, #16]
 800222c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002230:	4b18      	ldr	r3, [pc, #96]	; (8002294 <PID_Controller_Innerloop+0xe4>)
 8002232:	edd3 7a01 	vldr	s15, [r3, #4]
 8002236:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800223a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800223e:	4b15      	ldr	r3, [pc, #84]	; (8002294 <PID_Controller_Innerloop+0xe4>)
 8002240:	edd3 6a02 	vldr	s13, [r3, #8]
 8002244:	edd7 7a02 	vldr	s15, [r7, #8]
 8002248:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800224c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002250:	4b11      	ldr	r3, [pc, #68]	; (8002298 <PID_Controller_Innerloop+0xe8>)
 8002252:	edc3 7a00 	vstr	s15, [r3]
	Output1[1] = Output1[0];
 8002256:	4b10      	ldr	r3, [pc, #64]	; (8002298 <PID_Controller_Innerloop+0xe8>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a0f      	ldr	r2, [pc, #60]	; (8002298 <PID_Controller_Innerloop+0xe8>)
 800225c:	6053      	str	r3, [r2, #4]
	error1[2] = error1[1];
 800225e:	4b0d      	ldr	r3, [pc, #52]	; (8002294 <PID_Controller_Innerloop+0xe4>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	4a0c      	ldr	r2, [pc, #48]	; (8002294 <PID_Controller_Innerloop+0xe4>)
 8002264:	6093      	str	r3, [r2, #8]
	error1[1] = error1[0];
 8002266:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <PID_Controller_Innerloop+0xe4>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a0a      	ldr	r2, [pc, #40]	; (8002294 <PID_Controller_Innerloop+0xe4>)
 800226c:	6053      	str	r3, [r2, #4]

	return Output1[0];
 800226e:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <PID_Controller_Innerloop+0xe8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	ee07 3a90 	vmov	s15, r3
}
 8002276:	eeb0 0a67 	vmov.f32	s0, s15
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	0857bd56 	.word	0x0857bd56
 8002284:	402e3b06 	.word	0x402e3b06
 8002288:	3c23d70a 	.word	0x3c23d70a
 800228c:	3ffeb50b 	.word	0x3ffeb50b
 8002290:	00000000 	.word	0x00000000
 8002294:	20000110 	.word	0x20000110
 8002298:	2000011c 	.word	0x2000011c
 800229c:	00000000 	.word	0x00000000

080022a0 <PID_Controller_Outerloop>:

float PID_Controller_Outerloop(float Error1)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	ed87 0a01 	vstr	s0, [r7, #4]
	static float Output2[2] = {0};
	static float error2[3] = {0};
	float Sampletime = 1/100.0 ;
 80022aa:	4b35      	ldr	r3, [pc, #212]	; (8002380 <PID_Controller_Outerloop+0xe0>)
 80022ac:	617b      	str	r3, [r7, #20]
	float Kp2 = 18.26*1.5851 ;
 80022ae:	4b35      	ldr	r3, [pc, #212]	; (8002384 <PID_Controller_Outerloop+0xe4>)
 80022b0:	613b      	str	r3, [r7, #16]
	float Ki2 = Sampletime * 0.0;
 80022b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80022b6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002388 <PID_Controller_Outerloop+0xe8>
 80022ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022be:	edc7 7a03 	vstr	s15, [r7, #12]
	float Kd2 = 1.5851/Sampletime;
 80022c2:	6978      	ldr	r0, [r7, #20]
 80022c4:	f7fe f8ec 	bl	80004a0 <__aeabi_f2d>
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	a12a      	add	r1, pc, #168	; (adr r1, 8002378 <PID_Controller_Outerloop+0xd8>)
 80022ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80022d2:	f7fe fa67 	bl	80007a4 <__aeabi_ddiv>
 80022d6:	4602      	mov	r2, r0
 80022d8:	460b      	mov	r3, r1
 80022da:	4610      	mov	r0, r2
 80022dc:	4619      	mov	r1, r3
 80022de:	f7fe fbe7 	bl	8000ab0 <__aeabi_d2f>
 80022e2:	4603      	mov	r3, r0
 80022e4:	60bb      	str	r3, [r7, #8]

	error2[0] = Error1;
 80022e6:	4a29      	ldr	r2, [pc, #164]	; (800238c <PID_Controller_Outerloop+0xec>)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6013      	str	r3, [r2, #0]
	Output2[0] = Output2[1] + ( (Kp2+Ki2+Kd2)*error2[0] ) - ( (Kp2 + (2*Kd2))*error2[1] ) + (Kd2*error2[2]);
 80022ec:	4b28      	ldr	r3, [pc, #160]	; (8002390 <PID_Controller_Outerloop+0xf0>)
 80022ee:	ed93 7a01 	vldr	s14, [r3, #4]
 80022f2:	edd7 6a04 	vldr	s13, [r7, #16]
 80022f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80022fa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80022fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8002302:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002306:	4b21      	ldr	r3, [pc, #132]	; (800238c <PID_Controller_Outerloop+0xec>)
 8002308:	edd3 7a00 	vldr	s15, [r3]
 800230c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002310:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002314:	edd7 7a02 	vldr	s15, [r7, #8]
 8002318:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800231c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002320:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002324:	4b19      	ldr	r3, [pc, #100]	; (800238c <PID_Controller_Outerloop+0xec>)
 8002326:	edd3 7a01 	vldr	s15, [r3, #4]
 800232a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800232e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002332:	4b16      	ldr	r3, [pc, #88]	; (800238c <PID_Controller_Outerloop+0xec>)
 8002334:	edd3 6a02 	vldr	s13, [r3, #8]
 8002338:	edd7 7a02 	vldr	s15, [r7, #8]
 800233c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002344:	4b12      	ldr	r3, [pc, #72]	; (8002390 <PID_Controller_Outerloop+0xf0>)
 8002346:	edc3 7a00 	vstr	s15, [r3]
	Output2[1] = Output2[0];
 800234a:	4b11      	ldr	r3, [pc, #68]	; (8002390 <PID_Controller_Outerloop+0xf0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a10      	ldr	r2, [pc, #64]	; (8002390 <PID_Controller_Outerloop+0xf0>)
 8002350:	6053      	str	r3, [r2, #4]
	error2[2] = error2[1];
 8002352:	4b0e      	ldr	r3, [pc, #56]	; (800238c <PID_Controller_Outerloop+0xec>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	4a0d      	ldr	r2, [pc, #52]	; (800238c <PID_Controller_Outerloop+0xec>)
 8002358:	6093      	str	r3, [r2, #8]
	error2[1] = error2[0];
 800235a:	4b0c      	ldr	r3, [pc, #48]	; (800238c <PID_Controller_Outerloop+0xec>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a0b      	ldr	r2, [pc, #44]	; (800238c <PID_Controller_Outerloop+0xec>)
 8002360:	6053      	str	r3, [r2, #4]

	return Output2[0];
 8002362:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <PID_Controller_Outerloop+0xf0>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	ee07 3a90 	vmov	s15, r3
}
 800236a:	eeb0 0a67 	vmov.f32	s0, s15
 800236e:	3718      	adds	r7, #24
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	f3af 8000 	nop.w
 8002378:	d14e3bcd 	.word	0xd14e3bcd
 800237c:	3ff95c91 	.word	0x3ff95c91
 8002380:	3c23d70a 	.word	0x3c23d70a
 8002384:	41e78d29 	.word	0x41e78d29
 8002388:	00000000 	.word	0x00000000
 800238c:	20000124 	.word	0x20000124
 8002390:	20000130 	.word	0x20000130
 8002394:	00000000 	.word	0x00000000

08002398 <KalmanFilter>:

float KalmanFilter(float Input)
{
 8002398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800239a:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 800239e:	af14      	add	r7, sp, #80	; 0x50
 80023a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80023a4:	ed83 0a00 	vstr	s0, [r3]
	ti = aa / 100.0;
 80023a8:	4bbc      	ldr	r3, [pc, #752]	; (800269c <KalmanFilter+0x304>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe f865 	bl	800047c <__aeabi_i2d>
 80023b2:	f04f 0200 	mov.w	r2, #0
 80023b6:	4bba      	ldr	r3, [pc, #744]	; (80026a0 <KalmanFilter+0x308>)
 80023b8:	f7fe f9f4 	bl	80007a4 <__aeabi_ddiv>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4610      	mov	r0, r2
 80023c2:	4619      	mov	r1, r3
 80023c4:	f7fe fb74 	bl	8000ab0 <__aeabi_d2f>
 80023c8:	4603      	mov	r3, r0
 80023ca:	4ab6      	ldr	r2, [pc, #728]	; (80026a4 <KalmanFilter+0x30c>)
 80023cc:	6013      	str	r3, [r2, #0]
	tk = ti;
 80023ce:	4bb5      	ldr	r3, [pc, #724]	; (80026a4 <KalmanFilter+0x30c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4ab5      	ldr	r2, [pc, #724]	; (80026a8 <KalmanFilter+0x310>)
 80023d4:	6013      	str	r3, [r2, #0]
	sensor[0] = Input;
 80023d6:	4ab5      	ldr	r2, [pc, #724]	; (80026ac <KalmanFilter+0x314>)
 80023d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6013      	str	r3, [r2, #0]
	z_k = Create_Matrix(1, 1, sensor);
 80023e0:	4cb3      	ldr	r4, [pc, #716]	; (80026b0 <KalmanFilter+0x318>)
 80023e2:	f107 0008 	add.w	r0, r7, #8
 80023e6:	4bb1      	ldr	r3, [pc, #708]	; (80026ac <KalmanFilter+0x314>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	2101      	movs	r1, #1
 80023ec:	f7fe fd2c 	bl	8000e48 <Create_Matrix>
 80023f0:	f107 0308 	add.w	r3, r7, #8
 80023f4:	461d      	mov	r5, r3
 80023f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002402:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	//Predict//
	xp_k = Multiply(A, x_k1);
 8002406:	4bab      	ldr	r3, [pc, #684]	; (80026b4 <KalmanFilter+0x31c>)
 8002408:	607b      	str	r3, [r7, #4]
 800240a:	f107 0c08 	add.w	ip, r7, #8
 800240e:	4eaa      	ldr	r6, [pc, #680]	; (80026b8 <KalmanFilter+0x320>)
 8002410:	4baa      	ldr	r3, [pc, #680]	; (80026bc <KalmanFilter+0x324>)
 8002412:	ac08      	add	r4, sp, #32
 8002414:	461d      	mov	r5, r3
 8002416:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002418:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800241a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800241c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800241e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002422:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002426:	466d      	mov	r5, sp
 8002428:	f106 040c 	add.w	r4, r6, #12
 800242c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800242e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002430:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002434:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002438:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800243c:	4660      	mov	r0, ip
 800243e:	f7fe fd77 	bl	8000f30 <Multiply>
 8002442:	f107 0308 	add.w	r3, r7, #8
 8002446:	687c      	ldr	r4, [r7, #4]
 8002448:	461d      	mov	r5, r3
 800244a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800244c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800244e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002450:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002452:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002456:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	pp_k = Sum(Multiply(Multiply(A, p_k1), A_T), Q);
 800245a:	f107 0c44 	add.w	ip, r7, #68	; 0x44
 800245e:	4e96      	ldr	r6, [pc, #600]	; (80026b8 <KalmanFilter+0x320>)
 8002460:	4b97      	ldr	r3, [pc, #604]	; (80026c0 <KalmanFilter+0x328>)
 8002462:	ac08      	add	r4, sp, #32
 8002464:	461d      	mov	r5, r3
 8002466:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002468:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800246a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800246c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800246e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002472:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002476:	466d      	mov	r5, sp
 8002478:	f106 040c 	add.w	r4, r6, #12
 800247c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800247e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002480:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002484:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002488:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800248c:	4660      	mov	r0, ip
 800248e:	f7fe fd4f 	bl	8000f30 <Multiply>
 8002492:	f107 0c70 	add.w	ip, r7, #112	; 0x70
 8002496:	f107 0644 	add.w	r6, r7, #68	; 0x44
 800249a:	4b8a      	ldr	r3, [pc, #552]	; (80026c4 <KalmanFilter+0x32c>)
 800249c:	ac08      	add	r4, sp, #32
 800249e:	461d      	mov	r5, r3
 80024a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80024ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80024b0:	466d      	mov	r5, sp
 80024b2:	f106 040c 	add.w	r4, r6, #12
 80024b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024ba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80024be:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80024c2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80024c6:	4660      	mov	r0, ip
 80024c8:	f7fe fd32 	bl	8000f30 <Multiply>
 80024cc:	4b7e      	ldr	r3, [pc, #504]	; (80026c8 <KalmanFilter+0x330>)
 80024ce:	607b      	str	r3, [r7, #4]
 80024d0:	f107 0c08 	add.w	ip, r7, #8
 80024d4:	f107 0670 	add.w	r6, r7, #112	; 0x70
 80024d8:	4b7c      	ldr	r3, [pc, #496]	; (80026cc <KalmanFilter+0x334>)
 80024da:	ac08      	add	r4, sp, #32
 80024dc:	461d      	mov	r5, r3
 80024de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80024ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80024ee:	466d      	mov	r5, sp
 80024f0:	f106 040c 	add.w	r4, r6, #12
 80024f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024f8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80024fc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002500:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002504:	4660      	mov	r0, ip
 8002506:	f7fe fdad 	bl	8001064 <Sum>
 800250a:	f107 0308 	add.w	r3, r7, #8
 800250e:	687c      	ldr	r4, [r7, #4]
 8002510:	461d      	mov	r5, r3
 8002512:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002514:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002516:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002518:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800251a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800251e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	//Update//
	y_k = Minus(z_k, Multiply(C, xp_k));
 8002522:	f107 0c9c 	add.w	ip, r7, #156	; 0x9c
 8002526:	4e6a      	ldr	r6, [pc, #424]	; (80026d0 <KalmanFilter+0x338>)
 8002528:	4b62      	ldr	r3, [pc, #392]	; (80026b4 <KalmanFilter+0x31c>)
 800252a:	ac08      	add	r4, sp, #32
 800252c:	461d      	mov	r5, r3
 800252e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002530:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002532:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002534:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002536:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800253a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800253e:	466d      	mov	r5, sp
 8002540:	f106 040c 	add.w	r4, r6, #12
 8002544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002548:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800254c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002550:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002554:	4660      	mov	r0, ip
 8002556:	f7fe fceb 	bl	8000f30 <Multiply>
 800255a:	4b5e      	ldr	r3, [pc, #376]	; (80026d4 <KalmanFilter+0x33c>)
 800255c:	607b      	str	r3, [r7, #4]
 800255e:	f107 0c08 	add.w	ip, r7, #8
 8002562:	4e53      	ldr	r6, [pc, #332]	; (80026b0 <KalmanFilter+0x318>)
 8002564:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002568:	ac08      	add	r4, sp, #32
 800256a:	461d      	mov	r5, r3
 800256c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800256e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002574:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002578:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800257c:	466d      	mov	r5, sp
 800257e:	f106 040c 	add.w	r4, r6, #12
 8002582:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002584:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002586:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800258a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800258e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002592:	4660      	mov	r0, ip
 8002594:	f7fe fde6 	bl	8001164 <Minus>
 8002598:	f107 0308 	add.w	r3, r7, #8
 800259c:	687c      	ldr	r4, [r7, #4]
 800259e:	461d      	mov	r5, r3
 80025a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80025ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	s_k = Sum(Multiply(Multiply(C, pp_k), C_T), R);
 80025b0:	f107 0cc8 	add.w	ip, r7, #200	; 0xc8
 80025b4:	4e46      	ldr	r6, [pc, #280]	; (80026d0 <KalmanFilter+0x338>)
 80025b6:	4b44      	ldr	r3, [pc, #272]	; (80026c8 <KalmanFilter+0x330>)
 80025b8:	ac08      	add	r4, sp, #32
 80025ba:	461d      	mov	r5, r3
 80025bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80025c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80025cc:	466d      	mov	r5, sp
 80025ce:	f106 040c 	add.w	r4, r6, #12
 80025d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80025da:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80025de:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80025e2:	4660      	mov	r0, ip
 80025e4:	f7fe fca4 	bl	8000f30 <Multiply>
 80025e8:	f107 0cf4 	add.w	ip, r7, #244	; 0xf4
 80025ec:	f107 06c8 	add.w	r6, r7, #200	; 0xc8
 80025f0:	4b39      	ldr	r3, [pc, #228]	; (80026d8 <KalmanFilter+0x340>)
 80025f2:	ac08      	add	r4, sp, #32
 80025f4:	461d      	mov	r5, r3
 80025f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002602:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002606:	466d      	mov	r5, sp
 8002608:	f106 040c 	add.w	r4, r6, #12
 800260c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800260e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002610:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002614:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002618:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800261c:	4660      	mov	r0, ip
 800261e:	f7fe fc87 	bl	8000f30 <Multiply>
 8002622:	4b2e      	ldr	r3, [pc, #184]	; (80026dc <KalmanFilter+0x344>)
 8002624:	607b      	str	r3, [r7, #4]
 8002626:	f107 0608 	add.w	r6, r7, #8
 800262a:	4b2d      	ldr	r3, [pc, #180]	; (80026e0 <KalmanFilter+0x348>)
 800262c:	ac08      	add	r4, sp, #32
 800262e:	461d      	mov	r5, r3
 8002630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002632:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002634:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002638:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800263c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002640:	466d      	mov	r5, sp
 8002642:	f507 7480 	add.w	r4, r7, #256	; 0x100
 8002646:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002648:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800264a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800264e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002652:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002656:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002658:	4630      	mov	r0, r6
 800265a:	f7fe fd03 	bl	8001064 <Sum>
 800265e:	f107 0308 	add.w	r3, r7, #8
 8002662:	687c      	ldr	r4, [r7, #4]
 8002664:	461d      	mov	r5, r3
 8002666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002668:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800266a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800266c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800266e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002672:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	s_k_inv = Inverse(s_k);
 8002676:	4b1b      	ldr	r3, [pc, #108]	; (80026e4 <KalmanFilter+0x34c>)
 8002678:	607b      	str	r3, [r7, #4]
 800267a:	f107 0c08 	add.w	ip, r7, #8
 800267e:	4e17      	ldr	r6, [pc, #92]	; (80026dc <KalmanFilter+0x344>)
 8002680:	466d      	mov	r5, sp
 8002682:	f106 040c 	add.w	r4, r6, #12
 8002686:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002688:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800268a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800268e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002692:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002696:	4660      	mov	r0, ip
 8002698:	e026      	b.n	80026e8 <KalmanFilter+0x350>
 800269a:	bf00      	nop
 800269c:	2000010c 	.word	0x2000010c
 80026a0:	40590000 	.word	0x40590000
 80026a4:	20000100 	.word	0x20000100
 80026a8:	200000fc 	.word	0x200000fc
 80026ac:	200000f8 	.word	0x200000f8
 80026b0:	200001e8 	.word	0x200001e8
 80026b4:	20000164 	.word	0x20000164
 80026b8:	200001bc 	.word	0x200001bc
 80026bc:	20000338 	.word	0x20000338
 80026c0:	20000298 	.word	0x20000298
 80026c4:	20000390 	.word	0x20000390
 80026c8:	200003e8 	.word	0x200003e8
 80026cc:	20000240 	.word	0x20000240
 80026d0:	20000364 	.word	0x20000364
 80026d4:	200002c4 	.word	0x200002c4
 80026d8:	20000414 	.word	0x20000414
 80026dc:	20000488 	.word	0x20000488
 80026e0:	200004b4 	.word	0x200004b4
 80026e4:	20000190 	.word	0x20000190
 80026e8:	f7fe fe2b 	bl	8001342 <Inverse>
 80026ec:	f107 0308 	add.w	r3, r7, #8
 80026f0:	687c      	ldr	r4, [r7, #4]
 80026f2:	461d      	mov	r5, r3
 80026f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002700:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	K = Multiply(Multiply(pp_k, C_T), s_k_inv);
 8002704:	f507 7c90 	add.w	ip, r7, #288	; 0x120
 8002708:	4ead      	ldr	r6, [pc, #692]	; (80029c0 <KalmanFilter+0x628>)
 800270a:	4bae      	ldr	r3, [pc, #696]	; (80029c4 <KalmanFilter+0x62c>)
 800270c:	ac08      	add	r4, sp, #32
 800270e:	461d      	mov	r5, r3
 8002710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002714:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002716:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002718:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800271c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002720:	466d      	mov	r5, sp
 8002722:	f106 040c 	add.w	r4, r6, #12
 8002726:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002728:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800272a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800272e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002732:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002736:	4660      	mov	r0, ip
 8002738:	f7fe fbfa 	bl	8000f30 <Multiply>
 800273c:	4ba2      	ldr	r3, [pc, #648]	; (80029c8 <KalmanFilter+0x630>)
 800273e:	607b      	str	r3, [r7, #4]
 8002740:	f107 0608 	add.w	r6, r7, #8
 8002744:	4ba1      	ldr	r3, [pc, #644]	; (80029cc <KalmanFilter+0x634>)
 8002746:	ac08      	add	r4, sp, #32
 8002748:	461d      	mov	r5, r3
 800274a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800274c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800274e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002750:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002752:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002756:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800275a:	466d      	mov	r5, sp
 800275c:	f507 7496 	add.w	r4, r7, #300	; 0x12c
 8002760:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002762:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002764:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002768:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800276c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002770:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002772:	4630      	mov	r0, r6
 8002774:	f7fe fbdc 	bl	8000f30 <Multiply>
 8002778:	f107 0308 	add.w	r3, r7, #8
 800277c:	687c      	ldr	r4, [r7, #4]
 800277e:	461d      	mov	r5, r3
 8002780:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002782:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002784:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002786:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002788:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800278c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	x_k0 = Sum(xp_k, Multiply(K, y_k));
 8002790:	f507 7ca6 	add.w	ip, r7, #332	; 0x14c
 8002794:	4e8c      	ldr	r6, [pc, #560]	; (80029c8 <KalmanFilter+0x630>)
 8002796:	4b8e      	ldr	r3, [pc, #568]	; (80029d0 <KalmanFilter+0x638>)
 8002798:	ac08      	add	r4, sp, #32
 800279a:	461d      	mov	r5, r3
 800279c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800279e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80027a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80027ac:	466d      	mov	r5, sp
 80027ae:	f106 040c 	add.w	r4, r6, #12
 80027b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027b6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80027ba:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80027be:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80027c2:	4660      	mov	r0, ip
 80027c4:	f7fe fbb4 	bl	8000f30 <Multiply>
 80027c8:	4b82      	ldr	r3, [pc, #520]	; (80029d4 <KalmanFilter+0x63c>)
 80027ca:	607b      	str	r3, [r7, #4]
 80027cc:	f107 0c08 	add.w	ip, r7, #8
 80027d0:	4e81      	ldr	r6, [pc, #516]	; (80029d8 <KalmanFilter+0x640>)
 80027d2:	ad08      	add	r5, sp, #32
 80027d4:	f507 74a6 	add.w	r4, r7, #332	; 0x14c
 80027d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027e0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80027e4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80027e8:	466d      	mov	r5, sp
 80027ea:	f106 040c 	add.w	r4, r6, #12
 80027ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80027f6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80027fa:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80027fe:	4660      	mov	r0, ip
 8002800:	f7fe fc30 	bl	8001064 <Sum>
 8002804:	f107 0308 	add.w	r3, r7, #8
 8002808:	687c      	ldr	r4, [r7, #4]
 800280a:	461d      	mov	r5, r3
 800280c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800280e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002814:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002818:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	p_k0 = Multiply(Minus(I, Multiply(K, C)), pp_k);
 800281c:	f507 7cbc 	add.w	ip, r7, #376	; 0x178
 8002820:	4e69      	ldr	r6, [pc, #420]	; (80029c8 <KalmanFilter+0x630>)
 8002822:	4b6e      	ldr	r3, [pc, #440]	; (80029dc <KalmanFilter+0x644>)
 8002824:	ac08      	add	r4, sp, #32
 8002826:	461d      	mov	r5, r3
 8002828:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800282a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800282c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800282e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002830:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002834:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002838:	466d      	mov	r5, sp
 800283a:	f106 040c 	add.w	r4, r6, #12
 800283e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002840:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002842:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002846:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800284a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800284e:	4660      	mov	r0, ip
 8002850:	f7fe fb6e 	bl	8000f30 <Multiply>
 8002854:	f507 7cd2 	add.w	ip, r7, #420	; 0x1a4
 8002858:	4e61      	ldr	r6, [pc, #388]	; (80029e0 <KalmanFilter+0x648>)
 800285a:	ad08      	add	r5, sp, #32
 800285c:	f507 74bc 	add.w	r4, r7, #376	; 0x178
 8002860:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002862:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002864:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002866:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002868:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800286c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002870:	466d      	mov	r5, sp
 8002872:	f106 040c 	add.w	r4, r6, #12
 8002876:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002878:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800287a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800287e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002882:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002886:	4660      	mov	r0, ip
 8002888:	f7fe fc6c 	bl	8001164 <Minus>
 800288c:	4b55      	ldr	r3, [pc, #340]	; (80029e4 <KalmanFilter+0x64c>)
 800288e:	607b      	str	r3, [r7, #4]
 8002890:	f107 0608 	add.w	r6, r7, #8
 8002894:	4b4a      	ldr	r3, [pc, #296]	; (80029c0 <KalmanFilter+0x628>)
 8002896:	ac08      	add	r4, sp, #32
 8002898:	461d      	mov	r5, r3
 800289a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800289c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800289e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80028aa:	466d      	mov	r5, sp
 80028ac:	f507 74d8 	add.w	r4, r7, #432	; 0x1b0
 80028b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028b4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80028b8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80028bc:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 80028c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028c2:	4630      	mov	r0, r6
 80028c4:	f7fe fb34 	bl	8000f30 <Multiply>
 80028c8:	f107 0308 	add.w	r3, r7, #8
 80028cc:	687c      	ldr	r4, [r7, #4]
 80028ce:	461d      	mov	r5, r3
 80028d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	diff_theta_kalman = (x_k0.data[0][0] - x_k1.data[0][0])/(10.0/1000.0);
 80028e0:	4b3c      	ldr	r3, [pc, #240]	; (80029d4 <KalmanFilter+0x63c>)
 80028e2:	ed93 7a00 	vldr	s14, [r3]
 80028e6:	4b40      	ldr	r3, [pc, #256]	; (80029e8 <KalmanFilter+0x650>)
 80028e8:	edd3 7a00 	vldr	s15, [r3]
 80028ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028f0:	ee17 0a90 	vmov	r0, s15
 80028f4:	f7fd fdd4 	bl	80004a0 <__aeabi_f2d>
 80028f8:	a32f      	add	r3, pc, #188	; (adr r3, 80029b8 <KalmanFilter+0x620>)
 80028fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fe:	f7fd ff51 	bl	80007a4 <__aeabi_ddiv>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	4610      	mov	r0, r2
 8002908:	4619      	mov	r1, r3
 800290a:	f7fe f8d1 	bl	8000ab0 <__aeabi_d2f>
 800290e:	4603      	mov	r3, r0
 8002910:	4a36      	ldr	r2, [pc, #216]	; (80029ec <KalmanFilter+0x654>)
 8002912:	6013      	str	r3, [r2, #0]

	//Memory [N-1] data
	x_k1 = Store(x_k0);
 8002914:	4b34      	ldr	r3, [pc, #208]	; (80029e8 <KalmanFilter+0x650>)
 8002916:	607b      	str	r3, [r7, #4]
 8002918:	f107 0c08 	add.w	ip, r7, #8
 800291c:	4e2d      	ldr	r6, [pc, #180]	; (80029d4 <KalmanFilter+0x63c>)
 800291e:	466d      	mov	r5, sp
 8002920:	f106 040c 	add.w	r4, r6, #12
 8002924:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002926:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002928:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800292c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002930:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002934:	4660      	mov	r0, ip
 8002936:	f7fe fd79 	bl	800142c <Store>
 800293a:	f107 0308 	add.w	r3, r7, #8
 800293e:	687c      	ldr	r4, [r7, #4]
 8002940:	461d      	mov	r5, r3
 8002942:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002944:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002946:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800294a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800294e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	p_k1 = Store(p_k0);
 8002952:	4b27      	ldr	r3, [pc, #156]	; (80029f0 <KalmanFilter+0x658>)
 8002954:	607b      	str	r3, [r7, #4]
 8002956:	f107 0c08 	add.w	ip, r7, #8
 800295a:	4e22      	ldr	r6, [pc, #136]	; (80029e4 <KalmanFilter+0x64c>)
 800295c:	466d      	mov	r5, sp
 800295e:	f106 040c 	add.w	r4, r6, #12
 8002962:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002964:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002966:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800296a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800296e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002972:	4660      	mov	r0, ip
 8002974:	f7fe fd5a 	bl	800142c <Store>
 8002978:	f107 0308 	add.w	r3, r7, #8
 800297c:	687c      	ldr	r4, [r7, #4]
 800297e:	461d      	mov	r5, r3
 8002980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002984:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002986:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002988:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800298c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	output_theta = x_k0.data[0][0];
 8002990:	4b10      	ldr	r3, [pc, #64]	; (80029d4 <KalmanFilter+0x63c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a17      	ldr	r2, [pc, #92]	; (80029f4 <KalmanFilter+0x65c>)
 8002996:	6013      	str	r3, [r2, #0]
	zoutput_omega = x_k0.data[1][0];
 8002998:	4b0e      	ldr	r3, [pc, #56]	; (80029d4 <KalmanFilter+0x63c>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	4a16      	ldr	r2, [pc, #88]	; (80029f8 <KalmanFilter+0x660>)
 800299e:	6013      	str	r3, [r2, #0]
	return zoutput_omega;
 80029a0:	4b15      	ldr	r3, [pc, #84]	; (80029f8 <KalmanFilter+0x660>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	ee07 3a90 	vmov	s15, r3

}
 80029a8:	eeb0 0a67 	vmov.f32	s0, s15
 80029ac:	f507 77ea 	add.w	r7, r7, #468	; 0x1d4
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029b4:	f3af 8000 	nop.w
 80029b8:	47ae147b 	.word	0x47ae147b
 80029bc:	3f847ae1 	.word	0x3f847ae1
 80029c0:	200003e8 	.word	0x200003e8
 80029c4:	20000414 	.word	0x20000414
 80029c8:	20000214 	.word	0x20000214
 80029cc:	20000190 	.word	0x20000190
 80029d0:	200002c4 	.word	0x200002c4
 80029d4:	20000138 	.word	0x20000138
 80029d8:	20000164 	.word	0x20000164
 80029dc:	20000364 	.word	0x20000364
 80029e0:	200004e0 	.word	0x200004e0
 80029e4:	2000026c 	.word	0x2000026c
 80029e8:	20000338 	.word	0x20000338
 80029ec:	200000f4 	.word	0x200000f4
 80029f0:	20000298 	.word	0x20000298
 80029f4:	20000104 	.word	0x20000104
 80029f8:	20000108 	.word	0x20000108
 80029fc:	00000000 	.word	0x00000000

08002a00 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
	if (htim == &htim5)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a7e      	ldr	r2, [pc, #504]	; (8002c08 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	f040 8237 	bne.w	8002e82 <HAL_TIM_PeriodElapsedCallback+0x482>
	{
		timestamp = HAL_GetTick();
 8002a14:	f000 fc94 	bl	8003340 <HAL_GetTick>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	4a7c      	ldr	r2, [pc, #496]	; (8002c0c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002a1c:	6013      	str	r3, [r2, #0]
		storetime[0] = HAL_GetTick();
 8002a1e:	f000 fc8f 	bl	8003340 <HAL_GetTick>
 8002a22:	4603      	mov	r3, r0
 8002a24:	4a7a      	ldr	r2, [pc, #488]	; (8002c10 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002a26:	6013      	str	r3, [r2, #0]
		RadRel = (TIM2->CNT/3999.0)*(2*M_PI);
 8002a28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7fd fd14 	bl	800045c <__aeabi_ui2d>
 8002a34:	a36c      	add	r3, pc, #432	; (adr r3, 8002be8 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3a:	f7fd feb3 	bl	80007a4 <__aeabi_ddiv>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	460b      	mov	r3, r1
 8002a42:	4610      	mov	r0, r2
 8002a44:	4619      	mov	r1, r3
 8002a46:	a36a      	add	r3, pc, #424	; (adr r3, 8002bf0 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4c:	f7fd fd80 	bl	8000550 <__aeabi_dmul>
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	4610      	mov	r0, r2
 8002a56:	4619      	mov	r1, r3
 8002a58:	f7fe f82a 	bl	8000ab0 <__aeabi_d2f>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	4a6d      	ldr	r2, [pc, #436]	; (8002c14 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002a60:	6013      	str	r3, [r2, #0]
		Position[0] = RadRel;
 8002a62:	4b6c      	ldr	r3, [pc, #432]	; (8002c14 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a6c      	ldr	r2, [pc, #432]	; (8002c18 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002a68:	6013      	str	r3, [r2, #0]
		Velocity = (Position[0] - Position[1])/(10.0/1000.0);
 8002a6a:	4b6b      	ldr	r3, [pc, #428]	; (8002c18 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002a6c:	ed93 7a00 	vldr	s14, [r3]
 8002a70:	4b69      	ldr	r3, [pc, #420]	; (8002c18 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002a72:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a7a:	ee17 0a90 	vmov	r0, s15
 8002a7e:	f7fd fd0f 	bl	80004a0 <__aeabi_f2d>
 8002a82:	a35d      	add	r3, pc, #372	; (adr r3, 8002bf8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a88:	f7fd fe8c 	bl	80007a4 <__aeabi_ddiv>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4610      	mov	r0, r2
 8002a92:	4619      	mov	r1, r3
 8002a94:	f7fe f80c 	bl	8000ab0 <__aeabi_d2f>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	4a60      	ldr	r2, [pc, #384]	; (8002c1c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002a9c:	6013      	str	r3, [r2, #0]
		switch (state)
 8002a9e:	4b60      	ldr	r3, [pc, #384]	; (8002c20 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	2b05      	cmp	r3, #5
 8002aa4:	f200 8187 	bhi.w	8002db6 <HAL_TIM_PeriodElapsedCallback+0x3b6>
 8002aa8:	a201      	add	r2, pc, #4	; (adr r2, 8002ab0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aae:	bf00      	nop
 8002ab0:	08002ac9 	.word	0x08002ac9
 8002ab4:	08002ad9 	.word	0x08002ad9
 8002ab8:	08002aeb 	.word	0x08002aeb
 8002abc:	08002b57 	.word	0x08002b57
 8002ac0:	08002c45 	.word	0x08002c45
 8002ac4:	08002da5 	.word	0x08002da5
		{
		case Init:
			traject_time = timestamp;
 8002ac8:	4b50      	ldr	r3, [pc, #320]	; (8002c0c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a55      	ldr	r2, [pc, #340]	; (8002c24 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002ace:	6013      	str	r3, [r2, #0]
			state = Delay;
 8002ad0:	4b53      	ldr	r3, [pc, #332]	; (8002c20 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	701a      	strb	r2, [r3, #0]
			break;
 8002ad6:	e16f      	b.n	8002db8 <HAL_TIM_PeriodElapsedCallback+0x3b8>
		case Delay:
			path = 0;
 8002ad8:	4b53      	ldr	r3, [pc, #332]	; (8002c28 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002ada:	f04f 0200 	mov.w	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
			v_profile = 0;
 8002ae0:	4b52      	ldr	r3, [pc, #328]	; (8002c2c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
			break;
 8002ae8:	e166      	b.n	8002db8 <HAL_TIM_PeriodElapsedCallback+0x3b8>
		case Accerelation:
			path = 0.5*a*(pow(t,2));
 8002aea:	4b51      	ldr	r3, [pc, #324]	; (8002c30 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7fd fcd6 	bl	80004a0 <__aeabi_f2d>
 8002af4:	f04f 0200 	mov.w	r2, #0
 8002af8:	4b4e      	ldr	r3, [pc, #312]	; (8002c34 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002afa:	f7fd fd29 	bl	8000550 <__aeabi_dmul>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	4614      	mov	r4, r2
 8002b04:	461d      	mov	r5, r3
 8002b06:	4b4c      	ldr	r3, [pc, #304]	; (8002c38 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fd fcc8 	bl	80004a0 <__aeabi_f2d>
 8002b10:	4602      	mov	r2, r0
 8002b12:	460b      	mov	r3, r1
 8002b14:	ed9f 1b3a 	vldr	d1, [pc, #232]	; 8002c00 <HAL_TIM_PeriodElapsedCallback+0x200>
 8002b18:	ec43 2b10 	vmov	d0, r2, r3
 8002b1c:	f002 fed2 	bl	80058c4 <pow>
 8002b20:	ec53 2b10 	vmov	r2, r3, d0
 8002b24:	4620      	mov	r0, r4
 8002b26:	4629      	mov	r1, r5
 8002b28:	f7fd fd12 	bl	8000550 <__aeabi_dmul>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4610      	mov	r0, r2
 8002b32:	4619      	mov	r1, r3
 8002b34:	f7fd ffbc 	bl	8000ab0 <__aeabi_d2f>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	4a3b      	ldr	r2, [pc, #236]	; (8002c28 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002b3c:	6013      	str	r3, [r2, #0]
			v_profile = a*(t);
 8002b3e:	4b3c      	ldr	r3, [pc, #240]	; (8002c30 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002b40:	ed93 7a00 	vldr	s14, [r3]
 8002b44:	4b3c      	ldr	r3, [pc, #240]	; (8002c38 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002b46:	edd3 7a00 	vldr	s15, [r3]
 8002b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b4e:	4b37      	ldr	r3, [pc, #220]	; (8002c2c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002b50:	edc3 7a00 	vstr	s15, [r3]
			break;
 8002b54:	e130      	b.n	8002db8 <HAL_TIM_PeriodElapsedCallback+0x3b8>
		case Constant:
			path = (v_max*(t-t_acc)) + (0.5*a*(pow(t_acc,2)));
 8002b56:	4b38      	ldr	r3, [pc, #224]	; (8002c38 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002b58:	ed93 7a00 	vldr	s14, [r3]
 8002b5c:	4b37      	ldr	r3, [pc, #220]	; (8002c3c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002b5e:	edd3 7a00 	vldr	s15, [r3]
 8002b62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b66:	4b36      	ldr	r3, [pc, #216]	; (8002c40 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002b68:	edd3 7a00 	vldr	s15, [r3]
 8002b6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b70:	ee17 0a90 	vmov	r0, s15
 8002b74:	f7fd fc94 	bl	80004a0 <__aeabi_f2d>
 8002b78:	4604      	mov	r4, r0
 8002b7a:	460d      	mov	r5, r1
 8002b7c:	4b2c      	ldr	r3, [pc, #176]	; (8002c30 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fd fc8d 	bl	80004a0 <__aeabi_f2d>
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	4b2a      	ldr	r3, [pc, #168]	; (8002c34 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002b8c:	f7fd fce0 	bl	8000550 <__aeabi_dmul>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	4690      	mov	r8, r2
 8002b96:	4699      	mov	r9, r3
 8002b98:	4b28      	ldr	r3, [pc, #160]	; (8002c3c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fd fc7f 	bl	80004a0 <__aeabi_f2d>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8002c00 <HAL_TIM_PeriodElapsedCallback+0x200>
 8002baa:	ec43 2b10 	vmov	d0, r2, r3
 8002bae:	f002 fe89 	bl	80058c4 <pow>
 8002bb2:	ec53 2b10 	vmov	r2, r3, d0
 8002bb6:	4640      	mov	r0, r8
 8002bb8:	4649      	mov	r1, r9
 8002bba:	f7fd fcc9 	bl	8000550 <__aeabi_dmul>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	4620      	mov	r0, r4
 8002bc4:	4629      	mov	r1, r5
 8002bc6:	f7fd fb0d 	bl	80001e4 <__adddf3>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	460b      	mov	r3, r1
 8002bce:	4610      	mov	r0, r2
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	f7fd ff6d 	bl	8000ab0 <__aeabi_d2f>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	4a13      	ldr	r2, [pc, #76]	; (8002c28 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002bda:	6013      	str	r3, [r2, #0]
			v_profile = v_max;
 8002bdc:	4b18      	ldr	r3, [pc, #96]	; (8002c40 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a12      	ldr	r2, [pc, #72]	; (8002c2c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002be2:	6013      	str	r3, [r2, #0]
			break;
 8002be4:	e0e8      	b.n	8002db8 <HAL_TIM_PeriodElapsedCallback+0x3b8>
 8002be6:	bf00      	nop
 8002be8:	00000000 	.word	0x00000000
 8002bec:	40af3e00 	.word	0x40af3e00
 8002bf0:	54442d18 	.word	0x54442d18
 8002bf4:	401921fb 	.word	0x401921fb
 8002bf8:	47ae147b 	.word	0x47ae147b
 8002bfc:	3f847ae1 	.word	0x3f847ae1
 8002c00:	00000000 	.word	0x00000000
 8002c04:	40000000 	.word	0x40000000
 8002c08:	200002f0 	.word	0x200002f0
 8002c0c:	200000b0 	.word	0x200000b0
 8002c10:	200000a4 	.word	0x200000a4
 8002c14:	2000009c 	.word	0x2000009c
 8002c18:	200000e0 	.word	0x200000e0
 8002c1c:	200000e8 	.word	0x200000e8
 8002c20:	200000b4 	.word	0x200000b4
 8002c24:	200000b8 	.word	0x200000b8
 8002c28:	200000bc 	.word	0x200000bc
 8002c2c:	200000c0 	.word	0x200000c0
 8002c30:	200000d0 	.word	0x200000d0
 8002c34:	3fe00000 	.word	0x3fe00000
 8002c38:	200000c4 	.word	0x200000c4
 8002c3c:	20000004 	.word	0x20000004
 8002c40:	200000cc 	.word	0x200000cc
		case Decelelation:
			path = (v_max*(t-(t_constant+t_acc))) - (0.5*a*(pow(t-(t_constant+t_acc),2))) + (v_max*t_constant) + (0.5*a*(pow(t_acc,2)));
 8002c44:	4b94      	ldr	r3, [pc, #592]	; (8002e98 <HAL_TIM_PeriodElapsedCallback+0x498>)
 8002c46:	ed93 7a00 	vldr	s14, [r3]
 8002c4a:	4b94      	ldr	r3, [pc, #592]	; (8002e9c <HAL_TIM_PeriodElapsedCallback+0x49c>)
 8002c4c:	edd3 6a00 	vldr	s13, [r3]
 8002c50:	4b93      	ldr	r3, [pc, #588]	; (8002ea0 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 8002c52:	edd3 7a00 	vldr	s15, [r3]
 8002c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c5e:	4b91      	ldr	r3, [pc, #580]	; (8002ea4 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 8002c60:	edd3 7a00 	vldr	s15, [r3]
 8002c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c68:	ee17 0a90 	vmov	r0, s15
 8002c6c:	f7fd fc18 	bl	80004a0 <__aeabi_f2d>
 8002c70:	4604      	mov	r4, r0
 8002c72:	460d      	mov	r5, r1
 8002c74:	4b8c      	ldr	r3, [pc, #560]	; (8002ea8 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fd fc11 	bl	80004a0 <__aeabi_f2d>
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	4b8a      	ldr	r3, [pc, #552]	; (8002eac <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 8002c84:	f7fd fc64 	bl	8000550 <__aeabi_dmul>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4690      	mov	r8, r2
 8002c8e:	4699      	mov	r9, r3
 8002c90:	4b81      	ldr	r3, [pc, #516]	; (8002e98 <HAL_TIM_PeriodElapsedCallback+0x498>)
 8002c92:	ed93 7a00 	vldr	s14, [r3]
 8002c96:	4b81      	ldr	r3, [pc, #516]	; (8002e9c <HAL_TIM_PeriodElapsedCallback+0x49c>)
 8002c98:	edd3 6a00 	vldr	s13, [r3]
 8002c9c:	4b80      	ldr	r3, [pc, #512]	; (8002ea0 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 8002c9e:	edd3 7a00 	vldr	s15, [r3]
 8002ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ca6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002caa:	ee17 0a90 	vmov	r0, s15
 8002cae:	f7fd fbf7 	bl	80004a0 <__aeabi_f2d>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	ed9f 1b76 	vldr	d1, [pc, #472]	; 8002e90 <HAL_TIM_PeriodElapsedCallback+0x490>
 8002cba:	ec43 2b10 	vmov	d0, r2, r3
 8002cbe:	f002 fe01 	bl	80058c4 <pow>
 8002cc2:	ec53 2b10 	vmov	r2, r3, d0
 8002cc6:	4640      	mov	r0, r8
 8002cc8:	4649      	mov	r1, r9
 8002cca:	f7fd fc41 	bl	8000550 <__aeabi_dmul>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	4629      	mov	r1, r5
 8002cd6:	f7fd fa83 	bl	80001e0 <__aeabi_dsub>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	4614      	mov	r4, r2
 8002ce0:	461d      	mov	r5, r3
 8002ce2:	4b70      	ldr	r3, [pc, #448]	; (8002ea4 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 8002ce4:	ed93 7a00 	vldr	s14, [r3]
 8002ce8:	4b6c      	ldr	r3, [pc, #432]	; (8002e9c <HAL_TIM_PeriodElapsedCallback+0x49c>)
 8002cea:	edd3 7a00 	vldr	s15, [r3]
 8002cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cf2:	ee17 0a90 	vmov	r0, s15
 8002cf6:	f7fd fbd3 	bl	80004a0 <__aeabi_f2d>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	4620      	mov	r0, r4
 8002d00:	4629      	mov	r1, r5
 8002d02:	f7fd fa6f 	bl	80001e4 <__adddf3>
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4614      	mov	r4, r2
 8002d0c:	461d      	mov	r5, r3
 8002d0e:	4b66      	ldr	r3, [pc, #408]	; (8002ea8 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fd fbc4 	bl	80004a0 <__aeabi_f2d>
 8002d18:	f04f 0200 	mov.w	r2, #0
 8002d1c:	4b63      	ldr	r3, [pc, #396]	; (8002eac <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 8002d1e:	f7fd fc17 	bl	8000550 <__aeabi_dmul>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	4690      	mov	r8, r2
 8002d28:	4699      	mov	r9, r3
 8002d2a:	4b5d      	ldr	r3, [pc, #372]	; (8002ea0 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fd fbb6 	bl	80004a0 <__aeabi_f2d>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	ed9f 1b55 	vldr	d1, [pc, #340]	; 8002e90 <HAL_TIM_PeriodElapsedCallback+0x490>
 8002d3c:	ec43 2b10 	vmov	d0, r2, r3
 8002d40:	f002 fdc0 	bl	80058c4 <pow>
 8002d44:	ec53 2b10 	vmov	r2, r3, d0
 8002d48:	4640      	mov	r0, r8
 8002d4a:	4649      	mov	r1, r9
 8002d4c:	f7fd fc00 	bl	8000550 <__aeabi_dmul>
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	4620      	mov	r0, r4
 8002d56:	4629      	mov	r1, r5
 8002d58:	f7fd fa44 	bl	80001e4 <__adddf3>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	460b      	mov	r3, r1
 8002d60:	4610      	mov	r0, r2
 8002d62:	4619      	mov	r1, r3
 8002d64:	f7fd fea4 	bl	8000ab0 <__aeabi_d2f>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	4a51      	ldr	r2, [pc, #324]	; (8002eb0 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 8002d6c:	6013      	str	r3, [r2, #0]
			v_profile = v_max-(a*(t-(t_constant+t_acc)));
 8002d6e:	4b4d      	ldr	r3, [pc, #308]	; (8002ea4 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 8002d70:	ed93 7a00 	vldr	s14, [r3]
 8002d74:	4b48      	ldr	r3, [pc, #288]	; (8002e98 <HAL_TIM_PeriodElapsedCallback+0x498>)
 8002d76:	edd3 6a00 	vldr	s13, [r3]
 8002d7a:	4b48      	ldr	r3, [pc, #288]	; (8002e9c <HAL_TIM_PeriodElapsedCallback+0x49c>)
 8002d7c:	ed93 6a00 	vldr	s12, [r3]
 8002d80:	4b47      	ldr	r3, [pc, #284]	; (8002ea0 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 8002d82:	edd3 7a00 	vldr	s15, [r3]
 8002d86:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002d8a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002d8e:	4b46      	ldr	r3, [pc, #280]	; (8002ea8 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8002d90:	edd3 7a00 	vldr	s15, [r3]
 8002d94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d9c:	4b45      	ldr	r3, [pc, #276]	; (8002eb4 <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 8002d9e:	edc3 7a00 	vstr	s15, [r3]
			break;
 8002da2:	e009      	b.n	8002db8 <HAL_TIM_PeriodElapsedCallback+0x3b8>
		case Steadystate:
			path = theta;
 8002da4:	4b44      	ldr	r3, [pc, #272]	; (8002eb8 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a41      	ldr	r2, [pc, #260]	; (8002eb0 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 8002daa:	6013      	str	r3, [r2, #0]
			v_profile = 0;
 8002dac:	4b41      	ldr	r3, [pc, #260]	; (8002eb4 <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
			break;
 8002db4:	e000      	b.n	8002db8 <HAL_TIM_PeriodElapsedCallback+0x3b8>
		default:
			break;
 8002db6:	bf00      	nop

		}

		Error_theta = path - RadRel;
 8002db8:	4b3d      	ldr	r3, [pc, #244]	; (8002eb0 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 8002dba:	ed93 7a00 	vldr	s14, [r3]
 8002dbe:	4b3f      	ldr	r3, [pc, #252]	; (8002ebc <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 8002dc0:	edd3 7a00 	vldr	s15, [r3]
 8002dc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dc8:	4b3d      	ldr	r3, [pc, #244]	; (8002ec0 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8002dca:	edc3 7a00 	vstr	s15, [r3]
		velo_desire = PID_Controller_Outerloop(Error_theta);
 8002dce:	4b3c      	ldr	r3, [pc, #240]	; (8002ec0 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8002dd0:	edd3 7a00 	vldr	s15, [r3]
 8002dd4:	eeb0 0a67 	vmov.f32	s0, s15
 8002dd8:	f7ff fa62 	bl	80022a0 <PID_Controller_Outerloop>
 8002ddc:	eef0 7a40 	vmov.f32	s15, s0
 8002de0:	4b38      	ldr	r3, [pc, #224]	; (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 8002de2:	edc3 7a00 	vstr	s15, [r3]
		Velocity_Kalman = KalmanFilter(RadRel);
 8002de6:	4b35      	ldr	r3, [pc, #212]	; (8002ebc <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 8002de8:	edd3 7a00 	vldr	s15, [r3]
 8002dec:	eeb0 0a67 	vmov.f32	s0, s15
 8002df0:	f7ff fad2 	bl	8002398 <KalmanFilter>
 8002df4:	eef0 7a40 	vmov.f32	s15, s0
 8002df8:	4b33      	ldr	r3, [pc, #204]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8002dfa:	edc3 7a00 	vstr	s15, [r3]
		//Error_velocity = velo_desire - Velocity;
		Error_velocity = v_profile + velo_desire - Velocity_Kalman;
 8002dfe:	4b2d      	ldr	r3, [pc, #180]	; (8002eb4 <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 8002e00:	ed93 7a00 	vldr	s14, [r3]
 8002e04:	4b2f      	ldr	r3, [pc, #188]	; (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 8002e06:	edd3 7a00 	vldr	s15, [r3]
 8002e0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e0e:	4b2e      	ldr	r3, [pc, #184]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8002e10:	edd3 7a00 	vldr	s15, [r3]
 8002e14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e18:	4b2c      	ldr	r3, [pc, #176]	; (8002ecc <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8002e1a:	edc3 7a00 	vstr	s15, [r3]
		voltage = PID_Controller_Innerloop(Error_velocity);
 8002e1e:	4b2b      	ldr	r3, [pc, #172]	; (8002ecc <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8002e20:	edd3 7a00 	vldr	s15, [r3]
 8002e24:	eeb0 0a67 	vmov.f32	s0, s15
 8002e28:	f7ff f9c2 	bl	80021b0 <PID_Controller_Innerloop>
 8002e2c:	eef0 7a40 	vmov.f32	s15, s0
 8002e30:	4b27      	ldr	r3, [pc, #156]	; (8002ed0 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8002e32:	edc3 7a00 	vstr	s15, [r3]



		Drivemotor((voltage/12)*5000.0);
 8002e36:	4b26      	ldr	r3, [pc, #152]	; (8002ed0 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8002e38:	ed93 7a00 	vldr	s14, [r3]
 8002e3c:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 8002e40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e44:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002ed4 <HAL_TIM_PeriodElapsedCallback+0x4d4>
 8002e48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e4c:	eeb0 0a67 	vmov.f32	s0, s15
 8002e50:	f7ff f92e 	bl	80020b0 <Drivemotor>




		deltatime = storetime[0] - storetime[1];
 8002e54:	4b20      	ldr	r3, [pc, #128]	; (8002ed8 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	4b1f      	ldr	r3, [pc, #124]	; (8002ed8 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	4a1f      	ldr	r2, [pc, #124]	; (8002edc <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8002e60:	6013      	str	r3, [r2, #0]
		storetime[1] = storetime[0];
 8002e62:	4b1d      	ldr	r3, [pc, #116]	; (8002ed8 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a1c      	ldr	r2, [pc, #112]	; (8002ed8 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8002e68:	6053      	str	r3, [r2, #4]
		Position[1] = Position[0];
 8002e6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ee0 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a1c      	ldr	r2, [pc, #112]	; (8002ee0 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8002e70:	6053      	str	r3, [r2, #4]
		runtime = HAL_GetTick() - timestamp;
 8002e72:	f000 fa65 	bl	8003340 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	4b1a      	ldr	r3, [pc, #104]	; (8002ee4 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	4a1a      	ldr	r2, [pc, #104]	; (8002ee8 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8002e80:	6013      	str	r3, [r2, #0]
	}
}
 8002e82:	bf00      	nop
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e8c:	f3af 8000 	nop.w
 8002e90:	00000000 	.word	0x00000000
 8002e94:	40000000 	.word	0x40000000
 8002e98:	200000c4 	.word	0x200000c4
 8002e9c:	20000008 	.word	0x20000008
 8002ea0:	20000004 	.word	0x20000004
 8002ea4:	200000cc 	.word	0x200000cc
 8002ea8:	200000d0 	.word	0x200000d0
 8002eac:	3fe00000 	.word	0x3fe00000
 8002eb0:	200000bc 	.word	0x200000bc
 8002eb4:	200000c0 	.word	0x200000c0
 8002eb8:	20000000 	.word	0x20000000
 8002ebc:	2000009c 	.word	0x2000009c
 8002ec0:	200000d8 	.word	0x200000d8
 8002ec4:	200000f0 	.word	0x200000f0
 8002ec8:	200000ec 	.word	0x200000ec
 8002ecc:	200000dc 	.word	0x200000dc
 8002ed0:	200000d4 	.word	0x200000d4
 8002ed4:	459c4000 	.word	0x459c4000
 8002ed8:	200000a4 	.word	0x200000a4
 8002edc:	200000ac 	.word	0x200000ac
 8002ee0:	200000e0 	.word	0x200000e0
 8002ee4:	200000b0 	.word	0x200000b0
 8002ee8:	200000a0 	.word	0x200000a0

08002eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ef0:	b672      	cpsid	i
}
 8002ef2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ef4:	e7fe      	b.n	8002ef4 <Error_Handler+0x8>
	...

08002ef8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002efe:	2300      	movs	r3, #0
 8002f00:	607b      	str	r3, [r7, #4]
 8002f02:	4b10      	ldr	r3, [pc, #64]	; (8002f44 <HAL_MspInit+0x4c>)
 8002f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f06:	4a0f      	ldr	r2, [pc, #60]	; (8002f44 <HAL_MspInit+0x4c>)
 8002f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f0e:	4b0d      	ldr	r3, [pc, #52]	; (8002f44 <HAL_MspInit+0x4c>)
 8002f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f16:	607b      	str	r3, [r7, #4]
 8002f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	603b      	str	r3, [r7, #0]
 8002f1e:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <HAL_MspInit+0x4c>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	4a08      	ldr	r2, [pc, #32]	; (8002f44 <HAL_MspInit+0x4c>)
 8002f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f28:	6413      	str	r3, [r2, #64]	; 0x40
 8002f2a:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <HAL_MspInit+0x4c>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f32:	603b      	str	r3, [r7, #0]
 8002f34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002f36:	2007      	movs	r0, #7
 8002f38:	f000 fade 	bl	80034f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f3c:	bf00      	nop
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40023800 	.word	0x40023800

08002f48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a18      	ldr	r2, [pc, #96]	; (8002fb8 <HAL_TIM_Base_MspInit+0x70>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d10e      	bne.n	8002f78 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	4b17      	ldr	r3, [pc, #92]	; (8002fbc <HAL_TIM_Base_MspInit+0x74>)
 8002f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f62:	4a16      	ldr	r2, [pc, #88]	; (8002fbc <HAL_TIM_Base_MspInit+0x74>)
 8002f64:	f043 0301 	orr.w	r3, r3, #1
 8002f68:	6453      	str	r3, [r2, #68]	; 0x44
 8002f6a:	4b14      	ldr	r3, [pc, #80]	; (8002fbc <HAL_TIM_Base_MspInit+0x74>)
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002f76:	e01a      	b.n	8002fae <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a10      	ldr	r2, [pc, #64]	; (8002fc0 <HAL_TIM_Base_MspInit+0x78>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d115      	bne.n	8002fae <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002f82:	2300      	movs	r3, #0
 8002f84:	60bb      	str	r3, [r7, #8]
 8002f86:	4b0d      	ldr	r3, [pc, #52]	; (8002fbc <HAL_TIM_Base_MspInit+0x74>)
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	4a0c      	ldr	r2, [pc, #48]	; (8002fbc <HAL_TIM_Base_MspInit+0x74>)
 8002f8c:	f043 0308 	orr.w	r3, r3, #8
 8002f90:	6413      	str	r3, [r2, #64]	; 0x40
 8002f92:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <HAL_TIM_Base_MspInit+0x74>)
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	f003 0308 	and.w	r3, r3, #8
 8002f9a:	60bb      	str	r3, [r7, #8]
 8002f9c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	2032      	movs	r0, #50	; 0x32
 8002fa4:	f000 fab3 	bl	800350e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002fa8:	2032      	movs	r0, #50	; 0x32
 8002faa:	f000 facc 	bl	8003546 <HAL_NVIC_EnableIRQ>
}
 8002fae:	bf00      	nop
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40010000 	.word	0x40010000
 8002fbc:	40023800 	.word	0x40023800
 8002fc0:	40000c00 	.word	0x40000c00

08002fc4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b08a      	sub	sp, #40	; 0x28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fcc:	f107 0314 	add.w	r3, r7, #20
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	605a      	str	r2, [r3, #4]
 8002fd6:	609a      	str	r2, [r3, #8]
 8002fd8:	60da      	str	r2, [r3, #12]
 8002fda:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe4:	d14a      	bne.n	800307c <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	613b      	str	r3, [r7, #16]
 8002fea:	4b26      	ldr	r3, [pc, #152]	; (8003084 <HAL_TIM_Encoder_MspInit+0xc0>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	4a25      	ldr	r2, [pc, #148]	; (8003084 <HAL_TIM_Encoder_MspInit+0xc0>)
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff6:	4b23      	ldr	r3, [pc, #140]	; (8003084 <HAL_TIM_Encoder_MspInit+0xc0>)
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	613b      	str	r3, [r7, #16]
 8003000:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003002:	2300      	movs	r3, #0
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	4b1f      	ldr	r3, [pc, #124]	; (8003084 <HAL_TIM_Encoder_MspInit+0xc0>)
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	4a1e      	ldr	r2, [pc, #120]	; (8003084 <HAL_TIM_Encoder_MspInit+0xc0>)
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	6313      	str	r3, [r2, #48]	; 0x30
 8003012:	4b1c      	ldr	r3, [pc, #112]	; (8003084 <HAL_TIM_Encoder_MspInit+0xc0>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	60fb      	str	r3, [r7, #12]
 800301c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800301e:	2300      	movs	r3, #0
 8003020:	60bb      	str	r3, [r7, #8]
 8003022:	4b18      	ldr	r3, [pc, #96]	; (8003084 <HAL_TIM_Encoder_MspInit+0xc0>)
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	4a17      	ldr	r2, [pc, #92]	; (8003084 <HAL_TIM_Encoder_MspInit+0xc0>)
 8003028:	f043 0302 	orr.w	r3, r3, #2
 800302c:	6313      	str	r3, [r2, #48]	; 0x30
 800302e:	4b15      	ldr	r3, [pc, #84]	; (8003084 <HAL_TIM_Encoder_MspInit+0xc0>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	60bb      	str	r3, [r7, #8]
 8003038:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800303a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800303e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003040:	2302      	movs	r3, #2
 8003042:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003044:	2300      	movs	r3, #0
 8003046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003048:	2300      	movs	r3, #0
 800304a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800304c:	2301      	movs	r3, #1
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003050:	f107 0314 	add.w	r3, r7, #20
 8003054:	4619      	mov	r1, r3
 8003056:	480c      	ldr	r0, [pc, #48]	; (8003088 <HAL_TIM_Encoder_MspInit+0xc4>)
 8003058:	f000 fa90 	bl	800357c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800305c:	2308      	movs	r3, #8
 800305e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003060:	2302      	movs	r3, #2
 8003062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003064:	2300      	movs	r3, #0
 8003066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003068:	2300      	movs	r3, #0
 800306a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800306c:	2301      	movs	r3, #1
 800306e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003070:	f107 0314 	add.w	r3, r7, #20
 8003074:	4619      	mov	r1, r3
 8003076:	4805      	ldr	r0, [pc, #20]	; (800308c <HAL_TIM_Encoder_MspInit+0xc8>)
 8003078:	f000 fa80 	bl	800357c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800307c:	bf00      	nop
 800307e:	3728      	adds	r7, #40	; 0x28
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40023800 	.word	0x40023800
 8003088:	40020000 	.word	0x40020000
 800308c:	40020400 	.word	0x40020400

08003090 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b088      	sub	sp, #32
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003098:	f107 030c 	add.w	r3, r7, #12
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	605a      	str	r2, [r3, #4]
 80030a2:	609a      	str	r2, [r3, #8]
 80030a4:	60da      	str	r2, [r3, #12]
 80030a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a12      	ldr	r2, [pc, #72]	; (80030f8 <HAL_TIM_MspPostInit+0x68>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d11e      	bne.n	80030f0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030b2:	2300      	movs	r3, #0
 80030b4:	60bb      	str	r3, [r7, #8]
 80030b6:	4b11      	ldr	r3, [pc, #68]	; (80030fc <HAL_TIM_MspPostInit+0x6c>)
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	4a10      	ldr	r2, [pc, #64]	; (80030fc <HAL_TIM_MspPostInit+0x6c>)
 80030bc:	f043 0301 	orr.w	r3, r3, #1
 80030c0:	6313      	str	r3, [r2, #48]	; 0x30
 80030c2:	4b0e      	ldr	r3, [pc, #56]	; (80030fc <HAL_TIM_MspPostInit+0x6c>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	60bb      	str	r3, [r7, #8]
 80030cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80030ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d4:	2302      	movs	r3, #2
 80030d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d8:	2300      	movs	r3, #0
 80030da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030dc:	2300      	movs	r3, #0
 80030de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80030e0:	2301      	movs	r3, #1
 80030e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e4:	f107 030c 	add.w	r3, r7, #12
 80030e8:	4619      	mov	r1, r3
 80030ea:	4805      	ldr	r0, [pc, #20]	; (8003100 <HAL_TIM_MspPostInit+0x70>)
 80030ec:	f000 fa46 	bl	800357c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80030f0:	bf00      	nop
 80030f2:	3720      	adds	r7, #32
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40010000 	.word	0x40010000
 80030fc:	40023800 	.word	0x40023800
 8003100:	40020000 	.word	0x40020000

08003104 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b08a      	sub	sp, #40	; 0x28
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800310c:	f107 0314 	add.w	r3, r7, #20
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	605a      	str	r2, [r3, #4]
 8003116:	609a      	str	r2, [r3, #8]
 8003118:	60da      	str	r2, [r3, #12]
 800311a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a19      	ldr	r2, [pc, #100]	; (8003188 <HAL_UART_MspInit+0x84>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d12b      	bne.n	800317e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003126:	2300      	movs	r3, #0
 8003128:	613b      	str	r3, [r7, #16]
 800312a:	4b18      	ldr	r3, [pc, #96]	; (800318c <HAL_UART_MspInit+0x88>)
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	4a17      	ldr	r2, [pc, #92]	; (800318c <HAL_UART_MspInit+0x88>)
 8003130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003134:	6413      	str	r3, [r2, #64]	; 0x40
 8003136:	4b15      	ldr	r3, [pc, #84]	; (800318c <HAL_UART_MspInit+0x88>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313e:	613b      	str	r3, [r7, #16]
 8003140:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003142:	2300      	movs	r3, #0
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	4b11      	ldr	r3, [pc, #68]	; (800318c <HAL_UART_MspInit+0x88>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	4a10      	ldr	r2, [pc, #64]	; (800318c <HAL_UART_MspInit+0x88>)
 800314c:	f043 0301 	orr.w	r3, r3, #1
 8003150:	6313      	str	r3, [r2, #48]	; 0x30
 8003152:	4b0e      	ldr	r3, [pc, #56]	; (800318c <HAL_UART_MspInit+0x88>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800315e:	230c      	movs	r3, #12
 8003160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003162:	2302      	movs	r3, #2
 8003164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003166:	2300      	movs	r3, #0
 8003168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800316a:	2303      	movs	r3, #3
 800316c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800316e:	2307      	movs	r3, #7
 8003170:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003172:	f107 0314 	add.w	r3, r7, #20
 8003176:	4619      	mov	r1, r3
 8003178:	4805      	ldr	r0, [pc, #20]	; (8003190 <HAL_UART_MspInit+0x8c>)
 800317a:	f000 f9ff 	bl	800357c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800317e:	bf00      	nop
 8003180:	3728      	adds	r7, #40	; 0x28
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	40004400 	.word	0x40004400
 800318c:	40023800 	.word	0x40023800
 8003190:	40020000 	.word	0x40020000

08003194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003198:	e7fe      	b.n	8003198 <NMI_Handler+0x4>

0800319a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800319a:	b480      	push	{r7}
 800319c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800319e:	e7fe      	b.n	800319e <HardFault_Handler+0x4>

080031a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031a4:	e7fe      	b.n	80031a4 <MemManage_Handler+0x4>

080031a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031a6:	b480      	push	{r7}
 80031a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031aa:	e7fe      	b.n	80031aa <BusFault_Handler+0x4>

080031ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031b0:	e7fe      	b.n	80031b0 <UsageFault_Handler+0x4>

080031b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031b2:	b480      	push	{r7}
 80031b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031b6:	bf00      	nop
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031c4:	bf00      	nop
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031ce:	b480      	push	{r7}
 80031d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031d2:	bf00      	nop
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031e0:	f000 f89a 	bl	8003318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031e4:	bf00      	nop
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80031ec:	4802      	ldr	r0, [pc, #8]	; (80031f8 <TIM5_IRQHandler+0x10>)
 80031ee:	f001 fac7 	bl	8004780 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80031f2:	bf00      	nop
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	200002f0 	.word	0x200002f0

080031fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003200:	4b06      	ldr	r3, [pc, #24]	; (800321c <SystemInit+0x20>)
 8003202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003206:	4a05      	ldr	r2, [pc, #20]	; (800321c <SystemInit+0x20>)
 8003208:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800320c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003210:	bf00      	nop
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	e000ed00 	.word	0xe000ed00

08003220 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003220:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003258 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003224:	480d      	ldr	r0, [pc, #52]	; (800325c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003226:	490e      	ldr	r1, [pc, #56]	; (8003260 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003228:	4a0e      	ldr	r2, [pc, #56]	; (8003264 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800322a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800322c:	e002      	b.n	8003234 <LoopCopyDataInit>

0800322e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800322e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003232:	3304      	adds	r3, #4

08003234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003238:	d3f9      	bcc.n	800322e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800323a:	4a0b      	ldr	r2, [pc, #44]	; (8003268 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800323c:	4c0b      	ldr	r4, [pc, #44]	; (800326c <LoopFillZerobss+0x26>)
  movs r3, #0
 800323e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003240:	e001      	b.n	8003246 <LoopFillZerobss>

08003242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003244:	3204      	adds	r2, #4

08003246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003248:	d3fb      	bcc.n	8003242 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800324a:	f7ff ffd7 	bl	80031fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800324e:	f002 fb0d 	bl	800586c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003252:	f7fe f95d 	bl	8001510 <main>
  bx  lr    
 8003256:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003258:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800325c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003260:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8003264:	080068d8 	.word	0x080068d8
  ldr r2, =_sbss
 8003268:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800326c:	2000059c 	.word	0x2000059c

08003270 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003270:	e7fe      	b.n	8003270 <ADC_IRQHandler>
	...

08003274 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003278:	4b0e      	ldr	r3, [pc, #56]	; (80032b4 <HAL_Init+0x40>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a0d      	ldr	r2, [pc, #52]	; (80032b4 <HAL_Init+0x40>)
 800327e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003282:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003284:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <HAL_Init+0x40>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a0a      	ldr	r2, [pc, #40]	; (80032b4 <HAL_Init+0x40>)
 800328a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800328e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003290:	4b08      	ldr	r3, [pc, #32]	; (80032b4 <HAL_Init+0x40>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a07      	ldr	r2, [pc, #28]	; (80032b4 <HAL_Init+0x40>)
 8003296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800329a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800329c:	2003      	movs	r0, #3
 800329e:	f000 f92b 	bl	80034f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032a2:	2000      	movs	r0, #0
 80032a4:	f000 f808 	bl	80032b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032a8:	f7ff fe26 	bl	8002ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	40023c00 	.word	0x40023c00

080032b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032c0:	4b12      	ldr	r3, [pc, #72]	; (800330c <HAL_InitTick+0x54>)
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	4b12      	ldr	r3, [pc, #72]	; (8003310 <HAL_InitTick+0x58>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	4619      	mov	r1, r3
 80032ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80032d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 f943 	bl	8003562 <HAL_SYSTICK_Config>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e00e      	b.n	8003304 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b0f      	cmp	r3, #15
 80032ea:	d80a      	bhi.n	8003302 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032ec:	2200      	movs	r2, #0
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	f04f 30ff 	mov.w	r0, #4294967295
 80032f4:	f000 f90b 	bl	800350e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032f8:	4a06      	ldr	r2, [pc, #24]	; (8003314 <HAL_InitTick+0x5c>)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
 8003300:	e000      	b.n	8003304 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
}
 8003304:	4618      	mov	r0, r3
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	2000000c 	.word	0x2000000c
 8003310:	20000014 	.word	0x20000014
 8003314:	20000010 	.word	0x20000010

08003318 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800331c:	4b06      	ldr	r3, [pc, #24]	; (8003338 <HAL_IncTick+0x20>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	461a      	mov	r2, r3
 8003322:	4b06      	ldr	r3, [pc, #24]	; (800333c <HAL_IncTick+0x24>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4413      	add	r3, r2
 8003328:	4a04      	ldr	r2, [pc, #16]	; (800333c <HAL_IncTick+0x24>)
 800332a:	6013      	str	r3, [r2, #0]
}
 800332c:	bf00      	nop
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	20000014 	.word	0x20000014
 800333c:	20000598 	.word	0x20000598

08003340 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  return uwTick;
 8003344:	4b03      	ldr	r3, [pc, #12]	; (8003354 <HAL_GetTick+0x14>)
 8003346:	681b      	ldr	r3, [r3, #0]
}
 8003348:	4618      	mov	r0, r3
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	20000598 	.word	0x20000598

08003358 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003368:	4b0c      	ldr	r3, [pc, #48]	; (800339c <__NVIC_SetPriorityGrouping+0x44>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003374:	4013      	ands	r3, r2
 8003376:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003380:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003388:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800338a:	4a04      	ldr	r2, [pc, #16]	; (800339c <__NVIC_SetPriorityGrouping+0x44>)
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	60d3      	str	r3, [r2, #12]
}
 8003390:	bf00      	nop
 8003392:	3714      	adds	r7, #20
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	e000ed00 	.word	0xe000ed00

080033a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033a4:	4b04      	ldr	r3, [pc, #16]	; (80033b8 <__NVIC_GetPriorityGrouping+0x18>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	0a1b      	lsrs	r3, r3, #8
 80033aa:	f003 0307 	and.w	r3, r3, #7
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	e000ed00 	.word	0xe000ed00

080033bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	4603      	mov	r3, r0
 80033c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	db0b      	blt.n	80033e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ce:	79fb      	ldrb	r3, [r7, #7]
 80033d0:	f003 021f 	and.w	r2, r3, #31
 80033d4:	4907      	ldr	r1, [pc, #28]	; (80033f4 <__NVIC_EnableIRQ+0x38>)
 80033d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033da:	095b      	lsrs	r3, r3, #5
 80033dc:	2001      	movs	r0, #1
 80033de:	fa00 f202 	lsl.w	r2, r0, r2
 80033e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033e6:	bf00      	nop
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	e000e100 	.word	0xe000e100

080033f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	6039      	str	r1, [r7, #0]
 8003402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003408:	2b00      	cmp	r3, #0
 800340a:	db0a      	blt.n	8003422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	b2da      	uxtb	r2, r3
 8003410:	490c      	ldr	r1, [pc, #48]	; (8003444 <__NVIC_SetPriority+0x4c>)
 8003412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003416:	0112      	lsls	r2, r2, #4
 8003418:	b2d2      	uxtb	r2, r2
 800341a:	440b      	add	r3, r1
 800341c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003420:	e00a      	b.n	8003438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	b2da      	uxtb	r2, r3
 8003426:	4908      	ldr	r1, [pc, #32]	; (8003448 <__NVIC_SetPriority+0x50>)
 8003428:	79fb      	ldrb	r3, [r7, #7]
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	3b04      	subs	r3, #4
 8003430:	0112      	lsls	r2, r2, #4
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	440b      	add	r3, r1
 8003436:	761a      	strb	r2, [r3, #24]
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	e000e100 	.word	0xe000e100
 8003448:	e000ed00 	.word	0xe000ed00

0800344c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800344c:	b480      	push	{r7}
 800344e:	b089      	sub	sp, #36	; 0x24
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	f1c3 0307 	rsb	r3, r3, #7
 8003466:	2b04      	cmp	r3, #4
 8003468:	bf28      	it	cs
 800346a:	2304      	movcs	r3, #4
 800346c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	3304      	adds	r3, #4
 8003472:	2b06      	cmp	r3, #6
 8003474:	d902      	bls.n	800347c <NVIC_EncodePriority+0x30>
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	3b03      	subs	r3, #3
 800347a:	e000      	b.n	800347e <NVIC_EncodePriority+0x32>
 800347c:	2300      	movs	r3, #0
 800347e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003480:	f04f 32ff 	mov.w	r2, #4294967295
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	43da      	mvns	r2, r3
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	401a      	ands	r2, r3
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003494:	f04f 31ff 	mov.w	r1, #4294967295
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	fa01 f303 	lsl.w	r3, r1, r3
 800349e:	43d9      	mvns	r1, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034a4:	4313      	orrs	r3, r2
         );
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3724      	adds	r7, #36	; 0x24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
	...

080034b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3b01      	subs	r3, #1
 80034c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034c4:	d301      	bcc.n	80034ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034c6:	2301      	movs	r3, #1
 80034c8:	e00f      	b.n	80034ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034ca:	4a0a      	ldr	r2, [pc, #40]	; (80034f4 <SysTick_Config+0x40>)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3b01      	subs	r3, #1
 80034d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034d2:	210f      	movs	r1, #15
 80034d4:	f04f 30ff 	mov.w	r0, #4294967295
 80034d8:	f7ff ff8e 	bl	80033f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034dc:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <SysTick_Config+0x40>)
 80034de:	2200      	movs	r2, #0
 80034e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034e2:	4b04      	ldr	r3, [pc, #16]	; (80034f4 <SysTick_Config+0x40>)
 80034e4:	2207      	movs	r2, #7
 80034e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	e000e010 	.word	0xe000e010

080034f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7ff ff29 	bl	8003358 <__NVIC_SetPriorityGrouping>
}
 8003506:	bf00      	nop
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800350e:	b580      	push	{r7, lr}
 8003510:	b086      	sub	sp, #24
 8003512:	af00      	add	r7, sp, #0
 8003514:	4603      	mov	r3, r0
 8003516:	60b9      	str	r1, [r7, #8]
 8003518:	607a      	str	r2, [r7, #4]
 800351a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800351c:	2300      	movs	r3, #0
 800351e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003520:	f7ff ff3e 	bl	80033a0 <__NVIC_GetPriorityGrouping>
 8003524:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	68b9      	ldr	r1, [r7, #8]
 800352a:	6978      	ldr	r0, [r7, #20]
 800352c:	f7ff ff8e 	bl	800344c <NVIC_EncodePriority>
 8003530:	4602      	mov	r2, r0
 8003532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003536:	4611      	mov	r1, r2
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff ff5d 	bl	80033f8 <__NVIC_SetPriority>
}
 800353e:	bf00      	nop
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b082      	sub	sp, #8
 800354a:	af00      	add	r7, sp, #0
 800354c:	4603      	mov	r3, r0
 800354e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff ff31 	bl	80033bc <__NVIC_EnableIRQ>
}
 800355a:	bf00      	nop
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7ff ffa2 	bl	80034b4 <SysTick_Config>
 8003570:	4603      	mov	r3, r0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
	...

0800357c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800357c:	b480      	push	{r7}
 800357e:	b089      	sub	sp, #36	; 0x24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003586:	2300      	movs	r3, #0
 8003588:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800358a:	2300      	movs	r3, #0
 800358c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800358e:	2300      	movs	r3, #0
 8003590:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003592:	2300      	movs	r3, #0
 8003594:	61fb      	str	r3, [r7, #28]
 8003596:	e159      	b.n	800384c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003598:	2201      	movs	r2, #1
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	4013      	ands	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	f040 8148 	bne.w	8003846 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d005      	beq.n	80035ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d130      	bne.n	8003630 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	2203      	movs	r2, #3
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	43db      	mvns	r3, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4013      	ands	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	68da      	ldr	r2, [r3, #12]
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003604:	2201      	movs	r2, #1
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	43db      	mvns	r3, r3
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	4013      	ands	r3, r2
 8003612:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	091b      	lsrs	r3, r3, #4
 800361a:	f003 0201 	and.w	r2, r3, #1
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	4313      	orrs	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f003 0303 	and.w	r3, r3, #3
 8003638:	2b03      	cmp	r3, #3
 800363a:	d017      	beq.n	800366c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	2203      	movs	r2, #3
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	43db      	mvns	r3, r3
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	4013      	ands	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	4313      	orrs	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f003 0303 	and.w	r3, r3, #3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d123      	bne.n	80036c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	08da      	lsrs	r2, r3, #3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3208      	adds	r2, #8
 8003680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003684:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	220f      	movs	r2, #15
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	43db      	mvns	r3, r3
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	4013      	ands	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	691a      	ldr	r2, [r3, #16]
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	08da      	lsrs	r2, r3, #3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	3208      	adds	r2, #8
 80036ba:	69b9      	ldr	r1, [r7, #24]
 80036bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	2203      	movs	r2, #3
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	43db      	mvns	r3, r3
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	4013      	ands	r3, r2
 80036d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f003 0203 	and.w	r2, r3, #3
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 80a2 	beq.w	8003846 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003702:	2300      	movs	r3, #0
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	4b57      	ldr	r3, [pc, #348]	; (8003864 <HAL_GPIO_Init+0x2e8>)
 8003708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370a:	4a56      	ldr	r2, [pc, #344]	; (8003864 <HAL_GPIO_Init+0x2e8>)
 800370c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003710:	6453      	str	r3, [r2, #68]	; 0x44
 8003712:	4b54      	ldr	r3, [pc, #336]	; (8003864 <HAL_GPIO_Init+0x2e8>)
 8003714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800371e:	4a52      	ldr	r2, [pc, #328]	; (8003868 <HAL_GPIO_Init+0x2ec>)
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	089b      	lsrs	r3, r3, #2
 8003724:	3302      	adds	r3, #2
 8003726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800372a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	f003 0303 	and.w	r3, r3, #3
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	220f      	movs	r2, #15
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	43db      	mvns	r3, r3
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	4013      	ands	r3, r2
 8003740:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a49      	ldr	r2, [pc, #292]	; (800386c <HAL_GPIO_Init+0x2f0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d019      	beq.n	800377e <HAL_GPIO_Init+0x202>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a48      	ldr	r2, [pc, #288]	; (8003870 <HAL_GPIO_Init+0x2f4>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d013      	beq.n	800377a <HAL_GPIO_Init+0x1fe>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a47      	ldr	r2, [pc, #284]	; (8003874 <HAL_GPIO_Init+0x2f8>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d00d      	beq.n	8003776 <HAL_GPIO_Init+0x1fa>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a46      	ldr	r2, [pc, #280]	; (8003878 <HAL_GPIO_Init+0x2fc>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d007      	beq.n	8003772 <HAL_GPIO_Init+0x1f6>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a45      	ldr	r2, [pc, #276]	; (800387c <HAL_GPIO_Init+0x300>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d101      	bne.n	800376e <HAL_GPIO_Init+0x1f2>
 800376a:	2304      	movs	r3, #4
 800376c:	e008      	b.n	8003780 <HAL_GPIO_Init+0x204>
 800376e:	2307      	movs	r3, #7
 8003770:	e006      	b.n	8003780 <HAL_GPIO_Init+0x204>
 8003772:	2303      	movs	r3, #3
 8003774:	e004      	b.n	8003780 <HAL_GPIO_Init+0x204>
 8003776:	2302      	movs	r3, #2
 8003778:	e002      	b.n	8003780 <HAL_GPIO_Init+0x204>
 800377a:	2301      	movs	r3, #1
 800377c:	e000      	b.n	8003780 <HAL_GPIO_Init+0x204>
 800377e:	2300      	movs	r3, #0
 8003780:	69fa      	ldr	r2, [r7, #28]
 8003782:	f002 0203 	and.w	r2, r2, #3
 8003786:	0092      	lsls	r2, r2, #2
 8003788:	4093      	lsls	r3, r2
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	4313      	orrs	r3, r2
 800378e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003790:	4935      	ldr	r1, [pc, #212]	; (8003868 <HAL_GPIO_Init+0x2ec>)
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	089b      	lsrs	r3, r3, #2
 8003796:	3302      	adds	r3, #2
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800379e:	4b38      	ldr	r3, [pc, #224]	; (8003880 <HAL_GPIO_Init+0x304>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	43db      	mvns	r3, r3
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	4013      	ands	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	4313      	orrs	r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037c2:	4a2f      	ldr	r2, [pc, #188]	; (8003880 <HAL_GPIO_Init+0x304>)
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80037c8:	4b2d      	ldr	r3, [pc, #180]	; (8003880 <HAL_GPIO_Init+0x304>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	43db      	mvns	r3, r3
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	4013      	ands	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d003      	beq.n	80037ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037ec:	4a24      	ldr	r2, [pc, #144]	; (8003880 <HAL_GPIO_Init+0x304>)
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037f2:	4b23      	ldr	r3, [pc, #140]	; (8003880 <HAL_GPIO_Init+0x304>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	43db      	mvns	r3, r3
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	4013      	ands	r3, r2
 8003800:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	4313      	orrs	r3, r2
 8003814:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003816:	4a1a      	ldr	r2, [pc, #104]	; (8003880 <HAL_GPIO_Init+0x304>)
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800381c:	4b18      	ldr	r3, [pc, #96]	; (8003880 <HAL_GPIO_Init+0x304>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	43db      	mvns	r3, r3
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4013      	ands	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d003      	beq.n	8003840 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	4313      	orrs	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003840:	4a0f      	ldr	r2, [pc, #60]	; (8003880 <HAL_GPIO_Init+0x304>)
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	3301      	adds	r3, #1
 800384a:	61fb      	str	r3, [r7, #28]
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	2b0f      	cmp	r3, #15
 8003850:	f67f aea2 	bls.w	8003598 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003854:	bf00      	nop
 8003856:	bf00      	nop
 8003858:	3724      	adds	r7, #36	; 0x24
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	40023800 	.word	0x40023800
 8003868:	40013800 	.word	0x40013800
 800386c:	40020000 	.word	0x40020000
 8003870:	40020400 	.word	0x40020400
 8003874:	40020800 	.word	0x40020800
 8003878:	40020c00 	.word	0x40020c00
 800387c:	40021000 	.word	0x40021000
 8003880:	40013c00 	.word	0x40013c00

08003884 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	460b      	mov	r3, r1
 800388e:	807b      	strh	r3, [r7, #2]
 8003890:	4613      	mov	r3, r2
 8003892:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003894:	787b      	ldrb	r3, [r7, #1]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800389a:	887a      	ldrh	r2, [r7, #2]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038a0:	e003      	b.n	80038aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038a2:	887b      	ldrh	r3, [r7, #2]
 80038a4:	041a      	lsls	r2, r3, #16
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	619a      	str	r2, [r3, #24]
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
	...

080038b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e264      	b.n	8003d94 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d075      	beq.n	80039c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038d6:	4ba3      	ldr	r3, [pc, #652]	; (8003b64 <HAL_RCC_OscConfig+0x2ac>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f003 030c 	and.w	r3, r3, #12
 80038de:	2b04      	cmp	r3, #4
 80038e0:	d00c      	beq.n	80038fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038e2:	4ba0      	ldr	r3, [pc, #640]	; (8003b64 <HAL_RCC_OscConfig+0x2ac>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	d112      	bne.n	8003914 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038ee:	4b9d      	ldr	r3, [pc, #628]	; (8003b64 <HAL_RCC_OscConfig+0x2ac>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038fa:	d10b      	bne.n	8003914 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038fc:	4b99      	ldr	r3, [pc, #612]	; (8003b64 <HAL_RCC_OscConfig+0x2ac>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d05b      	beq.n	80039c0 <HAL_RCC_OscConfig+0x108>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d157      	bne.n	80039c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e23f      	b.n	8003d94 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800391c:	d106      	bne.n	800392c <HAL_RCC_OscConfig+0x74>
 800391e:	4b91      	ldr	r3, [pc, #580]	; (8003b64 <HAL_RCC_OscConfig+0x2ac>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a90      	ldr	r2, [pc, #576]	; (8003b64 <HAL_RCC_OscConfig+0x2ac>)
 8003924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	e01d      	b.n	8003968 <HAL_RCC_OscConfig+0xb0>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003934:	d10c      	bne.n	8003950 <HAL_RCC_OscConfig+0x98>
 8003936:	4b8b      	ldr	r3, [pc, #556]	; (8003b64 <HAL_RCC_OscConfig+0x2ac>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a8a      	ldr	r2, [pc, #552]	; (8003b64 <HAL_RCC_OscConfig+0x2ac>)
 800393c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	4b88      	ldr	r3, [pc, #544]	; (8003b64 <HAL_RCC_OscConfig+0x2ac>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a87      	ldr	r2, [pc, #540]	; (8003b64 <HAL_RCC_OscConfig+0x2ac>)
 8003948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800394c:	6013      	str	r3, [r2, #0]
 800394e:	e00b      	b.n	8003968 <HAL_RCC_OscConfig+0xb0>
 8003950:	4b84      	ldr	r3, [pc, #528]	; (8003b64 <HAL_RCC_OscConfig+0x2ac>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a83      	ldr	r2, [pc, #524]	; (8003b64 <HAL_RCC_OscConfig+0x2ac>)
 8003956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	4b81      	ldr	r3, [pc, #516]	; (8003b64 <HAL_RCC_OscConfig+0x2ac>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a80      	ldr	r2, [pc, #512]	; (8003b64 <HAL_RCC_OscConfig+0x2ac>)
 8003962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003966:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d013      	beq.n	8003998 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003970:	f7ff fce6 	bl	8003340 <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003978:	f7ff fce2 	bl	8003340 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b64      	cmp	r3, #100	; 0x64
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e204      	b.n	8003d94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800398a:	4b76      	ldr	r3, [pc, #472]	; (8003b64 <HAL_RCC_OscConfig+0x2ac>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0f0      	beq.n	8003978 <HAL_RCC_OscConfig+0xc0>
 8003996:	e014      	b.n	80039c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003998:	f7ff fcd2 	bl	8003340 <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039a0:	f7ff fcce 	bl	8003340 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b64      	cmp	r3, #100	; 0x64
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e1f0      	b.n	8003d94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039b2:	4b6c      	ldr	r3, [pc, #432]	; (8003b64 <HAL_RCC_OscConfig+0x2ac>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1f0      	bne.n	80039a0 <HAL_RCC_OscConfig+0xe8>
 80039be:	e000      	b.n	80039c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d063      	beq.n	8003a96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039ce:	4b65      	ldr	r3, [pc, #404]	; (8003b64 <HAL_RCC_OscConfig+0x2ac>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 030c 	and.w	r3, r3, #12
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00b      	beq.n	80039f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039da:	4b62      	ldr	r3, [pc, #392]	; (8003b64 <HAL_RCC_OscConfig+0x2ac>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039e2:	2b08      	cmp	r3, #8
 80039e4:	d11c      	bne.n	8003a20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039e6:	4b5f      	ldr	r3, [pc, #380]	; (8003b64 <HAL_RCC_OscConfig+0x2ac>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d116      	bne.n	8003a20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039f2:	4b5c      	ldr	r3, [pc, #368]	; (8003b64 <HAL_RCC_OscConfig+0x2ac>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d005      	beq.n	8003a0a <HAL_RCC_OscConfig+0x152>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d001      	beq.n	8003a0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e1c4      	b.n	8003d94 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a0a:	4b56      	ldr	r3, [pc, #344]	; (8003b64 <HAL_RCC_OscConfig+0x2ac>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	4952      	ldr	r1, [pc, #328]	; (8003b64 <HAL_RCC_OscConfig+0x2ac>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a1e:	e03a      	b.n	8003a96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d020      	beq.n	8003a6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a28:	4b4f      	ldr	r3, [pc, #316]	; (8003b68 <HAL_RCC_OscConfig+0x2b0>)
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2e:	f7ff fc87 	bl	8003340 <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a34:	e008      	b.n	8003a48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a36:	f7ff fc83 	bl	8003340 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e1a5      	b.n	8003d94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a48:	4b46      	ldr	r3, [pc, #280]	; (8003b64 <HAL_RCC_OscConfig+0x2ac>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0f0      	beq.n	8003a36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a54:	4b43      	ldr	r3, [pc, #268]	; (8003b64 <HAL_RCC_OscConfig+0x2ac>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	00db      	lsls	r3, r3, #3
 8003a62:	4940      	ldr	r1, [pc, #256]	; (8003b64 <HAL_RCC_OscConfig+0x2ac>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	600b      	str	r3, [r1, #0]
 8003a68:	e015      	b.n	8003a96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a6a:	4b3f      	ldr	r3, [pc, #252]	; (8003b68 <HAL_RCC_OscConfig+0x2b0>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a70:	f7ff fc66 	bl	8003340 <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a78:	f7ff fc62 	bl	8003340 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e184      	b.n	8003d94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a8a:	4b36      	ldr	r3, [pc, #216]	; (8003b64 <HAL_RCC_OscConfig+0x2ac>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1f0      	bne.n	8003a78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d030      	beq.n	8003b04 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d016      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aaa:	4b30      	ldr	r3, [pc, #192]	; (8003b6c <HAL_RCC_OscConfig+0x2b4>)
 8003aac:	2201      	movs	r2, #1
 8003aae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab0:	f7ff fc46 	bl	8003340 <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ab8:	f7ff fc42 	bl	8003340 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e164      	b.n	8003d94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aca:	4b26      	ldr	r3, [pc, #152]	; (8003b64 <HAL_RCC_OscConfig+0x2ac>)
 8003acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0f0      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x200>
 8003ad6:	e015      	b.n	8003b04 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ad8:	4b24      	ldr	r3, [pc, #144]	; (8003b6c <HAL_RCC_OscConfig+0x2b4>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ade:	f7ff fc2f 	bl	8003340 <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ae6:	f7ff fc2b 	bl	8003340 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e14d      	b.n	8003d94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af8:	4b1a      	ldr	r3, [pc, #104]	; (8003b64 <HAL_RCC_OscConfig+0x2ac>)
 8003afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1f0      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 80a0 	beq.w	8003c52 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b12:	2300      	movs	r3, #0
 8003b14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b16:	4b13      	ldr	r3, [pc, #76]	; (8003b64 <HAL_RCC_OscConfig+0x2ac>)
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10f      	bne.n	8003b42 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b22:	2300      	movs	r3, #0
 8003b24:	60bb      	str	r3, [r7, #8]
 8003b26:	4b0f      	ldr	r3, [pc, #60]	; (8003b64 <HAL_RCC_OscConfig+0x2ac>)
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	4a0e      	ldr	r2, [pc, #56]	; (8003b64 <HAL_RCC_OscConfig+0x2ac>)
 8003b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b30:	6413      	str	r3, [r2, #64]	; 0x40
 8003b32:	4b0c      	ldr	r3, [pc, #48]	; (8003b64 <HAL_RCC_OscConfig+0x2ac>)
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b3a:	60bb      	str	r3, [r7, #8]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b42:	4b0b      	ldr	r3, [pc, #44]	; (8003b70 <HAL_RCC_OscConfig+0x2b8>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d121      	bne.n	8003b92 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b4e:	4b08      	ldr	r3, [pc, #32]	; (8003b70 <HAL_RCC_OscConfig+0x2b8>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a07      	ldr	r2, [pc, #28]	; (8003b70 <HAL_RCC_OscConfig+0x2b8>)
 8003b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b5a:	f7ff fbf1 	bl	8003340 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b60:	e011      	b.n	8003b86 <HAL_RCC_OscConfig+0x2ce>
 8003b62:	bf00      	nop
 8003b64:	40023800 	.word	0x40023800
 8003b68:	42470000 	.word	0x42470000
 8003b6c:	42470e80 	.word	0x42470e80
 8003b70:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b74:	f7ff fbe4 	bl	8003340 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e106      	b.n	8003d94 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b86:	4b85      	ldr	r3, [pc, #532]	; (8003d9c <HAL_RCC_OscConfig+0x4e4>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0f0      	beq.n	8003b74 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d106      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x2f0>
 8003b9a:	4b81      	ldr	r3, [pc, #516]	; (8003da0 <HAL_RCC_OscConfig+0x4e8>)
 8003b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9e:	4a80      	ldr	r2, [pc, #512]	; (8003da0 <HAL_RCC_OscConfig+0x4e8>)
 8003ba0:	f043 0301 	orr.w	r3, r3, #1
 8003ba4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ba6:	e01c      	b.n	8003be2 <HAL_RCC_OscConfig+0x32a>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	2b05      	cmp	r3, #5
 8003bae:	d10c      	bne.n	8003bca <HAL_RCC_OscConfig+0x312>
 8003bb0:	4b7b      	ldr	r3, [pc, #492]	; (8003da0 <HAL_RCC_OscConfig+0x4e8>)
 8003bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb4:	4a7a      	ldr	r2, [pc, #488]	; (8003da0 <HAL_RCC_OscConfig+0x4e8>)
 8003bb6:	f043 0304 	orr.w	r3, r3, #4
 8003bba:	6713      	str	r3, [r2, #112]	; 0x70
 8003bbc:	4b78      	ldr	r3, [pc, #480]	; (8003da0 <HAL_RCC_OscConfig+0x4e8>)
 8003bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc0:	4a77      	ldr	r2, [pc, #476]	; (8003da0 <HAL_RCC_OscConfig+0x4e8>)
 8003bc2:	f043 0301 	orr.w	r3, r3, #1
 8003bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc8:	e00b      	b.n	8003be2 <HAL_RCC_OscConfig+0x32a>
 8003bca:	4b75      	ldr	r3, [pc, #468]	; (8003da0 <HAL_RCC_OscConfig+0x4e8>)
 8003bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bce:	4a74      	ldr	r2, [pc, #464]	; (8003da0 <HAL_RCC_OscConfig+0x4e8>)
 8003bd0:	f023 0301 	bic.w	r3, r3, #1
 8003bd4:	6713      	str	r3, [r2, #112]	; 0x70
 8003bd6:	4b72      	ldr	r3, [pc, #456]	; (8003da0 <HAL_RCC_OscConfig+0x4e8>)
 8003bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bda:	4a71      	ldr	r2, [pc, #452]	; (8003da0 <HAL_RCC_OscConfig+0x4e8>)
 8003bdc:	f023 0304 	bic.w	r3, r3, #4
 8003be0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d015      	beq.n	8003c16 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bea:	f7ff fba9 	bl	8003340 <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf0:	e00a      	b.n	8003c08 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bf2:	f7ff fba5 	bl	8003340 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d901      	bls.n	8003c08 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e0c5      	b.n	8003d94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c08:	4b65      	ldr	r3, [pc, #404]	; (8003da0 <HAL_RCC_OscConfig+0x4e8>)
 8003c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0ee      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x33a>
 8003c14:	e014      	b.n	8003c40 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c16:	f7ff fb93 	bl	8003340 <HAL_GetTick>
 8003c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c1c:	e00a      	b.n	8003c34 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c1e:	f7ff fb8f 	bl	8003340 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e0af      	b.n	8003d94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c34:	4b5a      	ldr	r3, [pc, #360]	; (8003da0 <HAL_RCC_OscConfig+0x4e8>)
 8003c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1ee      	bne.n	8003c1e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c40:	7dfb      	ldrb	r3, [r7, #23]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d105      	bne.n	8003c52 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c46:	4b56      	ldr	r3, [pc, #344]	; (8003da0 <HAL_RCC_OscConfig+0x4e8>)
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	4a55      	ldr	r2, [pc, #340]	; (8003da0 <HAL_RCC_OscConfig+0x4e8>)
 8003c4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c50:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 809b 	beq.w	8003d92 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c5c:	4b50      	ldr	r3, [pc, #320]	; (8003da0 <HAL_RCC_OscConfig+0x4e8>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 030c 	and.w	r3, r3, #12
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	d05c      	beq.n	8003d22 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d141      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c70:	4b4c      	ldr	r3, [pc, #304]	; (8003da4 <HAL_RCC_OscConfig+0x4ec>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c76:	f7ff fb63 	bl	8003340 <HAL_GetTick>
 8003c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c7c:	e008      	b.n	8003c90 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c7e:	f7ff fb5f 	bl	8003340 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e081      	b.n	8003d94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c90:	4b43      	ldr	r3, [pc, #268]	; (8003da0 <HAL_RCC_OscConfig+0x4e8>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1f0      	bne.n	8003c7e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	69da      	ldr	r2, [r3, #28]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003caa:	019b      	lsls	r3, r3, #6
 8003cac:	431a      	orrs	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb2:	085b      	lsrs	r3, r3, #1
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	041b      	lsls	r3, r3, #16
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbe:	061b      	lsls	r3, r3, #24
 8003cc0:	4937      	ldr	r1, [pc, #220]	; (8003da0 <HAL_RCC_OscConfig+0x4e8>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cc6:	4b37      	ldr	r3, [pc, #220]	; (8003da4 <HAL_RCC_OscConfig+0x4ec>)
 8003cc8:	2201      	movs	r2, #1
 8003cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ccc:	f7ff fb38 	bl	8003340 <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cd4:	f7ff fb34 	bl	8003340 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e056      	b.n	8003d94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ce6:	4b2e      	ldr	r3, [pc, #184]	; (8003da0 <HAL_RCC_OscConfig+0x4e8>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d0f0      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x41c>
 8003cf2:	e04e      	b.n	8003d92 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cf4:	4b2b      	ldr	r3, [pc, #172]	; (8003da4 <HAL_RCC_OscConfig+0x4ec>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cfa:	f7ff fb21 	bl	8003340 <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d00:	e008      	b.n	8003d14 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d02:	f7ff fb1d 	bl	8003340 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e03f      	b.n	8003d94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d14:	4b22      	ldr	r3, [pc, #136]	; (8003da0 <HAL_RCC_OscConfig+0x4e8>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1f0      	bne.n	8003d02 <HAL_RCC_OscConfig+0x44a>
 8003d20:	e037      	b.n	8003d92 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d101      	bne.n	8003d2e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e032      	b.n	8003d94 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d2e:	4b1c      	ldr	r3, [pc, #112]	; (8003da0 <HAL_RCC_OscConfig+0x4e8>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d028      	beq.n	8003d8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d121      	bne.n	8003d8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d11a      	bne.n	8003d8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d5e:	4013      	ands	r3, r2
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d64:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d111      	bne.n	8003d8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d74:	085b      	lsrs	r3, r3, #1
 8003d76:	3b01      	subs	r3, #1
 8003d78:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d107      	bne.n	8003d8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d88:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d001      	beq.n	8003d92 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e000      	b.n	8003d94 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3718      	adds	r7, #24
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40007000 	.word	0x40007000
 8003da0:	40023800 	.word	0x40023800
 8003da4:	42470060 	.word	0x42470060

08003da8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d101      	bne.n	8003dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e0cc      	b.n	8003f56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dbc:	4b68      	ldr	r3, [pc, #416]	; (8003f60 <HAL_RCC_ClockConfig+0x1b8>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0307 	and.w	r3, r3, #7
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d90c      	bls.n	8003de4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dca:	4b65      	ldr	r3, [pc, #404]	; (8003f60 <HAL_RCC_ClockConfig+0x1b8>)
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd2:	4b63      	ldr	r3, [pc, #396]	; (8003f60 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d001      	beq.n	8003de4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e0b8      	b.n	8003f56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d020      	beq.n	8003e32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0304 	and.w	r3, r3, #4
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d005      	beq.n	8003e08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dfc:	4b59      	ldr	r3, [pc, #356]	; (8003f64 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	4a58      	ldr	r2, [pc, #352]	; (8003f64 <HAL_RCC_ClockConfig+0x1bc>)
 8003e02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0308 	and.w	r3, r3, #8
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d005      	beq.n	8003e20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e14:	4b53      	ldr	r3, [pc, #332]	; (8003f64 <HAL_RCC_ClockConfig+0x1bc>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	4a52      	ldr	r2, [pc, #328]	; (8003f64 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e20:	4b50      	ldr	r3, [pc, #320]	; (8003f64 <HAL_RCC_ClockConfig+0x1bc>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	494d      	ldr	r1, [pc, #308]	; (8003f64 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d044      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d107      	bne.n	8003e56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e46:	4b47      	ldr	r3, [pc, #284]	; (8003f64 <HAL_RCC_ClockConfig+0x1bc>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d119      	bne.n	8003e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e07f      	b.n	8003f56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d003      	beq.n	8003e66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e62:	2b03      	cmp	r3, #3
 8003e64:	d107      	bne.n	8003e76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e66:	4b3f      	ldr	r3, [pc, #252]	; (8003f64 <HAL_RCC_ClockConfig+0x1bc>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d109      	bne.n	8003e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e06f      	b.n	8003f56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e76:	4b3b      	ldr	r3, [pc, #236]	; (8003f64 <HAL_RCC_ClockConfig+0x1bc>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e067      	b.n	8003f56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e86:	4b37      	ldr	r3, [pc, #220]	; (8003f64 <HAL_RCC_ClockConfig+0x1bc>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f023 0203 	bic.w	r2, r3, #3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	4934      	ldr	r1, [pc, #208]	; (8003f64 <HAL_RCC_ClockConfig+0x1bc>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e98:	f7ff fa52 	bl	8003340 <HAL_GetTick>
 8003e9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e9e:	e00a      	b.n	8003eb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ea0:	f7ff fa4e 	bl	8003340 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e04f      	b.n	8003f56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eb6:	4b2b      	ldr	r3, [pc, #172]	; (8003f64 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 020c 	and.w	r2, r3, #12
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d1eb      	bne.n	8003ea0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ec8:	4b25      	ldr	r3, [pc, #148]	; (8003f60 <HAL_RCC_ClockConfig+0x1b8>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d20c      	bcs.n	8003ef0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ed6:	4b22      	ldr	r3, [pc, #136]	; (8003f60 <HAL_RCC_ClockConfig+0x1b8>)
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	b2d2      	uxtb	r2, r2
 8003edc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ede:	4b20      	ldr	r3, [pc, #128]	; (8003f60 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0307 	and.w	r3, r3, #7
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d001      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e032      	b.n	8003f56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d008      	beq.n	8003f0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003efc:	4b19      	ldr	r3, [pc, #100]	; (8003f64 <HAL_RCC_ClockConfig+0x1bc>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	4916      	ldr	r1, [pc, #88]	; (8003f64 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0308 	and.w	r3, r3, #8
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d009      	beq.n	8003f2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f1a:	4b12      	ldr	r3, [pc, #72]	; (8003f64 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	490e      	ldr	r1, [pc, #56]	; (8003f64 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f2e:	f000 f821 	bl	8003f74 <HAL_RCC_GetSysClockFreq>
 8003f32:	4602      	mov	r2, r0
 8003f34:	4b0b      	ldr	r3, [pc, #44]	; (8003f64 <HAL_RCC_ClockConfig+0x1bc>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	091b      	lsrs	r3, r3, #4
 8003f3a:	f003 030f 	and.w	r3, r3, #15
 8003f3e:	490a      	ldr	r1, [pc, #40]	; (8003f68 <HAL_RCC_ClockConfig+0x1c0>)
 8003f40:	5ccb      	ldrb	r3, [r1, r3]
 8003f42:	fa22 f303 	lsr.w	r3, r2, r3
 8003f46:	4a09      	ldr	r2, [pc, #36]	; (8003f6c <HAL_RCC_ClockConfig+0x1c4>)
 8003f48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f4a:	4b09      	ldr	r3, [pc, #36]	; (8003f70 <HAL_RCC_ClockConfig+0x1c8>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7ff f9b2 	bl	80032b8 <HAL_InitTick>

  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	40023c00 	.word	0x40023c00
 8003f64:	40023800 	.word	0x40023800
 8003f68:	0800686c 	.word	0x0800686c
 8003f6c:	2000000c 	.word	0x2000000c
 8003f70:	20000010 	.word	0x20000010

08003f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003f78:	b084      	sub	sp, #16
 8003f7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	607b      	str	r3, [r7, #4]
 8003f80:	2300      	movs	r3, #0
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	2300      	movs	r3, #0
 8003f86:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f8c:	4b67      	ldr	r3, [pc, #412]	; (800412c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f003 030c 	and.w	r3, r3, #12
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d00d      	beq.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x40>
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	f200 80bd 	bhi.w	8004118 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d002      	beq.n	8003fa8 <HAL_RCC_GetSysClockFreq+0x34>
 8003fa2:	2b04      	cmp	r3, #4
 8003fa4:	d003      	beq.n	8003fae <HAL_RCC_GetSysClockFreq+0x3a>
 8003fa6:	e0b7      	b.n	8004118 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fa8:	4b61      	ldr	r3, [pc, #388]	; (8004130 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003faa:	60bb      	str	r3, [r7, #8]
       break;
 8003fac:	e0b7      	b.n	800411e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fae:	4b61      	ldr	r3, [pc, #388]	; (8004134 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003fb0:	60bb      	str	r3, [r7, #8]
      break;
 8003fb2:	e0b4      	b.n	800411e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fb4:	4b5d      	ldr	r3, [pc, #372]	; (800412c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fbc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fbe:	4b5b      	ldr	r3, [pc, #364]	; (800412c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d04d      	beq.n	8004066 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fca:	4b58      	ldr	r3, [pc, #352]	; (800412c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	099b      	lsrs	r3, r3, #6
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	f04f 0300 	mov.w	r3, #0
 8003fd6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003fda:	f04f 0100 	mov.w	r1, #0
 8003fde:	ea02 0800 	and.w	r8, r2, r0
 8003fe2:	ea03 0901 	and.w	r9, r3, r1
 8003fe6:	4640      	mov	r0, r8
 8003fe8:	4649      	mov	r1, r9
 8003fea:	f04f 0200 	mov.w	r2, #0
 8003fee:	f04f 0300 	mov.w	r3, #0
 8003ff2:	014b      	lsls	r3, r1, #5
 8003ff4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ff8:	0142      	lsls	r2, r0, #5
 8003ffa:	4610      	mov	r0, r2
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	ebb0 0008 	subs.w	r0, r0, r8
 8004002:	eb61 0109 	sbc.w	r1, r1, r9
 8004006:	f04f 0200 	mov.w	r2, #0
 800400a:	f04f 0300 	mov.w	r3, #0
 800400e:	018b      	lsls	r3, r1, #6
 8004010:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004014:	0182      	lsls	r2, r0, #6
 8004016:	1a12      	subs	r2, r2, r0
 8004018:	eb63 0301 	sbc.w	r3, r3, r1
 800401c:	f04f 0000 	mov.w	r0, #0
 8004020:	f04f 0100 	mov.w	r1, #0
 8004024:	00d9      	lsls	r1, r3, #3
 8004026:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800402a:	00d0      	lsls	r0, r2, #3
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
 8004030:	eb12 0208 	adds.w	r2, r2, r8
 8004034:	eb43 0309 	adc.w	r3, r3, r9
 8004038:	f04f 0000 	mov.w	r0, #0
 800403c:	f04f 0100 	mov.w	r1, #0
 8004040:	0259      	lsls	r1, r3, #9
 8004042:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004046:	0250      	lsls	r0, r2, #9
 8004048:	4602      	mov	r2, r0
 800404a:	460b      	mov	r3, r1
 800404c:	4610      	mov	r0, r2
 800404e:	4619      	mov	r1, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	461a      	mov	r2, r3
 8004054:	f04f 0300 	mov.w	r3, #0
 8004058:	f7fc fd7a 	bl	8000b50 <__aeabi_uldivmod>
 800405c:	4602      	mov	r2, r0
 800405e:	460b      	mov	r3, r1
 8004060:	4613      	mov	r3, r2
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	e04a      	b.n	80040fc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004066:	4b31      	ldr	r3, [pc, #196]	; (800412c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	099b      	lsrs	r3, r3, #6
 800406c:	461a      	mov	r2, r3
 800406e:	f04f 0300 	mov.w	r3, #0
 8004072:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004076:	f04f 0100 	mov.w	r1, #0
 800407a:	ea02 0400 	and.w	r4, r2, r0
 800407e:	ea03 0501 	and.w	r5, r3, r1
 8004082:	4620      	mov	r0, r4
 8004084:	4629      	mov	r1, r5
 8004086:	f04f 0200 	mov.w	r2, #0
 800408a:	f04f 0300 	mov.w	r3, #0
 800408e:	014b      	lsls	r3, r1, #5
 8004090:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004094:	0142      	lsls	r2, r0, #5
 8004096:	4610      	mov	r0, r2
 8004098:	4619      	mov	r1, r3
 800409a:	1b00      	subs	r0, r0, r4
 800409c:	eb61 0105 	sbc.w	r1, r1, r5
 80040a0:	f04f 0200 	mov.w	r2, #0
 80040a4:	f04f 0300 	mov.w	r3, #0
 80040a8:	018b      	lsls	r3, r1, #6
 80040aa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80040ae:	0182      	lsls	r2, r0, #6
 80040b0:	1a12      	subs	r2, r2, r0
 80040b2:	eb63 0301 	sbc.w	r3, r3, r1
 80040b6:	f04f 0000 	mov.w	r0, #0
 80040ba:	f04f 0100 	mov.w	r1, #0
 80040be:	00d9      	lsls	r1, r3, #3
 80040c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040c4:	00d0      	lsls	r0, r2, #3
 80040c6:	4602      	mov	r2, r0
 80040c8:	460b      	mov	r3, r1
 80040ca:	1912      	adds	r2, r2, r4
 80040cc:	eb45 0303 	adc.w	r3, r5, r3
 80040d0:	f04f 0000 	mov.w	r0, #0
 80040d4:	f04f 0100 	mov.w	r1, #0
 80040d8:	0299      	lsls	r1, r3, #10
 80040da:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80040de:	0290      	lsls	r0, r2, #10
 80040e0:	4602      	mov	r2, r0
 80040e2:	460b      	mov	r3, r1
 80040e4:	4610      	mov	r0, r2
 80040e6:	4619      	mov	r1, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	461a      	mov	r2, r3
 80040ec:	f04f 0300 	mov.w	r3, #0
 80040f0:	f7fc fd2e 	bl	8000b50 <__aeabi_uldivmod>
 80040f4:	4602      	mov	r2, r0
 80040f6:	460b      	mov	r3, r1
 80040f8:	4613      	mov	r3, r2
 80040fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040fc:	4b0b      	ldr	r3, [pc, #44]	; (800412c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	0c1b      	lsrs	r3, r3, #16
 8004102:	f003 0303 	and.w	r3, r3, #3
 8004106:	3301      	adds	r3, #1
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	fbb2 f3f3 	udiv	r3, r2, r3
 8004114:	60bb      	str	r3, [r7, #8]
      break;
 8004116:	e002      	b.n	800411e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004118:	4b05      	ldr	r3, [pc, #20]	; (8004130 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800411a:	60bb      	str	r3, [r7, #8]
      break;
 800411c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800411e:	68bb      	ldr	r3, [r7, #8]
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800412a:	bf00      	nop
 800412c:	40023800 	.word	0x40023800
 8004130:	00f42400 	.word	0x00f42400
 8004134:	007a1200 	.word	0x007a1200

08004138 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800413c:	4b03      	ldr	r3, [pc, #12]	; (800414c <HAL_RCC_GetHCLKFreq+0x14>)
 800413e:	681b      	ldr	r3, [r3, #0]
}
 8004140:	4618      	mov	r0, r3
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	2000000c 	.word	0x2000000c

08004150 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004154:	f7ff fff0 	bl	8004138 <HAL_RCC_GetHCLKFreq>
 8004158:	4602      	mov	r2, r0
 800415a:	4b05      	ldr	r3, [pc, #20]	; (8004170 <HAL_RCC_GetPCLK1Freq+0x20>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	0a9b      	lsrs	r3, r3, #10
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	4903      	ldr	r1, [pc, #12]	; (8004174 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004166:	5ccb      	ldrb	r3, [r1, r3]
 8004168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800416c:	4618      	mov	r0, r3
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40023800 	.word	0x40023800
 8004174:	0800687c 	.word	0x0800687c

08004178 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800417c:	f7ff ffdc 	bl	8004138 <HAL_RCC_GetHCLKFreq>
 8004180:	4602      	mov	r2, r0
 8004182:	4b05      	ldr	r3, [pc, #20]	; (8004198 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	0b5b      	lsrs	r3, r3, #13
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	4903      	ldr	r1, [pc, #12]	; (800419c <HAL_RCC_GetPCLK2Freq+0x24>)
 800418e:	5ccb      	ldrb	r3, [r1, r3]
 8004190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004194:	4618      	mov	r0, r3
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40023800 	.word	0x40023800
 800419c:	0800687c 	.word	0x0800687c

080041a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e041      	b.n	8004236 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d106      	bne.n	80041cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7fe febe 	bl	8002f48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3304      	adds	r3, #4
 80041dc:	4619      	mov	r1, r3
 80041de:	4610      	mov	r0, r2
 80041e0:	f000 fd88 	bl	8004cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
	...

08004240 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b01      	cmp	r3, #1
 8004252:	d001      	beq.n	8004258 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e044      	b.n	80042e2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2202      	movs	r2, #2
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f042 0201 	orr.w	r2, r2, #1
 800426e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a1e      	ldr	r2, [pc, #120]	; (80042f0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d018      	beq.n	80042ac <HAL_TIM_Base_Start_IT+0x6c>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004282:	d013      	beq.n	80042ac <HAL_TIM_Base_Start_IT+0x6c>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a1a      	ldr	r2, [pc, #104]	; (80042f4 <HAL_TIM_Base_Start_IT+0xb4>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d00e      	beq.n	80042ac <HAL_TIM_Base_Start_IT+0x6c>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a19      	ldr	r2, [pc, #100]	; (80042f8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d009      	beq.n	80042ac <HAL_TIM_Base_Start_IT+0x6c>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a17      	ldr	r2, [pc, #92]	; (80042fc <HAL_TIM_Base_Start_IT+0xbc>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d004      	beq.n	80042ac <HAL_TIM_Base_Start_IT+0x6c>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a16      	ldr	r2, [pc, #88]	; (8004300 <HAL_TIM_Base_Start_IT+0xc0>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d111      	bne.n	80042d0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f003 0307 	and.w	r3, r3, #7
 80042b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2b06      	cmp	r3, #6
 80042bc:	d010      	beq.n	80042e0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f042 0201 	orr.w	r2, r2, #1
 80042cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ce:	e007      	b.n	80042e0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f042 0201 	orr.w	r2, r2, #1
 80042de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	40010000 	.word	0x40010000
 80042f4:	40000400 	.word	0x40000400
 80042f8:	40000800 	.word	0x40000800
 80042fc:	40000c00 	.word	0x40000c00
 8004300:	40014000 	.word	0x40014000

08004304 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e041      	b.n	800439a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d106      	bne.n	8004330 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f839 	bl	80043a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2202      	movs	r2, #2
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3304      	adds	r3, #4
 8004340:	4619      	mov	r1, r3
 8004342:	4610      	mov	r0, r2
 8004344:	f000 fcd6 	bl	8004cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b083      	sub	sp, #12
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80043aa:	bf00      	nop
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
	...

080043b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d109      	bne.n	80043dc <HAL_TIM_PWM_Start+0x24>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	bf14      	ite	ne
 80043d4:	2301      	movne	r3, #1
 80043d6:	2300      	moveq	r3, #0
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	e022      	b.n	8004422 <HAL_TIM_PWM_Start+0x6a>
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	2b04      	cmp	r3, #4
 80043e0:	d109      	bne.n	80043f6 <HAL_TIM_PWM_Start+0x3e>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	bf14      	ite	ne
 80043ee:	2301      	movne	r3, #1
 80043f0:	2300      	moveq	r3, #0
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	e015      	b.n	8004422 <HAL_TIM_PWM_Start+0x6a>
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b08      	cmp	r3, #8
 80043fa:	d109      	bne.n	8004410 <HAL_TIM_PWM_Start+0x58>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b01      	cmp	r3, #1
 8004406:	bf14      	ite	ne
 8004408:	2301      	movne	r3, #1
 800440a:	2300      	moveq	r3, #0
 800440c:	b2db      	uxtb	r3, r3
 800440e:	e008      	b.n	8004422 <HAL_TIM_PWM_Start+0x6a>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b01      	cmp	r3, #1
 800441a:	bf14      	ite	ne
 800441c:	2301      	movne	r3, #1
 800441e:	2300      	moveq	r3, #0
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e068      	b.n	80044fc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d104      	bne.n	800443a <HAL_TIM_PWM_Start+0x82>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004438:	e013      	b.n	8004462 <HAL_TIM_PWM_Start+0xaa>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	2b04      	cmp	r3, #4
 800443e:	d104      	bne.n	800444a <HAL_TIM_PWM_Start+0x92>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2202      	movs	r2, #2
 8004444:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004448:	e00b      	b.n	8004462 <HAL_TIM_PWM_Start+0xaa>
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	2b08      	cmp	r3, #8
 800444e:	d104      	bne.n	800445a <HAL_TIM_PWM_Start+0xa2>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2202      	movs	r2, #2
 8004454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004458:	e003      	b.n	8004462 <HAL_TIM_PWM_Start+0xaa>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2202      	movs	r2, #2
 800445e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2201      	movs	r2, #1
 8004468:	6839      	ldr	r1, [r7, #0]
 800446a:	4618      	mov	r0, r3
 800446c:	f000 fee8 	bl	8005240 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a23      	ldr	r2, [pc, #140]	; (8004504 <HAL_TIM_PWM_Start+0x14c>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d107      	bne.n	800448a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004488:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a1d      	ldr	r2, [pc, #116]	; (8004504 <HAL_TIM_PWM_Start+0x14c>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d018      	beq.n	80044c6 <HAL_TIM_PWM_Start+0x10e>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800449c:	d013      	beq.n	80044c6 <HAL_TIM_PWM_Start+0x10e>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a19      	ldr	r2, [pc, #100]	; (8004508 <HAL_TIM_PWM_Start+0x150>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d00e      	beq.n	80044c6 <HAL_TIM_PWM_Start+0x10e>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a17      	ldr	r2, [pc, #92]	; (800450c <HAL_TIM_PWM_Start+0x154>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d009      	beq.n	80044c6 <HAL_TIM_PWM_Start+0x10e>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a16      	ldr	r2, [pc, #88]	; (8004510 <HAL_TIM_PWM_Start+0x158>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d004      	beq.n	80044c6 <HAL_TIM_PWM_Start+0x10e>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a14      	ldr	r2, [pc, #80]	; (8004514 <HAL_TIM_PWM_Start+0x15c>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d111      	bne.n	80044ea <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f003 0307 	and.w	r3, r3, #7
 80044d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2b06      	cmp	r3, #6
 80044d6:	d010      	beq.n	80044fa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f042 0201 	orr.w	r2, r2, #1
 80044e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e8:	e007      	b.n	80044fa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f042 0201 	orr.w	r2, r2, #1
 80044f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40010000 	.word	0x40010000
 8004508:	40000400 	.word	0x40000400
 800450c:	40000800 	.word	0x40000800
 8004510:	40000c00 	.word	0x40000c00
 8004514:	40014000 	.word	0x40014000

08004518 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d101      	bne.n	800452c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e097      	b.n	800465c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b00      	cmp	r3, #0
 8004536:	d106      	bne.n	8004546 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f7fe fd3f 	bl	8002fc4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2202      	movs	r2, #2
 800454a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	6812      	ldr	r2, [r2, #0]
 8004558:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800455c:	f023 0307 	bic.w	r3, r3, #7
 8004560:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	3304      	adds	r3, #4
 800456a:	4619      	mov	r1, r3
 800456c:	4610      	mov	r0, r2
 800456e:	f000 fbc1 	bl	8004cf4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	4313      	orrs	r3, r2
 8004592:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800459a:	f023 0303 	bic.w	r3, r3, #3
 800459e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	021b      	lsls	r3, r3, #8
 80045aa:	4313      	orrs	r3, r2
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80045b8:	f023 030c 	bic.w	r3, r3, #12
 80045bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	68da      	ldr	r2, [r3, #12]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	021b      	lsls	r3, r3, #8
 80045d4:	4313      	orrs	r3, r2
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	4313      	orrs	r3, r2
 80045da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	011a      	lsls	r2, r3, #4
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	031b      	lsls	r3, r3, #12
 80045e8:	4313      	orrs	r3, r2
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80045f6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80045fe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	011b      	lsls	r3, r3, #4
 800460a:	4313      	orrs	r3, r2
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	4313      	orrs	r3, r2
 8004610:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3718      	adds	r7, #24
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004674:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800467c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004684:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800468c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d110      	bne.n	80046b6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004694:	7bfb      	ldrb	r3, [r7, #15]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d102      	bne.n	80046a0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800469a:	7b7b      	ldrb	r3, [r7, #13]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d001      	beq.n	80046a4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e069      	b.n	8004778 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2202      	movs	r2, #2
 80046a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046b4:	e031      	b.n	800471a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b04      	cmp	r3, #4
 80046ba:	d110      	bne.n	80046de <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046bc:	7bbb      	ldrb	r3, [r7, #14]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d102      	bne.n	80046c8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046c2:	7b3b      	ldrb	r3, [r7, #12]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d001      	beq.n	80046cc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e055      	b.n	8004778 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2202      	movs	r2, #2
 80046d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2202      	movs	r2, #2
 80046d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046dc:	e01d      	b.n	800471a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046de:	7bfb      	ldrb	r3, [r7, #15]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d108      	bne.n	80046f6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046e4:	7bbb      	ldrb	r3, [r7, #14]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d105      	bne.n	80046f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046ea:	7b7b      	ldrb	r3, [r7, #13]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d102      	bne.n	80046f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046f0:	7b3b      	ldrb	r3, [r7, #12]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d001      	beq.n	80046fa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e03e      	b.n	8004778 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2202      	movs	r2, #2
 80046fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2202      	movs	r2, #2
 8004706:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2202      	movs	r2, #2
 800470e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2202      	movs	r2, #2
 8004716:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d003      	beq.n	8004728 <HAL_TIM_Encoder_Start+0xc4>
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	2b04      	cmp	r3, #4
 8004724:	d008      	beq.n	8004738 <HAL_TIM_Encoder_Start+0xd4>
 8004726:	e00f      	b.n	8004748 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2201      	movs	r2, #1
 800472e:	2100      	movs	r1, #0
 8004730:	4618      	mov	r0, r3
 8004732:	f000 fd85 	bl	8005240 <TIM_CCxChannelCmd>
      break;
 8004736:	e016      	b.n	8004766 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2201      	movs	r2, #1
 800473e:	2104      	movs	r1, #4
 8004740:	4618      	mov	r0, r3
 8004742:	f000 fd7d 	bl	8005240 <TIM_CCxChannelCmd>
      break;
 8004746:	e00e      	b.n	8004766 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2201      	movs	r2, #1
 800474e:	2100      	movs	r1, #0
 8004750:	4618      	mov	r0, r3
 8004752:	f000 fd75 	bl	8005240 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2201      	movs	r2, #1
 800475c:	2104      	movs	r1, #4
 800475e:	4618      	mov	r0, r3
 8004760:	f000 fd6e 	bl	8005240 <TIM_CCxChannelCmd>
      break;
 8004764:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f042 0201 	orr.w	r2, r2, #1
 8004774:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b02      	cmp	r3, #2
 8004794:	d122      	bne.n	80047dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d11b      	bne.n	80047dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f06f 0202 	mvn.w	r2, #2
 80047ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	f003 0303 	and.w	r3, r3, #3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 fa77 	bl	8004cb6 <HAL_TIM_IC_CaptureCallback>
 80047c8:	e005      	b.n	80047d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 fa69 	bl	8004ca2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 fa7a 	bl	8004cca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	f003 0304 	and.w	r3, r3, #4
 80047e6:	2b04      	cmp	r3, #4
 80047e8:	d122      	bne.n	8004830 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	f003 0304 	and.w	r3, r3, #4
 80047f4:	2b04      	cmp	r3, #4
 80047f6:	d11b      	bne.n	8004830 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f06f 0204 	mvn.w	r2, #4
 8004800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2202      	movs	r2, #2
 8004806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 fa4d 	bl	8004cb6 <HAL_TIM_IC_CaptureCallback>
 800481c:	e005      	b.n	800482a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 fa3f 	bl	8004ca2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 fa50 	bl	8004cca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	f003 0308 	and.w	r3, r3, #8
 800483a:	2b08      	cmp	r3, #8
 800483c:	d122      	bne.n	8004884 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	f003 0308 	and.w	r3, r3, #8
 8004848:	2b08      	cmp	r3, #8
 800484a:	d11b      	bne.n	8004884 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f06f 0208 	mvn.w	r2, #8
 8004854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2204      	movs	r2, #4
 800485a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	69db      	ldr	r3, [r3, #28]
 8004862:	f003 0303 	and.w	r3, r3, #3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fa23 	bl	8004cb6 <HAL_TIM_IC_CaptureCallback>
 8004870:	e005      	b.n	800487e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 fa15 	bl	8004ca2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 fa26 	bl	8004cca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	f003 0310 	and.w	r3, r3, #16
 800488e:	2b10      	cmp	r3, #16
 8004890:	d122      	bne.n	80048d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f003 0310 	and.w	r3, r3, #16
 800489c:	2b10      	cmp	r3, #16
 800489e:	d11b      	bne.n	80048d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f06f 0210 	mvn.w	r2, #16
 80048a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2208      	movs	r2, #8
 80048ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f9f9 	bl	8004cb6 <HAL_TIM_IC_CaptureCallback>
 80048c4:	e005      	b.n	80048d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f9eb 	bl	8004ca2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f9fc 	bl	8004cca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d10e      	bne.n	8004904 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d107      	bne.n	8004904 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f06f 0201 	mvn.w	r2, #1
 80048fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f7fe f87e 	bl	8002a00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490e:	2b80      	cmp	r3, #128	; 0x80
 8004910:	d10e      	bne.n	8004930 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800491c:	2b80      	cmp	r3, #128	; 0x80
 800491e:	d107      	bne.n	8004930 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 fd78 	bl	8005420 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493a:	2b40      	cmp	r3, #64	; 0x40
 800493c:	d10e      	bne.n	800495c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004948:	2b40      	cmp	r3, #64	; 0x40
 800494a:	d107      	bne.n	800495c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f9c1 	bl	8004cde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	f003 0320 	and.w	r3, r3, #32
 8004966:	2b20      	cmp	r3, #32
 8004968:	d10e      	bne.n	8004988 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f003 0320 	and.w	r3, r3, #32
 8004974:	2b20      	cmp	r3, #32
 8004976:	d107      	bne.n	8004988 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f06f 0220 	mvn.w	r2, #32
 8004980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 fd42 	bl	800540c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004988:	bf00      	nop
 800498a:	3708      	adds	r7, #8
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800499c:	2300      	movs	r3, #0
 800499e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d101      	bne.n	80049ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049aa:	2302      	movs	r3, #2
 80049ac:	e0ae      	b.n	8004b0c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b0c      	cmp	r3, #12
 80049ba:	f200 809f 	bhi.w	8004afc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80049be:	a201      	add	r2, pc, #4	; (adr r2, 80049c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c4:	080049f9 	.word	0x080049f9
 80049c8:	08004afd 	.word	0x08004afd
 80049cc:	08004afd 	.word	0x08004afd
 80049d0:	08004afd 	.word	0x08004afd
 80049d4:	08004a39 	.word	0x08004a39
 80049d8:	08004afd 	.word	0x08004afd
 80049dc:	08004afd 	.word	0x08004afd
 80049e0:	08004afd 	.word	0x08004afd
 80049e4:	08004a7b 	.word	0x08004a7b
 80049e8:	08004afd 	.word	0x08004afd
 80049ec:	08004afd 	.word	0x08004afd
 80049f0:	08004afd 	.word	0x08004afd
 80049f4:	08004abb 	.word	0x08004abb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68b9      	ldr	r1, [r7, #8]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 f9f8 	bl	8004df4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	699a      	ldr	r2, [r3, #24]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f042 0208 	orr.w	r2, r2, #8
 8004a12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	699a      	ldr	r2, [r3, #24]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f022 0204 	bic.w	r2, r2, #4
 8004a22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6999      	ldr	r1, [r3, #24]
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	691a      	ldr	r2, [r3, #16]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	619a      	str	r2, [r3, #24]
      break;
 8004a36:	e064      	b.n	8004b02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68b9      	ldr	r1, [r7, #8]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f000 fa3e 	bl	8004ec0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	699a      	ldr	r2, [r3, #24]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	699a      	ldr	r2, [r3, #24]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6999      	ldr	r1, [r3, #24]
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	021a      	lsls	r2, r3, #8
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	430a      	orrs	r2, r1
 8004a76:	619a      	str	r2, [r3, #24]
      break;
 8004a78:	e043      	b.n	8004b02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68b9      	ldr	r1, [r7, #8]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f000 fa89 	bl	8004f98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	69da      	ldr	r2, [r3, #28]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f042 0208 	orr.w	r2, r2, #8
 8004a94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	69da      	ldr	r2, [r3, #28]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f022 0204 	bic.w	r2, r2, #4
 8004aa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	69d9      	ldr	r1, [r3, #28]
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	691a      	ldr	r2, [r3, #16]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	61da      	str	r2, [r3, #28]
      break;
 8004ab8:	e023      	b.n	8004b02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68b9      	ldr	r1, [r7, #8]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 fad3 	bl	800506c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	69da      	ldr	r2, [r3, #28]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ad4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	69da      	ldr	r2, [r3, #28]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ae4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	69d9      	ldr	r1, [r3, #28]
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	021a      	lsls	r2, r3, #8
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	61da      	str	r2, [r3, #28]
      break;
 8004afa:	e002      	b.n	8004b02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	75fb      	strb	r3, [r7, #23]
      break;
 8004b00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3718      	adds	r7, #24
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d101      	bne.n	8004b30 <HAL_TIM_ConfigClockSource+0x1c>
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	e0b4      	b.n	8004c9a <HAL_TIM_ConfigClockSource+0x186>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68ba      	ldr	r2, [r7, #8]
 8004b5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b68:	d03e      	beq.n	8004be8 <HAL_TIM_ConfigClockSource+0xd4>
 8004b6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b6e:	f200 8087 	bhi.w	8004c80 <HAL_TIM_ConfigClockSource+0x16c>
 8004b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b76:	f000 8086 	beq.w	8004c86 <HAL_TIM_ConfigClockSource+0x172>
 8004b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b7e:	d87f      	bhi.n	8004c80 <HAL_TIM_ConfigClockSource+0x16c>
 8004b80:	2b70      	cmp	r3, #112	; 0x70
 8004b82:	d01a      	beq.n	8004bba <HAL_TIM_ConfigClockSource+0xa6>
 8004b84:	2b70      	cmp	r3, #112	; 0x70
 8004b86:	d87b      	bhi.n	8004c80 <HAL_TIM_ConfigClockSource+0x16c>
 8004b88:	2b60      	cmp	r3, #96	; 0x60
 8004b8a:	d050      	beq.n	8004c2e <HAL_TIM_ConfigClockSource+0x11a>
 8004b8c:	2b60      	cmp	r3, #96	; 0x60
 8004b8e:	d877      	bhi.n	8004c80 <HAL_TIM_ConfigClockSource+0x16c>
 8004b90:	2b50      	cmp	r3, #80	; 0x50
 8004b92:	d03c      	beq.n	8004c0e <HAL_TIM_ConfigClockSource+0xfa>
 8004b94:	2b50      	cmp	r3, #80	; 0x50
 8004b96:	d873      	bhi.n	8004c80 <HAL_TIM_ConfigClockSource+0x16c>
 8004b98:	2b40      	cmp	r3, #64	; 0x40
 8004b9a:	d058      	beq.n	8004c4e <HAL_TIM_ConfigClockSource+0x13a>
 8004b9c:	2b40      	cmp	r3, #64	; 0x40
 8004b9e:	d86f      	bhi.n	8004c80 <HAL_TIM_ConfigClockSource+0x16c>
 8004ba0:	2b30      	cmp	r3, #48	; 0x30
 8004ba2:	d064      	beq.n	8004c6e <HAL_TIM_ConfigClockSource+0x15a>
 8004ba4:	2b30      	cmp	r3, #48	; 0x30
 8004ba6:	d86b      	bhi.n	8004c80 <HAL_TIM_ConfigClockSource+0x16c>
 8004ba8:	2b20      	cmp	r3, #32
 8004baa:	d060      	beq.n	8004c6e <HAL_TIM_ConfigClockSource+0x15a>
 8004bac:	2b20      	cmp	r3, #32
 8004bae:	d867      	bhi.n	8004c80 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d05c      	beq.n	8004c6e <HAL_TIM_ConfigClockSource+0x15a>
 8004bb4:	2b10      	cmp	r3, #16
 8004bb6:	d05a      	beq.n	8004c6e <HAL_TIM_ConfigClockSource+0x15a>
 8004bb8:	e062      	b.n	8004c80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6818      	ldr	r0, [r3, #0]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	6899      	ldr	r1, [r3, #8]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685a      	ldr	r2, [r3, #4]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	f000 fb19 	bl	8005200 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004bdc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	609a      	str	r2, [r3, #8]
      break;
 8004be6:	e04f      	b.n	8004c88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6818      	ldr	r0, [r3, #0]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	6899      	ldr	r1, [r3, #8]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f000 fb02 	bl	8005200 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689a      	ldr	r2, [r3, #8]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c0a:	609a      	str	r2, [r3, #8]
      break;
 8004c0c:	e03c      	b.n	8004c88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6818      	ldr	r0, [r3, #0]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	6859      	ldr	r1, [r3, #4]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	f000 fa76 	bl	800510c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2150      	movs	r1, #80	; 0x50
 8004c26:	4618      	mov	r0, r3
 8004c28:	f000 facf 	bl	80051ca <TIM_ITRx_SetConfig>
      break;
 8004c2c:	e02c      	b.n	8004c88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6818      	ldr	r0, [r3, #0]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	6859      	ldr	r1, [r3, #4]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	f000 fa95 	bl	800516a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2160      	movs	r1, #96	; 0x60
 8004c46:	4618      	mov	r0, r3
 8004c48:	f000 fabf 	bl	80051ca <TIM_ITRx_SetConfig>
      break;
 8004c4c:	e01c      	b.n	8004c88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6818      	ldr	r0, [r3, #0]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	6859      	ldr	r1, [r3, #4]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	f000 fa56 	bl	800510c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2140      	movs	r1, #64	; 0x40
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 faaf 	bl	80051ca <TIM_ITRx_SetConfig>
      break;
 8004c6c:	e00c      	b.n	8004c88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4619      	mov	r1, r3
 8004c78:	4610      	mov	r0, r2
 8004c7a:	f000 faa6 	bl	80051ca <TIM_ITRx_SetConfig>
      break;
 8004c7e:	e003      	b.n	8004c88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	73fb      	strb	r3, [r7, #15]
      break;
 8004c84:	e000      	b.n	8004c88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b083      	sub	sp, #12
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004caa:	bf00      	nop
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b083      	sub	sp, #12
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cbe:	bf00      	nop
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b083      	sub	sp, #12
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cd2:	bf00      	nop
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b083      	sub	sp, #12
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ce6:	bf00      	nop
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
	...

08004cf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a34      	ldr	r2, [pc, #208]	; (8004dd8 <TIM_Base_SetConfig+0xe4>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d00f      	beq.n	8004d2c <TIM_Base_SetConfig+0x38>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d12:	d00b      	beq.n	8004d2c <TIM_Base_SetConfig+0x38>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a31      	ldr	r2, [pc, #196]	; (8004ddc <TIM_Base_SetConfig+0xe8>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d007      	beq.n	8004d2c <TIM_Base_SetConfig+0x38>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a30      	ldr	r2, [pc, #192]	; (8004de0 <TIM_Base_SetConfig+0xec>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d003      	beq.n	8004d2c <TIM_Base_SetConfig+0x38>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a2f      	ldr	r2, [pc, #188]	; (8004de4 <TIM_Base_SetConfig+0xf0>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d108      	bne.n	8004d3e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a25      	ldr	r2, [pc, #148]	; (8004dd8 <TIM_Base_SetConfig+0xe4>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d01b      	beq.n	8004d7e <TIM_Base_SetConfig+0x8a>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d4c:	d017      	beq.n	8004d7e <TIM_Base_SetConfig+0x8a>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a22      	ldr	r2, [pc, #136]	; (8004ddc <TIM_Base_SetConfig+0xe8>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d013      	beq.n	8004d7e <TIM_Base_SetConfig+0x8a>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a21      	ldr	r2, [pc, #132]	; (8004de0 <TIM_Base_SetConfig+0xec>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d00f      	beq.n	8004d7e <TIM_Base_SetConfig+0x8a>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a20      	ldr	r2, [pc, #128]	; (8004de4 <TIM_Base_SetConfig+0xf0>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d00b      	beq.n	8004d7e <TIM_Base_SetConfig+0x8a>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a1f      	ldr	r2, [pc, #124]	; (8004de8 <TIM_Base_SetConfig+0xf4>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d007      	beq.n	8004d7e <TIM_Base_SetConfig+0x8a>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a1e      	ldr	r2, [pc, #120]	; (8004dec <TIM_Base_SetConfig+0xf8>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d003      	beq.n	8004d7e <TIM_Base_SetConfig+0x8a>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a1d      	ldr	r2, [pc, #116]	; (8004df0 <TIM_Base_SetConfig+0xfc>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d108      	bne.n	8004d90 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a08      	ldr	r2, [pc, #32]	; (8004dd8 <TIM_Base_SetConfig+0xe4>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d103      	bne.n	8004dc4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	691a      	ldr	r2, [r3, #16]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	615a      	str	r2, [r3, #20]
}
 8004dca:	bf00      	nop
 8004dcc:	3714      	adds	r7, #20
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	40010000 	.word	0x40010000
 8004ddc:	40000400 	.word	0x40000400
 8004de0:	40000800 	.word	0x40000800
 8004de4:	40000c00 	.word	0x40000c00
 8004de8:	40014000 	.word	0x40014000
 8004dec:	40014400 	.word	0x40014400
 8004df0:	40014800 	.word	0x40014800

08004df4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b087      	sub	sp, #28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	f023 0201 	bic.w	r2, r3, #1
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f023 0303 	bic.w	r3, r3, #3
 8004e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f023 0302 	bic.w	r3, r3, #2
 8004e3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a1c      	ldr	r2, [pc, #112]	; (8004ebc <TIM_OC1_SetConfig+0xc8>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d10c      	bne.n	8004e6a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	f023 0308 	bic.w	r3, r3, #8
 8004e56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f023 0304 	bic.w	r3, r3, #4
 8004e68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a13      	ldr	r2, [pc, #76]	; (8004ebc <TIM_OC1_SetConfig+0xc8>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d111      	bne.n	8004e96 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	621a      	str	r2, [r3, #32]
}
 8004eb0:	bf00      	nop
 8004eb2:	371c      	adds	r7, #28
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	40010000 	.word	0x40010000

08004ec0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	f023 0210 	bic.w	r2, r3, #16
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	021b      	lsls	r3, r3, #8
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f023 0320 	bic.w	r3, r3, #32
 8004f0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	011b      	lsls	r3, r3, #4
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a1e      	ldr	r2, [pc, #120]	; (8004f94 <TIM_OC2_SetConfig+0xd4>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d10d      	bne.n	8004f3c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	011b      	lsls	r3, r3, #4
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a15      	ldr	r2, [pc, #84]	; (8004f94 <TIM_OC2_SetConfig+0xd4>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d113      	bne.n	8004f6c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	621a      	str	r2, [r3, #32]
}
 8004f86:	bf00      	nop
 8004f88:	371c      	adds	r7, #28
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	40010000 	.word	0x40010000

08004f98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b087      	sub	sp, #28
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	69db      	ldr	r3, [r3, #28]
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f023 0303 	bic.w	r3, r3, #3
 8004fce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fe0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	021b      	lsls	r3, r3, #8
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a1d      	ldr	r2, [pc, #116]	; (8005068 <TIM_OC3_SetConfig+0xd0>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d10d      	bne.n	8005012 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ffc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	021b      	lsls	r3, r3, #8
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	4313      	orrs	r3, r2
 8005008:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005010:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a14      	ldr	r2, [pc, #80]	; (8005068 <TIM_OC3_SetConfig+0xd0>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d113      	bne.n	8005042 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005020:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005028:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	011b      	lsls	r3, r3, #4
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	4313      	orrs	r3, r2
 8005034:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	011b      	lsls	r3, r3, #4
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	4313      	orrs	r3, r2
 8005040:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	621a      	str	r2, [r3, #32]
}
 800505c:	bf00      	nop
 800505e:	371c      	adds	r7, #28
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	40010000 	.word	0x40010000

0800506c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800506c:	b480      	push	{r7}
 800506e:	b087      	sub	sp, #28
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	69db      	ldr	r3, [r3, #28]
 8005092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800509a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	021b      	lsls	r3, r3, #8
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	031b      	lsls	r3, r3, #12
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a10      	ldr	r2, [pc, #64]	; (8005108 <TIM_OC4_SetConfig+0x9c>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d109      	bne.n	80050e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	019b      	lsls	r3, r3, #6
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	4313      	orrs	r3, r2
 80050de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	685a      	ldr	r2, [r3, #4]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	621a      	str	r2, [r3, #32]
}
 80050fa:	bf00      	nop
 80050fc:	371c      	adds	r7, #28
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	40010000 	.word	0x40010000

0800510c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800510c:	b480      	push	{r7}
 800510e:	b087      	sub	sp, #28
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	f023 0201 	bic.w	r2, r3, #1
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005136:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	011b      	lsls	r3, r3, #4
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	4313      	orrs	r3, r2
 8005140:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f023 030a 	bic.w	r3, r3, #10
 8005148:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	4313      	orrs	r3, r2
 8005150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	621a      	str	r2, [r3, #32]
}
 800515e:	bf00      	nop
 8005160:	371c      	adds	r7, #28
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800516a:	b480      	push	{r7}
 800516c:	b087      	sub	sp, #28
 800516e:	af00      	add	r7, sp, #0
 8005170:	60f8      	str	r0, [r7, #12]
 8005172:	60b9      	str	r1, [r7, #8]
 8005174:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	f023 0210 	bic.w	r2, r3, #16
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6a1b      	ldr	r3, [r3, #32]
 800518c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005194:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	031b      	lsls	r3, r3, #12
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	4313      	orrs	r3, r2
 800519e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	011b      	lsls	r3, r3, #4
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	621a      	str	r2, [r3, #32]
}
 80051be:	bf00      	nop
 80051c0:	371c      	adds	r7, #28
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b085      	sub	sp, #20
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
 80051d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	f043 0307 	orr.w	r3, r3, #7
 80051ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	609a      	str	r2, [r3, #8]
}
 80051f4:	bf00      	nop
 80051f6:	3714      	adds	r7, #20
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005200:	b480      	push	{r7}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
 800520c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800521a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	021a      	lsls	r2, r3, #8
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	431a      	orrs	r2, r3
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	4313      	orrs	r3, r2
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	4313      	orrs	r3, r2
 800522c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	609a      	str	r2, [r3, #8]
}
 8005234:	bf00      	nop
 8005236:	371c      	adds	r7, #28
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005240:	b480      	push	{r7}
 8005242:	b087      	sub	sp, #28
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f003 031f 	and.w	r3, r3, #31
 8005252:	2201      	movs	r2, #1
 8005254:	fa02 f303 	lsl.w	r3, r2, r3
 8005258:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6a1a      	ldr	r2, [r3, #32]
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	43db      	mvns	r3, r3
 8005262:	401a      	ands	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6a1a      	ldr	r2, [r3, #32]
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	f003 031f 	and.w	r3, r3, #31
 8005272:	6879      	ldr	r1, [r7, #4]
 8005274:	fa01 f303 	lsl.w	r3, r1, r3
 8005278:	431a      	orrs	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	621a      	str	r2, [r3, #32]
}
 800527e:	bf00      	nop
 8005280:	371c      	adds	r7, #28
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
	...

0800528c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800529c:	2b01      	cmp	r3, #1
 800529e:	d101      	bne.n	80052a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052a0:	2302      	movs	r3, #2
 80052a2:	e050      	b.n	8005346 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2202      	movs	r2, #2
 80052b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a1c      	ldr	r2, [pc, #112]	; (8005354 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d018      	beq.n	800531a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052f0:	d013      	beq.n	800531a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a18      	ldr	r2, [pc, #96]	; (8005358 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d00e      	beq.n	800531a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a16      	ldr	r2, [pc, #88]	; (800535c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d009      	beq.n	800531a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a15      	ldr	r2, [pc, #84]	; (8005360 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d004      	beq.n	800531a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a13      	ldr	r2, [pc, #76]	; (8005364 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d10c      	bne.n	8005334 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005320:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	68ba      	ldr	r2, [r7, #8]
 8005328:	4313      	orrs	r3, r2
 800532a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68ba      	ldr	r2, [r7, #8]
 8005332:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3714      	adds	r7, #20
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	40010000 	.word	0x40010000
 8005358:	40000400 	.word	0x40000400
 800535c:	40000800 	.word	0x40000800
 8005360:	40000c00 	.word	0x40000c00
 8005364:	40014000 	.word	0x40014000

08005368 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005372:	2300      	movs	r3, #0
 8005374:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800537c:	2b01      	cmp	r3, #1
 800537e:	d101      	bne.n	8005384 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005380:	2302      	movs	r3, #2
 8005382:	e03d      	b.n	8005400 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	4313      	orrs	r3, r2
 8005398:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	4313      	orrs	r3, r2
 80053de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e03f      	b.n	80054c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2b00      	cmp	r3, #0
 8005450:	d106      	bne.n	8005460 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f7fd fe52 	bl	8003104 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2224      	movs	r2, #36	; 0x24
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68da      	ldr	r2, [r3, #12]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005476:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f829 	bl	80054d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	691a      	ldr	r2, [r3, #16]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800548c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	695a      	ldr	r2, [r3, #20]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800549c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68da      	ldr	r2, [r3, #12]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2220      	movs	r2, #32
 80054b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2220      	movs	r2, #32
 80054c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3708      	adds	r7, #8
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
	...

080054d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054d4:	b09f      	sub	sp, #124	; 0x7c
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80054e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054e6:	68d9      	ldr	r1, [r3, #12]
 80054e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	ea40 0301 	orr.w	r3, r0, r1
 80054f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80054f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054f4:	689a      	ldr	r2, [r3, #8]
 80054f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	431a      	orrs	r2, r3
 80054fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054fe:	695b      	ldr	r3, [r3, #20]
 8005500:	431a      	orrs	r2, r3
 8005502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	4313      	orrs	r3, r2
 8005508:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800550a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005514:	f021 010c 	bic.w	r1, r1, #12
 8005518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800551e:	430b      	orrs	r3, r1
 8005520:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800552c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800552e:	6999      	ldr	r1, [r3, #24]
 8005530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	ea40 0301 	orr.w	r3, r0, r1
 8005538:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800553a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	4bc5      	ldr	r3, [pc, #788]	; (8005854 <UART_SetConfig+0x384>)
 8005540:	429a      	cmp	r2, r3
 8005542:	d004      	beq.n	800554e <UART_SetConfig+0x7e>
 8005544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	4bc3      	ldr	r3, [pc, #780]	; (8005858 <UART_SetConfig+0x388>)
 800554a:	429a      	cmp	r2, r3
 800554c:	d103      	bne.n	8005556 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800554e:	f7fe fe13 	bl	8004178 <HAL_RCC_GetPCLK2Freq>
 8005552:	6778      	str	r0, [r7, #116]	; 0x74
 8005554:	e002      	b.n	800555c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005556:	f7fe fdfb 	bl	8004150 <HAL_RCC_GetPCLK1Freq>
 800555a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800555c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800555e:	69db      	ldr	r3, [r3, #28]
 8005560:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005564:	f040 80b6 	bne.w	80056d4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005568:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800556a:	461c      	mov	r4, r3
 800556c:	f04f 0500 	mov.w	r5, #0
 8005570:	4622      	mov	r2, r4
 8005572:	462b      	mov	r3, r5
 8005574:	1891      	adds	r1, r2, r2
 8005576:	6439      	str	r1, [r7, #64]	; 0x40
 8005578:	415b      	adcs	r3, r3
 800557a:	647b      	str	r3, [r7, #68]	; 0x44
 800557c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005580:	1912      	adds	r2, r2, r4
 8005582:	eb45 0303 	adc.w	r3, r5, r3
 8005586:	f04f 0000 	mov.w	r0, #0
 800558a:	f04f 0100 	mov.w	r1, #0
 800558e:	00d9      	lsls	r1, r3, #3
 8005590:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005594:	00d0      	lsls	r0, r2, #3
 8005596:	4602      	mov	r2, r0
 8005598:	460b      	mov	r3, r1
 800559a:	1911      	adds	r1, r2, r4
 800559c:	6639      	str	r1, [r7, #96]	; 0x60
 800559e:	416b      	adcs	r3, r5
 80055a0:	667b      	str	r3, [r7, #100]	; 0x64
 80055a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	461a      	mov	r2, r3
 80055a8:	f04f 0300 	mov.w	r3, #0
 80055ac:	1891      	adds	r1, r2, r2
 80055ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80055b0:	415b      	adcs	r3, r3
 80055b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80055b8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80055bc:	f7fb fac8 	bl	8000b50 <__aeabi_uldivmod>
 80055c0:	4602      	mov	r2, r0
 80055c2:	460b      	mov	r3, r1
 80055c4:	4ba5      	ldr	r3, [pc, #660]	; (800585c <UART_SetConfig+0x38c>)
 80055c6:	fba3 2302 	umull	r2, r3, r3, r2
 80055ca:	095b      	lsrs	r3, r3, #5
 80055cc:	011e      	lsls	r6, r3, #4
 80055ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055d0:	461c      	mov	r4, r3
 80055d2:	f04f 0500 	mov.w	r5, #0
 80055d6:	4622      	mov	r2, r4
 80055d8:	462b      	mov	r3, r5
 80055da:	1891      	adds	r1, r2, r2
 80055dc:	6339      	str	r1, [r7, #48]	; 0x30
 80055de:	415b      	adcs	r3, r3
 80055e0:	637b      	str	r3, [r7, #52]	; 0x34
 80055e2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80055e6:	1912      	adds	r2, r2, r4
 80055e8:	eb45 0303 	adc.w	r3, r5, r3
 80055ec:	f04f 0000 	mov.w	r0, #0
 80055f0:	f04f 0100 	mov.w	r1, #0
 80055f4:	00d9      	lsls	r1, r3, #3
 80055f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055fa:	00d0      	lsls	r0, r2, #3
 80055fc:	4602      	mov	r2, r0
 80055fe:	460b      	mov	r3, r1
 8005600:	1911      	adds	r1, r2, r4
 8005602:	65b9      	str	r1, [r7, #88]	; 0x58
 8005604:	416b      	adcs	r3, r5
 8005606:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	461a      	mov	r2, r3
 800560e:	f04f 0300 	mov.w	r3, #0
 8005612:	1891      	adds	r1, r2, r2
 8005614:	62b9      	str	r1, [r7, #40]	; 0x28
 8005616:	415b      	adcs	r3, r3
 8005618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800561a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800561e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005622:	f7fb fa95 	bl	8000b50 <__aeabi_uldivmod>
 8005626:	4602      	mov	r2, r0
 8005628:	460b      	mov	r3, r1
 800562a:	4b8c      	ldr	r3, [pc, #560]	; (800585c <UART_SetConfig+0x38c>)
 800562c:	fba3 1302 	umull	r1, r3, r3, r2
 8005630:	095b      	lsrs	r3, r3, #5
 8005632:	2164      	movs	r1, #100	; 0x64
 8005634:	fb01 f303 	mul.w	r3, r1, r3
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	00db      	lsls	r3, r3, #3
 800563c:	3332      	adds	r3, #50	; 0x32
 800563e:	4a87      	ldr	r2, [pc, #540]	; (800585c <UART_SetConfig+0x38c>)
 8005640:	fba2 2303 	umull	r2, r3, r2, r3
 8005644:	095b      	lsrs	r3, r3, #5
 8005646:	005b      	lsls	r3, r3, #1
 8005648:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800564c:	441e      	add	r6, r3
 800564e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005650:	4618      	mov	r0, r3
 8005652:	f04f 0100 	mov.w	r1, #0
 8005656:	4602      	mov	r2, r0
 8005658:	460b      	mov	r3, r1
 800565a:	1894      	adds	r4, r2, r2
 800565c:	623c      	str	r4, [r7, #32]
 800565e:	415b      	adcs	r3, r3
 8005660:	627b      	str	r3, [r7, #36]	; 0x24
 8005662:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005666:	1812      	adds	r2, r2, r0
 8005668:	eb41 0303 	adc.w	r3, r1, r3
 800566c:	f04f 0400 	mov.w	r4, #0
 8005670:	f04f 0500 	mov.w	r5, #0
 8005674:	00dd      	lsls	r5, r3, #3
 8005676:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800567a:	00d4      	lsls	r4, r2, #3
 800567c:	4622      	mov	r2, r4
 800567e:	462b      	mov	r3, r5
 8005680:	1814      	adds	r4, r2, r0
 8005682:	653c      	str	r4, [r7, #80]	; 0x50
 8005684:	414b      	adcs	r3, r1
 8005686:	657b      	str	r3, [r7, #84]	; 0x54
 8005688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	461a      	mov	r2, r3
 800568e:	f04f 0300 	mov.w	r3, #0
 8005692:	1891      	adds	r1, r2, r2
 8005694:	61b9      	str	r1, [r7, #24]
 8005696:	415b      	adcs	r3, r3
 8005698:	61fb      	str	r3, [r7, #28]
 800569a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800569e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80056a2:	f7fb fa55 	bl	8000b50 <__aeabi_uldivmod>
 80056a6:	4602      	mov	r2, r0
 80056a8:	460b      	mov	r3, r1
 80056aa:	4b6c      	ldr	r3, [pc, #432]	; (800585c <UART_SetConfig+0x38c>)
 80056ac:	fba3 1302 	umull	r1, r3, r3, r2
 80056b0:	095b      	lsrs	r3, r3, #5
 80056b2:	2164      	movs	r1, #100	; 0x64
 80056b4:	fb01 f303 	mul.w	r3, r1, r3
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	00db      	lsls	r3, r3, #3
 80056bc:	3332      	adds	r3, #50	; 0x32
 80056be:	4a67      	ldr	r2, [pc, #412]	; (800585c <UART_SetConfig+0x38c>)
 80056c0:	fba2 2303 	umull	r2, r3, r2, r3
 80056c4:	095b      	lsrs	r3, r3, #5
 80056c6:	f003 0207 	and.w	r2, r3, #7
 80056ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4432      	add	r2, r6
 80056d0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80056d2:	e0b9      	b.n	8005848 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056d6:	461c      	mov	r4, r3
 80056d8:	f04f 0500 	mov.w	r5, #0
 80056dc:	4622      	mov	r2, r4
 80056de:	462b      	mov	r3, r5
 80056e0:	1891      	adds	r1, r2, r2
 80056e2:	6139      	str	r1, [r7, #16]
 80056e4:	415b      	adcs	r3, r3
 80056e6:	617b      	str	r3, [r7, #20]
 80056e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80056ec:	1912      	adds	r2, r2, r4
 80056ee:	eb45 0303 	adc.w	r3, r5, r3
 80056f2:	f04f 0000 	mov.w	r0, #0
 80056f6:	f04f 0100 	mov.w	r1, #0
 80056fa:	00d9      	lsls	r1, r3, #3
 80056fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005700:	00d0      	lsls	r0, r2, #3
 8005702:	4602      	mov	r2, r0
 8005704:	460b      	mov	r3, r1
 8005706:	eb12 0804 	adds.w	r8, r2, r4
 800570a:	eb43 0905 	adc.w	r9, r3, r5
 800570e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	4618      	mov	r0, r3
 8005714:	f04f 0100 	mov.w	r1, #0
 8005718:	f04f 0200 	mov.w	r2, #0
 800571c:	f04f 0300 	mov.w	r3, #0
 8005720:	008b      	lsls	r3, r1, #2
 8005722:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005726:	0082      	lsls	r2, r0, #2
 8005728:	4640      	mov	r0, r8
 800572a:	4649      	mov	r1, r9
 800572c:	f7fb fa10 	bl	8000b50 <__aeabi_uldivmod>
 8005730:	4602      	mov	r2, r0
 8005732:	460b      	mov	r3, r1
 8005734:	4b49      	ldr	r3, [pc, #292]	; (800585c <UART_SetConfig+0x38c>)
 8005736:	fba3 2302 	umull	r2, r3, r3, r2
 800573a:	095b      	lsrs	r3, r3, #5
 800573c:	011e      	lsls	r6, r3, #4
 800573e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005740:	4618      	mov	r0, r3
 8005742:	f04f 0100 	mov.w	r1, #0
 8005746:	4602      	mov	r2, r0
 8005748:	460b      	mov	r3, r1
 800574a:	1894      	adds	r4, r2, r2
 800574c:	60bc      	str	r4, [r7, #8]
 800574e:	415b      	adcs	r3, r3
 8005750:	60fb      	str	r3, [r7, #12]
 8005752:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005756:	1812      	adds	r2, r2, r0
 8005758:	eb41 0303 	adc.w	r3, r1, r3
 800575c:	f04f 0400 	mov.w	r4, #0
 8005760:	f04f 0500 	mov.w	r5, #0
 8005764:	00dd      	lsls	r5, r3, #3
 8005766:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800576a:	00d4      	lsls	r4, r2, #3
 800576c:	4622      	mov	r2, r4
 800576e:	462b      	mov	r3, r5
 8005770:	1814      	adds	r4, r2, r0
 8005772:	64bc      	str	r4, [r7, #72]	; 0x48
 8005774:	414b      	adcs	r3, r1
 8005776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	4618      	mov	r0, r3
 800577e:	f04f 0100 	mov.w	r1, #0
 8005782:	f04f 0200 	mov.w	r2, #0
 8005786:	f04f 0300 	mov.w	r3, #0
 800578a:	008b      	lsls	r3, r1, #2
 800578c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005790:	0082      	lsls	r2, r0, #2
 8005792:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005796:	f7fb f9db 	bl	8000b50 <__aeabi_uldivmod>
 800579a:	4602      	mov	r2, r0
 800579c:	460b      	mov	r3, r1
 800579e:	4b2f      	ldr	r3, [pc, #188]	; (800585c <UART_SetConfig+0x38c>)
 80057a0:	fba3 1302 	umull	r1, r3, r3, r2
 80057a4:	095b      	lsrs	r3, r3, #5
 80057a6:	2164      	movs	r1, #100	; 0x64
 80057a8:	fb01 f303 	mul.w	r3, r1, r3
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	011b      	lsls	r3, r3, #4
 80057b0:	3332      	adds	r3, #50	; 0x32
 80057b2:	4a2a      	ldr	r2, [pc, #168]	; (800585c <UART_SetConfig+0x38c>)
 80057b4:	fba2 2303 	umull	r2, r3, r2, r3
 80057b8:	095b      	lsrs	r3, r3, #5
 80057ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057be:	441e      	add	r6, r3
 80057c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057c2:	4618      	mov	r0, r3
 80057c4:	f04f 0100 	mov.w	r1, #0
 80057c8:	4602      	mov	r2, r0
 80057ca:	460b      	mov	r3, r1
 80057cc:	1894      	adds	r4, r2, r2
 80057ce:	603c      	str	r4, [r7, #0]
 80057d0:	415b      	adcs	r3, r3
 80057d2:	607b      	str	r3, [r7, #4]
 80057d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057d8:	1812      	adds	r2, r2, r0
 80057da:	eb41 0303 	adc.w	r3, r1, r3
 80057de:	f04f 0400 	mov.w	r4, #0
 80057e2:	f04f 0500 	mov.w	r5, #0
 80057e6:	00dd      	lsls	r5, r3, #3
 80057e8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80057ec:	00d4      	lsls	r4, r2, #3
 80057ee:	4622      	mov	r2, r4
 80057f0:	462b      	mov	r3, r5
 80057f2:	eb12 0a00 	adds.w	sl, r2, r0
 80057f6:	eb43 0b01 	adc.w	fp, r3, r1
 80057fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	4618      	mov	r0, r3
 8005800:	f04f 0100 	mov.w	r1, #0
 8005804:	f04f 0200 	mov.w	r2, #0
 8005808:	f04f 0300 	mov.w	r3, #0
 800580c:	008b      	lsls	r3, r1, #2
 800580e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005812:	0082      	lsls	r2, r0, #2
 8005814:	4650      	mov	r0, sl
 8005816:	4659      	mov	r1, fp
 8005818:	f7fb f99a 	bl	8000b50 <__aeabi_uldivmod>
 800581c:	4602      	mov	r2, r0
 800581e:	460b      	mov	r3, r1
 8005820:	4b0e      	ldr	r3, [pc, #56]	; (800585c <UART_SetConfig+0x38c>)
 8005822:	fba3 1302 	umull	r1, r3, r3, r2
 8005826:	095b      	lsrs	r3, r3, #5
 8005828:	2164      	movs	r1, #100	; 0x64
 800582a:	fb01 f303 	mul.w	r3, r1, r3
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	011b      	lsls	r3, r3, #4
 8005832:	3332      	adds	r3, #50	; 0x32
 8005834:	4a09      	ldr	r2, [pc, #36]	; (800585c <UART_SetConfig+0x38c>)
 8005836:	fba2 2303 	umull	r2, r3, r2, r3
 800583a:	095b      	lsrs	r3, r3, #5
 800583c:	f003 020f 	and.w	r2, r3, #15
 8005840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4432      	add	r2, r6
 8005846:	609a      	str	r2, [r3, #8]
}
 8005848:	bf00      	nop
 800584a:	377c      	adds	r7, #124	; 0x7c
 800584c:	46bd      	mov	sp, r7
 800584e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005852:	bf00      	nop
 8005854:	40011000 	.word	0x40011000
 8005858:	40011400 	.word	0x40011400
 800585c:	51eb851f 	.word	0x51eb851f

08005860 <__errno>:
 8005860:	4b01      	ldr	r3, [pc, #4]	; (8005868 <__errno+0x8>)
 8005862:	6818      	ldr	r0, [r3, #0]
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	20000018 	.word	0x20000018

0800586c <__libc_init_array>:
 800586c:	b570      	push	{r4, r5, r6, lr}
 800586e:	4d0d      	ldr	r5, [pc, #52]	; (80058a4 <__libc_init_array+0x38>)
 8005870:	4c0d      	ldr	r4, [pc, #52]	; (80058a8 <__libc_init_array+0x3c>)
 8005872:	1b64      	subs	r4, r4, r5
 8005874:	10a4      	asrs	r4, r4, #2
 8005876:	2600      	movs	r6, #0
 8005878:	42a6      	cmp	r6, r4
 800587a:	d109      	bne.n	8005890 <__libc_init_array+0x24>
 800587c:	4d0b      	ldr	r5, [pc, #44]	; (80058ac <__libc_init_array+0x40>)
 800587e:	4c0c      	ldr	r4, [pc, #48]	; (80058b0 <__libc_init_array+0x44>)
 8005880:	f000 ffd4 	bl	800682c <_init>
 8005884:	1b64      	subs	r4, r4, r5
 8005886:	10a4      	asrs	r4, r4, #2
 8005888:	2600      	movs	r6, #0
 800588a:	42a6      	cmp	r6, r4
 800588c:	d105      	bne.n	800589a <__libc_init_array+0x2e>
 800588e:	bd70      	pop	{r4, r5, r6, pc}
 8005890:	f855 3b04 	ldr.w	r3, [r5], #4
 8005894:	4798      	blx	r3
 8005896:	3601      	adds	r6, #1
 8005898:	e7ee      	b.n	8005878 <__libc_init_array+0xc>
 800589a:	f855 3b04 	ldr.w	r3, [r5], #4
 800589e:	4798      	blx	r3
 80058a0:	3601      	adds	r6, #1
 80058a2:	e7f2      	b.n	800588a <__libc_init_array+0x1e>
 80058a4:	080068d0 	.word	0x080068d0
 80058a8:	080068d0 	.word	0x080068d0
 80058ac:	080068d0 	.word	0x080068d0
 80058b0:	080068d4 	.word	0x080068d4

080058b4 <memset>:
 80058b4:	4402      	add	r2, r0
 80058b6:	4603      	mov	r3, r0
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d100      	bne.n	80058be <memset+0xa>
 80058bc:	4770      	bx	lr
 80058be:	f803 1b01 	strb.w	r1, [r3], #1
 80058c2:	e7f9      	b.n	80058b8 <memset+0x4>

080058c4 <pow>:
 80058c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058c8:	ec59 8b10 	vmov	r8, r9, d0
 80058cc:	ec57 6b11 	vmov	r6, r7, d1
 80058d0:	f000 f8a6 	bl	8005a20 <__ieee754_pow>
 80058d4:	4b4e      	ldr	r3, [pc, #312]	; (8005a10 <pow+0x14c>)
 80058d6:	f993 3000 	ldrsb.w	r3, [r3]
 80058da:	3301      	adds	r3, #1
 80058dc:	ec55 4b10 	vmov	r4, r5, d0
 80058e0:	d015      	beq.n	800590e <pow+0x4a>
 80058e2:	4632      	mov	r2, r6
 80058e4:	463b      	mov	r3, r7
 80058e6:	4630      	mov	r0, r6
 80058e8:	4639      	mov	r1, r7
 80058ea:	f7fb f8cb 	bl	8000a84 <__aeabi_dcmpun>
 80058ee:	b970      	cbnz	r0, 800590e <pow+0x4a>
 80058f0:	4642      	mov	r2, r8
 80058f2:	464b      	mov	r3, r9
 80058f4:	4640      	mov	r0, r8
 80058f6:	4649      	mov	r1, r9
 80058f8:	f7fb f8c4 	bl	8000a84 <__aeabi_dcmpun>
 80058fc:	2200      	movs	r2, #0
 80058fe:	2300      	movs	r3, #0
 8005900:	b148      	cbz	r0, 8005916 <pow+0x52>
 8005902:	4630      	mov	r0, r6
 8005904:	4639      	mov	r1, r7
 8005906:	f7fb f88b 	bl	8000a20 <__aeabi_dcmpeq>
 800590a:	2800      	cmp	r0, #0
 800590c:	d17d      	bne.n	8005a0a <pow+0x146>
 800590e:	ec45 4b10 	vmov	d0, r4, r5
 8005912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005916:	4640      	mov	r0, r8
 8005918:	4649      	mov	r1, r9
 800591a:	f7fb f881 	bl	8000a20 <__aeabi_dcmpeq>
 800591e:	b1e0      	cbz	r0, 800595a <pow+0x96>
 8005920:	2200      	movs	r2, #0
 8005922:	2300      	movs	r3, #0
 8005924:	4630      	mov	r0, r6
 8005926:	4639      	mov	r1, r7
 8005928:	f7fb f87a 	bl	8000a20 <__aeabi_dcmpeq>
 800592c:	2800      	cmp	r0, #0
 800592e:	d16c      	bne.n	8005a0a <pow+0x146>
 8005930:	ec47 6b10 	vmov	d0, r6, r7
 8005934:	f000 fe53 	bl	80065de <finite>
 8005938:	2800      	cmp	r0, #0
 800593a:	d0e8      	beq.n	800590e <pow+0x4a>
 800593c:	2200      	movs	r2, #0
 800593e:	2300      	movs	r3, #0
 8005940:	4630      	mov	r0, r6
 8005942:	4639      	mov	r1, r7
 8005944:	f7fb f876 	bl	8000a34 <__aeabi_dcmplt>
 8005948:	2800      	cmp	r0, #0
 800594a:	d0e0      	beq.n	800590e <pow+0x4a>
 800594c:	f7ff ff88 	bl	8005860 <__errno>
 8005950:	2321      	movs	r3, #33	; 0x21
 8005952:	6003      	str	r3, [r0, #0]
 8005954:	2400      	movs	r4, #0
 8005956:	4d2f      	ldr	r5, [pc, #188]	; (8005a14 <pow+0x150>)
 8005958:	e7d9      	b.n	800590e <pow+0x4a>
 800595a:	ec45 4b10 	vmov	d0, r4, r5
 800595e:	f000 fe3e 	bl	80065de <finite>
 8005962:	bbb8      	cbnz	r0, 80059d4 <pow+0x110>
 8005964:	ec49 8b10 	vmov	d0, r8, r9
 8005968:	f000 fe39 	bl	80065de <finite>
 800596c:	b390      	cbz	r0, 80059d4 <pow+0x110>
 800596e:	ec47 6b10 	vmov	d0, r6, r7
 8005972:	f000 fe34 	bl	80065de <finite>
 8005976:	b368      	cbz	r0, 80059d4 <pow+0x110>
 8005978:	4622      	mov	r2, r4
 800597a:	462b      	mov	r3, r5
 800597c:	4620      	mov	r0, r4
 800597e:	4629      	mov	r1, r5
 8005980:	f7fb f880 	bl	8000a84 <__aeabi_dcmpun>
 8005984:	b160      	cbz	r0, 80059a0 <pow+0xdc>
 8005986:	f7ff ff6b 	bl	8005860 <__errno>
 800598a:	2321      	movs	r3, #33	; 0x21
 800598c:	6003      	str	r3, [r0, #0]
 800598e:	2200      	movs	r2, #0
 8005990:	2300      	movs	r3, #0
 8005992:	4610      	mov	r0, r2
 8005994:	4619      	mov	r1, r3
 8005996:	f7fa ff05 	bl	80007a4 <__aeabi_ddiv>
 800599a:	4604      	mov	r4, r0
 800599c:	460d      	mov	r5, r1
 800599e:	e7b6      	b.n	800590e <pow+0x4a>
 80059a0:	f7ff ff5e 	bl	8005860 <__errno>
 80059a4:	2322      	movs	r3, #34	; 0x22
 80059a6:	6003      	str	r3, [r0, #0]
 80059a8:	2200      	movs	r2, #0
 80059aa:	2300      	movs	r3, #0
 80059ac:	4640      	mov	r0, r8
 80059ae:	4649      	mov	r1, r9
 80059b0:	f7fb f840 	bl	8000a34 <__aeabi_dcmplt>
 80059b4:	2400      	movs	r4, #0
 80059b6:	b158      	cbz	r0, 80059d0 <pow+0x10c>
 80059b8:	ec47 6b10 	vmov	d0, r6, r7
 80059bc:	f000 fe24 	bl	8006608 <rint>
 80059c0:	4632      	mov	r2, r6
 80059c2:	ec51 0b10 	vmov	r0, r1, d0
 80059c6:	463b      	mov	r3, r7
 80059c8:	f7fb f82a 	bl	8000a20 <__aeabi_dcmpeq>
 80059cc:	2800      	cmp	r0, #0
 80059ce:	d0c2      	beq.n	8005956 <pow+0x92>
 80059d0:	4d11      	ldr	r5, [pc, #68]	; (8005a18 <pow+0x154>)
 80059d2:	e79c      	b.n	800590e <pow+0x4a>
 80059d4:	2200      	movs	r2, #0
 80059d6:	2300      	movs	r3, #0
 80059d8:	4620      	mov	r0, r4
 80059da:	4629      	mov	r1, r5
 80059dc:	f7fb f820 	bl	8000a20 <__aeabi_dcmpeq>
 80059e0:	2800      	cmp	r0, #0
 80059e2:	d094      	beq.n	800590e <pow+0x4a>
 80059e4:	ec49 8b10 	vmov	d0, r8, r9
 80059e8:	f000 fdf9 	bl	80065de <finite>
 80059ec:	2800      	cmp	r0, #0
 80059ee:	d08e      	beq.n	800590e <pow+0x4a>
 80059f0:	ec47 6b10 	vmov	d0, r6, r7
 80059f4:	f000 fdf3 	bl	80065de <finite>
 80059f8:	2800      	cmp	r0, #0
 80059fa:	d088      	beq.n	800590e <pow+0x4a>
 80059fc:	f7ff ff30 	bl	8005860 <__errno>
 8005a00:	2322      	movs	r3, #34	; 0x22
 8005a02:	6003      	str	r3, [r0, #0]
 8005a04:	2400      	movs	r4, #0
 8005a06:	2500      	movs	r5, #0
 8005a08:	e781      	b.n	800590e <pow+0x4a>
 8005a0a:	4d04      	ldr	r5, [pc, #16]	; (8005a1c <pow+0x158>)
 8005a0c:	2400      	movs	r4, #0
 8005a0e:	e77e      	b.n	800590e <pow+0x4a>
 8005a10:	2000007c 	.word	0x2000007c
 8005a14:	fff00000 	.word	0xfff00000
 8005a18:	7ff00000 	.word	0x7ff00000
 8005a1c:	3ff00000 	.word	0x3ff00000

08005a20 <__ieee754_pow>:
 8005a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a24:	ed2d 8b06 	vpush	{d8-d10}
 8005a28:	b08d      	sub	sp, #52	; 0x34
 8005a2a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8005a2e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8005a32:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8005a36:	ea56 0100 	orrs.w	r1, r6, r0
 8005a3a:	ec53 2b10 	vmov	r2, r3, d0
 8005a3e:	f000 84d1 	beq.w	80063e4 <__ieee754_pow+0x9c4>
 8005a42:	497f      	ldr	r1, [pc, #508]	; (8005c40 <__ieee754_pow+0x220>)
 8005a44:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8005a48:	428c      	cmp	r4, r1
 8005a4a:	ee10 8a10 	vmov	r8, s0
 8005a4e:	4699      	mov	r9, r3
 8005a50:	dc09      	bgt.n	8005a66 <__ieee754_pow+0x46>
 8005a52:	d103      	bne.n	8005a5c <__ieee754_pow+0x3c>
 8005a54:	b97a      	cbnz	r2, 8005a76 <__ieee754_pow+0x56>
 8005a56:	42a6      	cmp	r6, r4
 8005a58:	dd02      	ble.n	8005a60 <__ieee754_pow+0x40>
 8005a5a:	e00c      	b.n	8005a76 <__ieee754_pow+0x56>
 8005a5c:	428e      	cmp	r6, r1
 8005a5e:	dc02      	bgt.n	8005a66 <__ieee754_pow+0x46>
 8005a60:	428e      	cmp	r6, r1
 8005a62:	d110      	bne.n	8005a86 <__ieee754_pow+0x66>
 8005a64:	b178      	cbz	r0, 8005a86 <__ieee754_pow+0x66>
 8005a66:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005a6a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005a6e:	ea54 0308 	orrs.w	r3, r4, r8
 8005a72:	f000 84b7 	beq.w	80063e4 <__ieee754_pow+0x9c4>
 8005a76:	4873      	ldr	r0, [pc, #460]	; (8005c44 <__ieee754_pow+0x224>)
 8005a78:	b00d      	add	sp, #52	; 0x34
 8005a7a:	ecbd 8b06 	vpop	{d8-d10}
 8005a7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a82:	f000 bdb9 	b.w	80065f8 <nan>
 8005a86:	f1b9 0f00 	cmp.w	r9, #0
 8005a8a:	da36      	bge.n	8005afa <__ieee754_pow+0xda>
 8005a8c:	496e      	ldr	r1, [pc, #440]	; (8005c48 <__ieee754_pow+0x228>)
 8005a8e:	428e      	cmp	r6, r1
 8005a90:	dc51      	bgt.n	8005b36 <__ieee754_pow+0x116>
 8005a92:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8005a96:	428e      	cmp	r6, r1
 8005a98:	f340 84af 	ble.w	80063fa <__ieee754_pow+0x9da>
 8005a9c:	1531      	asrs	r1, r6, #20
 8005a9e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8005aa2:	2914      	cmp	r1, #20
 8005aa4:	dd0f      	ble.n	8005ac6 <__ieee754_pow+0xa6>
 8005aa6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8005aaa:	fa20 fc01 	lsr.w	ip, r0, r1
 8005aae:	fa0c f101 	lsl.w	r1, ip, r1
 8005ab2:	4281      	cmp	r1, r0
 8005ab4:	f040 84a1 	bne.w	80063fa <__ieee754_pow+0x9da>
 8005ab8:	f00c 0c01 	and.w	ip, ip, #1
 8005abc:	f1cc 0102 	rsb	r1, ip, #2
 8005ac0:	9100      	str	r1, [sp, #0]
 8005ac2:	b180      	cbz	r0, 8005ae6 <__ieee754_pow+0xc6>
 8005ac4:	e059      	b.n	8005b7a <__ieee754_pow+0x15a>
 8005ac6:	2800      	cmp	r0, #0
 8005ac8:	d155      	bne.n	8005b76 <__ieee754_pow+0x156>
 8005aca:	f1c1 0114 	rsb	r1, r1, #20
 8005ace:	fa46 fc01 	asr.w	ip, r6, r1
 8005ad2:	fa0c f101 	lsl.w	r1, ip, r1
 8005ad6:	42b1      	cmp	r1, r6
 8005ad8:	f040 848c 	bne.w	80063f4 <__ieee754_pow+0x9d4>
 8005adc:	f00c 0c01 	and.w	ip, ip, #1
 8005ae0:	f1cc 0102 	rsb	r1, ip, #2
 8005ae4:	9100      	str	r1, [sp, #0]
 8005ae6:	4959      	ldr	r1, [pc, #356]	; (8005c4c <__ieee754_pow+0x22c>)
 8005ae8:	428e      	cmp	r6, r1
 8005aea:	d12d      	bne.n	8005b48 <__ieee754_pow+0x128>
 8005aec:	2f00      	cmp	r7, #0
 8005aee:	da79      	bge.n	8005be4 <__ieee754_pow+0x1c4>
 8005af0:	4956      	ldr	r1, [pc, #344]	; (8005c4c <__ieee754_pow+0x22c>)
 8005af2:	2000      	movs	r0, #0
 8005af4:	f7fa fe56 	bl	80007a4 <__aeabi_ddiv>
 8005af8:	e016      	b.n	8005b28 <__ieee754_pow+0x108>
 8005afa:	2100      	movs	r1, #0
 8005afc:	9100      	str	r1, [sp, #0]
 8005afe:	2800      	cmp	r0, #0
 8005b00:	d13b      	bne.n	8005b7a <__ieee754_pow+0x15a>
 8005b02:	494f      	ldr	r1, [pc, #316]	; (8005c40 <__ieee754_pow+0x220>)
 8005b04:	428e      	cmp	r6, r1
 8005b06:	d1ee      	bne.n	8005ae6 <__ieee754_pow+0xc6>
 8005b08:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005b0c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005b10:	ea53 0308 	orrs.w	r3, r3, r8
 8005b14:	f000 8466 	beq.w	80063e4 <__ieee754_pow+0x9c4>
 8005b18:	4b4d      	ldr	r3, [pc, #308]	; (8005c50 <__ieee754_pow+0x230>)
 8005b1a:	429c      	cmp	r4, r3
 8005b1c:	dd0d      	ble.n	8005b3a <__ieee754_pow+0x11a>
 8005b1e:	2f00      	cmp	r7, #0
 8005b20:	f280 8464 	bge.w	80063ec <__ieee754_pow+0x9cc>
 8005b24:	2000      	movs	r0, #0
 8005b26:	2100      	movs	r1, #0
 8005b28:	ec41 0b10 	vmov	d0, r0, r1
 8005b2c:	b00d      	add	sp, #52	; 0x34
 8005b2e:	ecbd 8b06 	vpop	{d8-d10}
 8005b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b36:	2102      	movs	r1, #2
 8005b38:	e7e0      	b.n	8005afc <__ieee754_pow+0xdc>
 8005b3a:	2f00      	cmp	r7, #0
 8005b3c:	daf2      	bge.n	8005b24 <__ieee754_pow+0x104>
 8005b3e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8005b42:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005b46:	e7ef      	b.n	8005b28 <__ieee754_pow+0x108>
 8005b48:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8005b4c:	d104      	bne.n	8005b58 <__ieee754_pow+0x138>
 8005b4e:	4610      	mov	r0, r2
 8005b50:	4619      	mov	r1, r3
 8005b52:	f7fa fcfd 	bl	8000550 <__aeabi_dmul>
 8005b56:	e7e7      	b.n	8005b28 <__ieee754_pow+0x108>
 8005b58:	493e      	ldr	r1, [pc, #248]	; (8005c54 <__ieee754_pow+0x234>)
 8005b5a:	428f      	cmp	r7, r1
 8005b5c:	d10d      	bne.n	8005b7a <__ieee754_pow+0x15a>
 8005b5e:	f1b9 0f00 	cmp.w	r9, #0
 8005b62:	db0a      	blt.n	8005b7a <__ieee754_pow+0x15a>
 8005b64:	ec43 2b10 	vmov	d0, r2, r3
 8005b68:	b00d      	add	sp, #52	; 0x34
 8005b6a:	ecbd 8b06 	vpop	{d8-d10}
 8005b6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b72:	f000 bc77 	b.w	8006464 <__ieee754_sqrt>
 8005b76:	2100      	movs	r1, #0
 8005b78:	9100      	str	r1, [sp, #0]
 8005b7a:	ec43 2b10 	vmov	d0, r2, r3
 8005b7e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005b82:	f000 fd23 	bl	80065cc <fabs>
 8005b86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b8a:	ec51 0b10 	vmov	r0, r1, d0
 8005b8e:	f1b8 0f00 	cmp.w	r8, #0
 8005b92:	d12a      	bne.n	8005bea <__ieee754_pow+0x1ca>
 8005b94:	b12c      	cbz	r4, 8005ba2 <__ieee754_pow+0x182>
 8005b96:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8005c4c <__ieee754_pow+0x22c>
 8005b9a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8005b9e:	45e6      	cmp	lr, ip
 8005ba0:	d123      	bne.n	8005bea <__ieee754_pow+0x1ca>
 8005ba2:	2f00      	cmp	r7, #0
 8005ba4:	da05      	bge.n	8005bb2 <__ieee754_pow+0x192>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	460b      	mov	r3, r1
 8005baa:	2000      	movs	r0, #0
 8005bac:	4927      	ldr	r1, [pc, #156]	; (8005c4c <__ieee754_pow+0x22c>)
 8005bae:	f7fa fdf9 	bl	80007a4 <__aeabi_ddiv>
 8005bb2:	f1b9 0f00 	cmp.w	r9, #0
 8005bb6:	dab7      	bge.n	8005b28 <__ieee754_pow+0x108>
 8005bb8:	9b00      	ldr	r3, [sp, #0]
 8005bba:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005bbe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005bc2:	4323      	orrs	r3, r4
 8005bc4:	d108      	bne.n	8005bd8 <__ieee754_pow+0x1b8>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	460b      	mov	r3, r1
 8005bca:	4610      	mov	r0, r2
 8005bcc:	4619      	mov	r1, r3
 8005bce:	f7fa fb07 	bl	80001e0 <__aeabi_dsub>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	e78d      	b.n	8005af4 <__ieee754_pow+0xd4>
 8005bd8:	9b00      	ldr	r3, [sp, #0]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d1a4      	bne.n	8005b28 <__ieee754_pow+0x108>
 8005bde:	4602      	mov	r2, r0
 8005be0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005be4:	4610      	mov	r0, r2
 8005be6:	4619      	mov	r1, r3
 8005be8:	e79e      	b.n	8005b28 <__ieee754_pow+0x108>
 8005bea:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8005bee:	f10c 35ff 	add.w	r5, ip, #4294967295
 8005bf2:	950a      	str	r5, [sp, #40]	; 0x28
 8005bf4:	9d00      	ldr	r5, [sp, #0]
 8005bf6:	46ac      	mov	ip, r5
 8005bf8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005bfa:	ea5c 0505 	orrs.w	r5, ip, r5
 8005bfe:	d0e4      	beq.n	8005bca <__ieee754_pow+0x1aa>
 8005c00:	4b15      	ldr	r3, [pc, #84]	; (8005c58 <__ieee754_pow+0x238>)
 8005c02:	429e      	cmp	r6, r3
 8005c04:	f340 80fc 	ble.w	8005e00 <__ieee754_pow+0x3e0>
 8005c08:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005c0c:	429e      	cmp	r6, r3
 8005c0e:	4b10      	ldr	r3, [pc, #64]	; (8005c50 <__ieee754_pow+0x230>)
 8005c10:	dd07      	ble.n	8005c22 <__ieee754_pow+0x202>
 8005c12:	429c      	cmp	r4, r3
 8005c14:	dc0a      	bgt.n	8005c2c <__ieee754_pow+0x20c>
 8005c16:	2f00      	cmp	r7, #0
 8005c18:	da84      	bge.n	8005b24 <__ieee754_pow+0x104>
 8005c1a:	a307      	add	r3, pc, #28	; (adr r3, 8005c38 <__ieee754_pow+0x218>)
 8005c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c20:	e795      	b.n	8005b4e <__ieee754_pow+0x12e>
 8005c22:	429c      	cmp	r4, r3
 8005c24:	dbf7      	blt.n	8005c16 <__ieee754_pow+0x1f6>
 8005c26:	4b09      	ldr	r3, [pc, #36]	; (8005c4c <__ieee754_pow+0x22c>)
 8005c28:	429c      	cmp	r4, r3
 8005c2a:	dd17      	ble.n	8005c5c <__ieee754_pow+0x23c>
 8005c2c:	2f00      	cmp	r7, #0
 8005c2e:	dcf4      	bgt.n	8005c1a <__ieee754_pow+0x1fa>
 8005c30:	e778      	b.n	8005b24 <__ieee754_pow+0x104>
 8005c32:	bf00      	nop
 8005c34:	f3af 8000 	nop.w
 8005c38:	8800759c 	.word	0x8800759c
 8005c3c:	7e37e43c 	.word	0x7e37e43c
 8005c40:	7ff00000 	.word	0x7ff00000
 8005c44:	08006884 	.word	0x08006884
 8005c48:	433fffff 	.word	0x433fffff
 8005c4c:	3ff00000 	.word	0x3ff00000
 8005c50:	3fefffff 	.word	0x3fefffff
 8005c54:	3fe00000 	.word	0x3fe00000
 8005c58:	41e00000 	.word	0x41e00000
 8005c5c:	4b64      	ldr	r3, [pc, #400]	; (8005df0 <__ieee754_pow+0x3d0>)
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f7fa fabe 	bl	80001e0 <__aeabi_dsub>
 8005c64:	a356      	add	r3, pc, #344	; (adr r3, 8005dc0 <__ieee754_pow+0x3a0>)
 8005c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6a:	4604      	mov	r4, r0
 8005c6c:	460d      	mov	r5, r1
 8005c6e:	f7fa fc6f 	bl	8000550 <__aeabi_dmul>
 8005c72:	a355      	add	r3, pc, #340	; (adr r3, 8005dc8 <__ieee754_pow+0x3a8>)
 8005c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c78:	4606      	mov	r6, r0
 8005c7a:	460f      	mov	r7, r1
 8005c7c:	4620      	mov	r0, r4
 8005c7e:	4629      	mov	r1, r5
 8005c80:	f7fa fc66 	bl	8000550 <__aeabi_dmul>
 8005c84:	4b5b      	ldr	r3, [pc, #364]	; (8005df4 <__ieee754_pow+0x3d4>)
 8005c86:	4682      	mov	sl, r0
 8005c88:	468b      	mov	fp, r1
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	4629      	mov	r1, r5
 8005c90:	f7fa fc5e 	bl	8000550 <__aeabi_dmul>
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	a14d      	add	r1, pc, #308	; (adr r1, 8005dd0 <__ieee754_pow+0x3b0>)
 8005c9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c9e:	f7fa fa9f 	bl	80001e0 <__aeabi_dsub>
 8005ca2:	4622      	mov	r2, r4
 8005ca4:	462b      	mov	r3, r5
 8005ca6:	f7fa fc53 	bl	8000550 <__aeabi_dmul>
 8005caa:	4602      	mov	r2, r0
 8005cac:	460b      	mov	r3, r1
 8005cae:	2000      	movs	r0, #0
 8005cb0:	4951      	ldr	r1, [pc, #324]	; (8005df8 <__ieee754_pow+0x3d8>)
 8005cb2:	f7fa fa95 	bl	80001e0 <__aeabi_dsub>
 8005cb6:	4622      	mov	r2, r4
 8005cb8:	4680      	mov	r8, r0
 8005cba:	4689      	mov	r9, r1
 8005cbc:	462b      	mov	r3, r5
 8005cbe:	4620      	mov	r0, r4
 8005cc0:	4629      	mov	r1, r5
 8005cc2:	f7fa fc45 	bl	8000550 <__aeabi_dmul>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	460b      	mov	r3, r1
 8005cca:	4640      	mov	r0, r8
 8005ccc:	4649      	mov	r1, r9
 8005cce:	f7fa fc3f 	bl	8000550 <__aeabi_dmul>
 8005cd2:	a341      	add	r3, pc, #260	; (adr r3, 8005dd8 <__ieee754_pow+0x3b8>)
 8005cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd8:	f7fa fc3a 	bl	8000550 <__aeabi_dmul>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	460b      	mov	r3, r1
 8005ce0:	4650      	mov	r0, sl
 8005ce2:	4659      	mov	r1, fp
 8005ce4:	f7fa fa7c 	bl	80001e0 <__aeabi_dsub>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	460b      	mov	r3, r1
 8005cec:	4680      	mov	r8, r0
 8005cee:	4689      	mov	r9, r1
 8005cf0:	4630      	mov	r0, r6
 8005cf2:	4639      	mov	r1, r7
 8005cf4:	f7fa fa76 	bl	80001e4 <__adddf3>
 8005cf8:	2400      	movs	r4, #0
 8005cfa:	4632      	mov	r2, r6
 8005cfc:	463b      	mov	r3, r7
 8005cfe:	4620      	mov	r0, r4
 8005d00:	460d      	mov	r5, r1
 8005d02:	f7fa fa6d 	bl	80001e0 <__aeabi_dsub>
 8005d06:	4602      	mov	r2, r0
 8005d08:	460b      	mov	r3, r1
 8005d0a:	4640      	mov	r0, r8
 8005d0c:	4649      	mov	r1, r9
 8005d0e:	f7fa fa67 	bl	80001e0 <__aeabi_dsub>
 8005d12:	9b00      	ldr	r3, [sp, #0]
 8005d14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d16:	3b01      	subs	r3, #1
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	4682      	mov	sl, r0
 8005d1c:	468b      	mov	fp, r1
 8005d1e:	f040 81f1 	bne.w	8006104 <__ieee754_pow+0x6e4>
 8005d22:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8005de0 <__ieee754_pow+0x3c0>
 8005d26:	eeb0 8a47 	vmov.f32	s16, s14
 8005d2a:	eef0 8a67 	vmov.f32	s17, s15
 8005d2e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005d32:	2600      	movs	r6, #0
 8005d34:	4632      	mov	r2, r6
 8005d36:	463b      	mov	r3, r7
 8005d38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d3c:	f7fa fa50 	bl	80001e0 <__aeabi_dsub>
 8005d40:	4622      	mov	r2, r4
 8005d42:	462b      	mov	r3, r5
 8005d44:	f7fa fc04 	bl	8000550 <__aeabi_dmul>
 8005d48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d4c:	4680      	mov	r8, r0
 8005d4e:	4689      	mov	r9, r1
 8005d50:	4650      	mov	r0, sl
 8005d52:	4659      	mov	r1, fp
 8005d54:	f7fa fbfc 	bl	8000550 <__aeabi_dmul>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	4640      	mov	r0, r8
 8005d5e:	4649      	mov	r1, r9
 8005d60:	f7fa fa40 	bl	80001e4 <__adddf3>
 8005d64:	4632      	mov	r2, r6
 8005d66:	463b      	mov	r3, r7
 8005d68:	4680      	mov	r8, r0
 8005d6a:	4689      	mov	r9, r1
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	4629      	mov	r1, r5
 8005d70:	f7fa fbee 	bl	8000550 <__aeabi_dmul>
 8005d74:	460b      	mov	r3, r1
 8005d76:	4604      	mov	r4, r0
 8005d78:	460d      	mov	r5, r1
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	4649      	mov	r1, r9
 8005d7e:	4640      	mov	r0, r8
 8005d80:	f7fa fa30 	bl	80001e4 <__adddf3>
 8005d84:	4b1d      	ldr	r3, [pc, #116]	; (8005dfc <__ieee754_pow+0x3dc>)
 8005d86:	4299      	cmp	r1, r3
 8005d88:	ec45 4b19 	vmov	d9, r4, r5
 8005d8c:	4606      	mov	r6, r0
 8005d8e:	460f      	mov	r7, r1
 8005d90:	468b      	mov	fp, r1
 8005d92:	f340 82fe 	ble.w	8006392 <__ieee754_pow+0x972>
 8005d96:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005d9a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005d9e:	4303      	orrs	r3, r0
 8005da0:	f000 81f0 	beq.w	8006184 <__ieee754_pow+0x764>
 8005da4:	a310      	add	r3, pc, #64	; (adr r3, 8005de8 <__ieee754_pow+0x3c8>)
 8005da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005daa:	ec51 0b18 	vmov	r0, r1, d8
 8005dae:	f7fa fbcf 	bl	8000550 <__aeabi_dmul>
 8005db2:	a30d      	add	r3, pc, #52	; (adr r3, 8005de8 <__ieee754_pow+0x3c8>)
 8005db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db8:	e6cb      	b.n	8005b52 <__ieee754_pow+0x132>
 8005dba:	bf00      	nop
 8005dbc:	f3af 8000 	nop.w
 8005dc0:	60000000 	.word	0x60000000
 8005dc4:	3ff71547 	.word	0x3ff71547
 8005dc8:	f85ddf44 	.word	0xf85ddf44
 8005dcc:	3e54ae0b 	.word	0x3e54ae0b
 8005dd0:	55555555 	.word	0x55555555
 8005dd4:	3fd55555 	.word	0x3fd55555
 8005dd8:	652b82fe 	.word	0x652b82fe
 8005ddc:	3ff71547 	.word	0x3ff71547
 8005de0:	00000000 	.word	0x00000000
 8005de4:	bff00000 	.word	0xbff00000
 8005de8:	8800759c 	.word	0x8800759c
 8005dec:	7e37e43c 	.word	0x7e37e43c
 8005df0:	3ff00000 	.word	0x3ff00000
 8005df4:	3fd00000 	.word	0x3fd00000
 8005df8:	3fe00000 	.word	0x3fe00000
 8005dfc:	408fffff 	.word	0x408fffff
 8005e00:	4bd7      	ldr	r3, [pc, #860]	; (8006160 <__ieee754_pow+0x740>)
 8005e02:	ea03 0309 	and.w	r3, r3, r9
 8005e06:	2200      	movs	r2, #0
 8005e08:	b92b      	cbnz	r3, 8005e16 <__ieee754_pow+0x3f6>
 8005e0a:	4bd6      	ldr	r3, [pc, #856]	; (8006164 <__ieee754_pow+0x744>)
 8005e0c:	f7fa fba0 	bl	8000550 <__aeabi_dmul>
 8005e10:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005e14:	460c      	mov	r4, r1
 8005e16:	1523      	asrs	r3, r4, #20
 8005e18:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005e1c:	4413      	add	r3, r2
 8005e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8005e20:	4bd1      	ldr	r3, [pc, #836]	; (8006168 <__ieee754_pow+0x748>)
 8005e22:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005e26:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005e2a:	429c      	cmp	r4, r3
 8005e2c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005e30:	dd08      	ble.n	8005e44 <__ieee754_pow+0x424>
 8005e32:	4bce      	ldr	r3, [pc, #824]	; (800616c <__ieee754_pow+0x74c>)
 8005e34:	429c      	cmp	r4, r3
 8005e36:	f340 8163 	ble.w	8006100 <__ieee754_pow+0x6e0>
 8005e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8005e40:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005e44:	2400      	movs	r4, #0
 8005e46:	00e3      	lsls	r3, r4, #3
 8005e48:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e4a:	4bc9      	ldr	r3, [pc, #804]	; (8006170 <__ieee754_pow+0x750>)
 8005e4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005e50:	ed93 7b00 	vldr	d7, [r3]
 8005e54:	4629      	mov	r1, r5
 8005e56:	ec53 2b17 	vmov	r2, r3, d7
 8005e5a:	eeb0 8a47 	vmov.f32	s16, s14
 8005e5e:	eef0 8a67 	vmov.f32	s17, s15
 8005e62:	4682      	mov	sl, r0
 8005e64:	f7fa f9bc 	bl	80001e0 <__aeabi_dsub>
 8005e68:	4652      	mov	r2, sl
 8005e6a:	4606      	mov	r6, r0
 8005e6c:	460f      	mov	r7, r1
 8005e6e:	462b      	mov	r3, r5
 8005e70:	ec51 0b18 	vmov	r0, r1, d8
 8005e74:	f7fa f9b6 	bl	80001e4 <__adddf3>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	2000      	movs	r0, #0
 8005e7e:	49bd      	ldr	r1, [pc, #756]	; (8006174 <__ieee754_pow+0x754>)
 8005e80:	f7fa fc90 	bl	80007a4 <__aeabi_ddiv>
 8005e84:	ec41 0b19 	vmov	d9, r0, r1
 8005e88:	4602      	mov	r2, r0
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	4630      	mov	r0, r6
 8005e8e:	4639      	mov	r1, r7
 8005e90:	f7fa fb5e 	bl	8000550 <__aeabi_dmul>
 8005e94:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005e98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e9c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	9304      	str	r3, [sp, #16]
 8005ea4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005ea8:	46ab      	mov	fp, r5
 8005eaa:	106d      	asrs	r5, r5, #1
 8005eac:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005eb0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005eb4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8005eb8:	2200      	movs	r2, #0
 8005eba:	4640      	mov	r0, r8
 8005ebc:	4649      	mov	r1, r9
 8005ebe:	4614      	mov	r4, r2
 8005ec0:	461d      	mov	r5, r3
 8005ec2:	f7fa fb45 	bl	8000550 <__aeabi_dmul>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	460b      	mov	r3, r1
 8005eca:	4630      	mov	r0, r6
 8005ecc:	4639      	mov	r1, r7
 8005ece:	f7fa f987 	bl	80001e0 <__aeabi_dsub>
 8005ed2:	ec53 2b18 	vmov	r2, r3, d8
 8005ed6:	4606      	mov	r6, r0
 8005ed8:	460f      	mov	r7, r1
 8005eda:	4620      	mov	r0, r4
 8005edc:	4629      	mov	r1, r5
 8005ede:	f7fa f97f 	bl	80001e0 <__aeabi_dsub>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	4650      	mov	r0, sl
 8005ee8:	4659      	mov	r1, fp
 8005eea:	f7fa f979 	bl	80001e0 <__aeabi_dsub>
 8005eee:	4642      	mov	r2, r8
 8005ef0:	464b      	mov	r3, r9
 8005ef2:	f7fa fb2d 	bl	8000550 <__aeabi_dmul>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	460b      	mov	r3, r1
 8005efa:	4630      	mov	r0, r6
 8005efc:	4639      	mov	r1, r7
 8005efe:	f7fa f96f 	bl	80001e0 <__aeabi_dsub>
 8005f02:	ec53 2b19 	vmov	r2, r3, d9
 8005f06:	f7fa fb23 	bl	8000550 <__aeabi_dmul>
 8005f0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f0e:	ec41 0b18 	vmov	d8, r0, r1
 8005f12:	4610      	mov	r0, r2
 8005f14:	4619      	mov	r1, r3
 8005f16:	f7fa fb1b 	bl	8000550 <__aeabi_dmul>
 8005f1a:	a37d      	add	r3, pc, #500	; (adr r3, 8006110 <__ieee754_pow+0x6f0>)
 8005f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f20:	4604      	mov	r4, r0
 8005f22:	460d      	mov	r5, r1
 8005f24:	f7fa fb14 	bl	8000550 <__aeabi_dmul>
 8005f28:	a37b      	add	r3, pc, #492	; (adr r3, 8006118 <__ieee754_pow+0x6f8>)
 8005f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2e:	f7fa f959 	bl	80001e4 <__adddf3>
 8005f32:	4622      	mov	r2, r4
 8005f34:	462b      	mov	r3, r5
 8005f36:	f7fa fb0b 	bl	8000550 <__aeabi_dmul>
 8005f3a:	a379      	add	r3, pc, #484	; (adr r3, 8006120 <__ieee754_pow+0x700>)
 8005f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f40:	f7fa f950 	bl	80001e4 <__adddf3>
 8005f44:	4622      	mov	r2, r4
 8005f46:	462b      	mov	r3, r5
 8005f48:	f7fa fb02 	bl	8000550 <__aeabi_dmul>
 8005f4c:	a376      	add	r3, pc, #472	; (adr r3, 8006128 <__ieee754_pow+0x708>)
 8005f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f52:	f7fa f947 	bl	80001e4 <__adddf3>
 8005f56:	4622      	mov	r2, r4
 8005f58:	462b      	mov	r3, r5
 8005f5a:	f7fa faf9 	bl	8000550 <__aeabi_dmul>
 8005f5e:	a374      	add	r3, pc, #464	; (adr r3, 8006130 <__ieee754_pow+0x710>)
 8005f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f64:	f7fa f93e 	bl	80001e4 <__adddf3>
 8005f68:	4622      	mov	r2, r4
 8005f6a:	462b      	mov	r3, r5
 8005f6c:	f7fa faf0 	bl	8000550 <__aeabi_dmul>
 8005f70:	a371      	add	r3, pc, #452	; (adr r3, 8006138 <__ieee754_pow+0x718>)
 8005f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f76:	f7fa f935 	bl	80001e4 <__adddf3>
 8005f7a:	4622      	mov	r2, r4
 8005f7c:	4606      	mov	r6, r0
 8005f7e:	460f      	mov	r7, r1
 8005f80:	462b      	mov	r3, r5
 8005f82:	4620      	mov	r0, r4
 8005f84:	4629      	mov	r1, r5
 8005f86:	f7fa fae3 	bl	8000550 <__aeabi_dmul>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	4630      	mov	r0, r6
 8005f90:	4639      	mov	r1, r7
 8005f92:	f7fa fadd 	bl	8000550 <__aeabi_dmul>
 8005f96:	4642      	mov	r2, r8
 8005f98:	4604      	mov	r4, r0
 8005f9a:	460d      	mov	r5, r1
 8005f9c:	464b      	mov	r3, r9
 8005f9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fa2:	f7fa f91f 	bl	80001e4 <__adddf3>
 8005fa6:	ec53 2b18 	vmov	r2, r3, d8
 8005faa:	f7fa fad1 	bl	8000550 <__aeabi_dmul>
 8005fae:	4622      	mov	r2, r4
 8005fb0:	462b      	mov	r3, r5
 8005fb2:	f7fa f917 	bl	80001e4 <__adddf3>
 8005fb6:	4642      	mov	r2, r8
 8005fb8:	4682      	mov	sl, r0
 8005fba:	468b      	mov	fp, r1
 8005fbc:	464b      	mov	r3, r9
 8005fbe:	4640      	mov	r0, r8
 8005fc0:	4649      	mov	r1, r9
 8005fc2:	f7fa fac5 	bl	8000550 <__aeabi_dmul>
 8005fc6:	4b6c      	ldr	r3, [pc, #432]	; (8006178 <__ieee754_pow+0x758>)
 8005fc8:	2200      	movs	r2, #0
 8005fca:	4606      	mov	r6, r0
 8005fcc:	460f      	mov	r7, r1
 8005fce:	f7fa f909 	bl	80001e4 <__adddf3>
 8005fd2:	4652      	mov	r2, sl
 8005fd4:	465b      	mov	r3, fp
 8005fd6:	f7fa f905 	bl	80001e4 <__adddf3>
 8005fda:	9c04      	ldr	r4, [sp, #16]
 8005fdc:	460d      	mov	r5, r1
 8005fde:	4622      	mov	r2, r4
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	4640      	mov	r0, r8
 8005fe4:	4649      	mov	r1, r9
 8005fe6:	f7fa fab3 	bl	8000550 <__aeabi_dmul>
 8005fea:	4b63      	ldr	r3, [pc, #396]	; (8006178 <__ieee754_pow+0x758>)
 8005fec:	4680      	mov	r8, r0
 8005fee:	4689      	mov	r9, r1
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	4629      	mov	r1, r5
 8005ff6:	f7fa f8f3 	bl	80001e0 <__aeabi_dsub>
 8005ffa:	4632      	mov	r2, r6
 8005ffc:	463b      	mov	r3, r7
 8005ffe:	f7fa f8ef 	bl	80001e0 <__aeabi_dsub>
 8006002:	4602      	mov	r2, r0
 8006004:	460b      	mov	r3, r1
 8006006:	4650      	mov	r0, sl
 8006008:	4659      	mov	r1, fp
 800600a:	f7fa f8e9 	bl	80001e0 <__aeabi_dsub>
 800600e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006012:	f7fa fa9d 	bl	8000550 <__aeabi_dmul>
 8006016:	4622      	mov	r2, r4
 8006018:	4606      	mov	r6, r0
 800601a:	460f      	mov	r7, r1
 800601c:	462b      	mov	r3, r5
 800601e:	ec51 0b18 	vmov	r0, r1, d8
 8006022:	f7fa fa95 	bl	8000550 <__aeabi_dmul>
 8006026:	4602      	mov	r2, r0
 8006028:	460b      	mov	r3, r1
 800602a:	4630      	mov	r0, r6
 800602c:	4639      	mov	r1, r7
 800602e:	f7fa f8d9 	bl	80001e4 <__adddf3>
 8006032:	4606      	mov	r6, r0
 8006034:	460f      	mov	r7, r1
 8006036:	4602      	mov	r2, r0
 8006038:	460b      	mov	r3, r1
 800603a:	4640      	mov	r0, r8
 800603c:	4649      	mov	r1, r9
 800603e:	f7fa f8d1 	bl	80001e4 <__adddf3>
 8006042:	9c04      	ldr	r4, [sp, #16]
 8006044:	a33e      	add	r3, pc, #248	; (adr r3, 8006140 <__ieee754_pow+0x720>)
 8006046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604a:	4620      	mov	r0, r4
 800604c:	460d      	mov	r5, r1
 800604e:	f7fa fa7f 	bl	8000550 <__aeabi_dmul>
 8006052:	4642      	mov	r2, r8
 8006054:	ec41 0b18 	vmov	d8, r0, r1
 8006058:	464b      	mov	r3, r9
 800605a:	4620      	mov	r0, r4
 800605c:	4629      	mov	r1, r5
 800605e:	f7fa f8bf 	bl	80001e0 <__aeabi_dsub>
 8006062:	4602      	mov	r2, r0
 8006064:	460b      	mov	r3, r1
 8006066:	4630      	mov	r0, r6
 8006068:	4639      	mov	r1, r7
 800606a:	f7fa f8b9 	bl	80001e0 <__aeabi_dsub>
 800606e:	a336      	add	r3, pc, #216	; (adr r3, 8006148 <__ieee754_pow+0x728>)
 8006070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006074:	f7fa fa6c 	bl	8000550 <__aeabi_dmul>
 8006078:	a335      	add	r3, pc, #212	; (adr r3, 8006150 <__ieee754_pow+0x730>)
 800607a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607e:	4606      	mov	r6, r0
 8006080:	460f      	mov	r7, r1
 8006082:	4620      	mov	r0, r4
 8006084:	4629      	mov	r1, r5
 8006086:	f7fa fa63 	bl	8000550 <__aeabi_dmul>
 800608a:	4602      	mov	r2, r0
 800608c:	460b      	mov	r3, r1
 800608e:	4630      	mov	r0, r6
 8006090:	4639      	mov	r1, r7
 8006092:	f7fa f8a7 	bl	80001e4 <__adddf3>
 8006096:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006098:	4b38      	ldr	r3, [pc, #224]	; (800617c <__ieee754_pow+0x75c>)
 800609a:	4413      	add	r3, r2
 800609c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a0:	f7fa f8a0 	bl	80001e4 <__adddf3>
 80060a4:	4682      	mov	sl, r0
 80060a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060a8:	468b      	mov	fp, r1
 80060aa:	f7fa f9e7 	bl	800047c <__aeabi_i2d>
 80060ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80060b0:	4b33      	ldr	r3, [pc, #204]	; (8006180 <__ieee754_pow+0x760>)
 80060b2:	4413      	add	r3, r2
 80060b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80060b8:	4606      	mov	r6, r0
 80060ba:	460f      	mov	r7, r1
 80060bc:	4652      	mov	r2, sl
 80060be:	465b      	mov	r3, fp
 80060c0:	ec51 0b18 	vmov	r0, r1, d8
 80060c4:	f7fa f88e 	bl	80001e4 <__adddf3>
 80060c8:	4642      	mov	r2, r8
 80060ca:	464b      	mov	r3, r9
 80060cc:	f7fa f88a 	bl	80001e4 <__adddf3>
 80060d0:	4632      	mov	r2, r6
 80060d2:	463b      	mov	r3, r7
 80060d4:	f7fa f886 	bl	80001e4 <__adddf3>
 80060d8:	9c04      	ldr	r4, [sp, #16]
 80060da:	4632      	mov	r2, r6
 80060dc:	463b      	mov	r3, r7
 80060de:	4620      	mov	r0, r4
 80060e0:	460d      	mov	r5, r1
 80060e2:	f7fa f87d 	bl	80001e0 <__aeabi_dsub>
 80060e6:	4642      	mov	r2, r8
 80060e8:	464b      	mov	r3, r9
 80060ea:	f7fa f879 	bl	80001e0 <__aeabi_dsub>
 80060ee:	ec53 2b18 	vmov	r2, r3, d8
 80060f2:	f7fa f875 	bl	80001e0 <__aeabi_dsub>
 80060f6:	4602      	mov	r2, r0
 80060f8:	460b      	mov	r3, r1
 80060fa:	4650      	mov	r0, sl
 80060fc:	4659      	mov	r1, fp
 80060fe:	e606      	b.n	8005d0e <__ieee754_pow+0x2ee>
 8006100:	2401      	movs	r4, #1
 8006102:	e6a0      	b.n	8005e46 <__ieee754_pow+0x426>
 8006104:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8006158 <__ieee754_pow+0x738>
 8006108:	e60d      	b.n	8005d26 <__ieee754_pow+0x306>
 800610a:	bf00      	nop
 800610c:	f3af 8000 	nop.w
 8006110:	4a454eef 	.word	0x4a454eef
 8006114:	3fca7e28 	.word	0x3fca7e28
 8006118:	93c9db65 	.word	0x93c9db65
 800611c:	3fcd864a 	.word	0x3fcd864a
 8006120:	a91d4101 	.word	0xa91d4101
 8006124:	3fd17460 	.word	0x3fd17460
 8006128:	518f264d 	.word	0x518f264d
 800612c:	3fd55555 	.word	0x3fd55555
 8006130:	db6fabff 	.word	0xdb6fabff
 8006134:	3fdb6db6 	.word	0x3fdb6db6
 8006138:	33333303 	.word	0x33333303
 800613c:	3fe33333 	.word	0x3fe33333
 8006140:	e0000000 	.word	0xe0000000
 8006144:	3feec709 	.word	0x3feec709
 8006148:	dc3a03fd 	.word	0xdc3a03fd
 800614c:	3feec709 	.word	0x3feec709
 8006150:	145b01f5 	.word	0x145b01f5
 8006154:	be3e2fe0 	.word	0xbe3e2fe0
 8006158:	00000000 	.word	0x00000000
 800615c:	3ff00000 	.word	0x3ff00000
 8006160:	7ff00000 	.word	0x7ff00000
 8006164:	43400000 	.word	0x43400000
 8006168:	0003988e 	.word	0x0003988e
 800616c:	000bb679 	.word	0x000bb679
 8006170:	08006888 	.word	0x08006888
 8006174:	3ff00000 	.word	0x3ff00000
 8006178:	40080000 	.word	0x40080000
 800617c:	080068a8 	.word	0x080068a8
 8006180:	08006898 	.word	0x08006898
 8006184:	a3b5      	add	r3, pc, #724	; (adr r3, 800645c <__ieee754_pow+0xa3c>)
 8006186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618a:	4640      	mov	r0, r8
 800618c:	4649      	mov	r1, r9
 800618e:	f7fa f829 	bl	80001e4 <__adddf3>
 8006192:	4622      	mov	r2, r4
 8006194:	ec41 0b1a 	vmov	d10, r0, r1
 8006198:	462b      	mov	r3, r5
 800619a:	4630      	mov	r0, r6
 800619c:	4639      	mov	r1, r7
 800619e:	f7fa f81f 	bl	80001e0 <__aeabi_dsub>
 80061a2:	4602      	mov	r2, r0
 80061a4:	460b      	mov	r3, r1
 80061a6:	ec51 0b1a 	vmov	r0, r1, d10
 80061aa:	f7fa fc61 	bl	8000a70 <__aeabi_dcmpgt>
 80061ae:	2800      	cmp	r0, #0
 80061b0:	f47f adf8 	bne.w	8005da4 <__ieee754_pow+0x384>
 80061b4:	4aa4      	ldr	r2, [pc, #656]	; (8006448 <__ieee754_pow+0xa28>)
 80061b6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80061ba:	4293      	cmp	r3, r2
 80061bc:	f340 810b 	ble.w	80063d6 <__ieee754_pow+0x9b6>
 80061c0:	151b      	asrs	r3, r3, #20
 80061c2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80061c6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80061ca:	fa4a f303 	asr.w	r3, sl, r3
 80061ce:	445b      	add	r3, fp
 80061d0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80061d4:	4e9d      	ldr	r6, [pc, #628]	; (800644c <__ieee754_pow+0xa2c>)
 80061d6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80061da:	4116      	asrs	r6, r2
 80061dc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80061e0:	2000      	movs	r0, #0
 80061e2:	ea23 0106 	bic.w	r1, r3, r6
 80061e6:	f1c2 0214 	rsb	r2, r2, #20
 80061ea:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80061ee:	fa4a fa02 	asr.w	sl, sl, r2
 80061f2:	f1bb 0f00 	cmp.w	fp, #0
 80061f6:	4602      	mov	r2, r0
 80061f8:	460b      	mov	r3, r1
 80061fa:	4620      	mov	r0, r4
 80061fc:	4629      	mov	r1, r5
 80061fe:	bfb8      	it	lt
 8006200:	f1ca 0a00 	rsblt	sl, sl, #0
 8006204:	f7f9 ffec 	bl	80001e0 <__aeabi_dsub>
 8006208:	ec41 0b19 	vmov	d9, r0, r1
 800620c:	4642      	mov	r2, r8
 800620e:	464b      	mov	r3, r9
 8006210:	ec51 0b19 	vmov	r0, r1, d9
 8006214:	f7f9 ffe6 	bl	80001e4 <__adddf3>
 8006218:	2400      	movs	r4, #0
 800621a:	a379      	add	r3, pc, #484	; (adr r3, 8006400 <__ieee754_pow+0x9e0>)
 800621c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006220:	4620      	mov	r0, r4
 8006222:	460d      	mov	r5, r1
 8006224:	f7fa f994 	bl	8000550 <__aeabi_dmul>
 8006228:	ec53 2b19 	vmov	r2, r3, d9
 800622c:	4606      	mov	r6, r0
 800622e:	460f      	mov	r7, r1
 8006230:	4620      	mov	r0, r4
 8006232:	4629      	mov	r1, r5
 8006234:	f7f9 ffd4 	bl	80001e0 <__aeabi_dsub>
 8006238:	4602      	mov	r2, r0
 800623a:	460b      	mov	r3, r1
 800623c:	4640      	mov	r0, r8
 800623e:	4649      	mov	r1, r9
 8006240:	f7f9 ffce 	bl	80001e0 <__aeabi_dsub>
 8006244:	a370      	add	r3, pc, #448	; (adr r3, 8006408 <__ieee754_pow+0x9e8>)
 8006246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624a:	f7fa f981 	bl	8000550 <__aeabi_dmul>
 800624e:	a370      	add	r3, pc, #448	; (adr r3, 8006410 <__ieee754_pow+0x9f0>)
 8006250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006254:	4680      	mov	r8, r0
 8006256:	4689      	mov	r9, r1
 8006258:	4620      	mov	r0, r4
 800625a:	4629      	mov	r1, r5
 800625c:	f7fa f978 	bl	8000550 <__aeabi_dmul>
 8006260:	4602      	mov	r2, r0
 8006262:	460b      	mov	r3, r1
 8006264:	4640      	mov	r0, r8
 8006266:	4649      	mov	r1, r9
 8006268:	f7f9 ffbc 	bl	80001e4 <__adddf3>
 800626c:	4604      	mov	r4, r0
 800626e:	460d      	mov	r5, r1
 8006270:	4602      	mov	r2, r0
 8006272:	460b      	mov	r3, r1
 8006274:	4630      	mov	r0, r6
 8006276:	4639      	mov	r1, r7
 8006278:	f7f9 ffb4 	bl	80001e4 <__adddf3>
 800627c:	4632      	mov	r2, r6
 800627e:	463b      	mov	r3, r7
 8006280:	4680      	mov	r8, r0
 8006282:	4689      	mov	r9, r1
 8006284:	f7f9 ffac 	bl	80001e0 <__aeabi_dsub>
 8006288:	4602      	mov	r2, r0
 800628a:	460b      	mov	r3, r1
 800628c:	4620      	mov	r0, r4
 800628e:	4629      	mov	r1, r5
 8006290:	f7f9 ffa6 	bl	80001e0 <__aeabi_dsub>
 8006294:	4642      	mov	r2, r8
 8006296:	4606      	mov	r6, r0
 8006298:	460f      	mov	r7, r1
 800629a:	464b      	mov	r3, r9
 800629c:	4640      	mov	r0, r8
 800629e:	4649      	mov	r1, r9
 80062a0:	f7fa f956 	bl	8000550 <__aeabi_dmul>
 80062a4:	a35c      	add	r3, pc, #368	; (adr r3, 8006418 <__ieee754_pow+0x9f8>)
 80062a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062aa:	4604      	mov	r4, r0
 80062ac:	460d      	mov	r5, r1
 80062ae:	f7fa f94f 	bl	8000550 <__aeabi_dmul>
 80062b2:	a35b      	add	r3, pc, #364	; (adr r3, 8006420 <__ieee754_pow+0xa00>)
 80062b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b8:	f7f9 ff92 	bl	80001e0 <__aeabi_dsub>
 80062bc:	4622      	mov	r2, r4
 80062be:	462b      	mov	r3, r5
 80062c0:	f7fa f946 	bl	8000550 <__aeabi_dmul>
 80062c4:	a358      	add	r3, pc, #352	; (adr r3, 8006428 <__ieee754_pow+0xa08>)
 80062c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ca:	f7f9 ff8b 	bl	80001e4 <__adddf3>
 80062ce:	4622      	mov	r2, r4
 80062d0:	462b      	mov	r3, r5
 80062d2:	f7fa f93d 	bl	8000550 <__aeabi_dmul>
 80062d6:	a356      	add	r3, pc, #344	; (adr r3, 8006430 <__ieee754_pow+0xa10>)
 80062d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062dc:	f7f9 ff80 	bl	80001e0 <__aeabi_dsub>
 80062e0:	4622      	mov	r2, r4
 80062e2:	462b      	mov	r3, r5
 80062e4:	f7fa f934 	bl	8000550 <__aeabi_dmul>
 80062e8:	a353      	add	r3, pc, #332	; (adr r3, 8006438 <__ieee754_pow+0xa18>)
 80062ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ee:	f7f9 ff79 	bl	80001e4 <__adddf3>
 80062f2:	4622      	mov	r2, r4
 80062f4:	462b      	mov	r3, r5
 80062f6:	f7fa f92b 	bl	8000550 <__aeabi_dmul>
 80062fa:	4602      	mov	r2, r0
 80062fc:	460b      	mov	r3, r1
 80062fe:	4640      	mov	r0, r8
 8006300:	4649      	mov	r1, r9
 8006302:	f7f9 ff6d 	bl	80001e0 <__aeabi_dsub>
 8006306:	4604      	mov	r4, r0
 8006308:	460d      	mov	r5, r1
 800630a:	4602      	mov	r2, r0
 800630c:	460b      	mov	r3, r1
 800630e:	4640      	mov	r0, r8
 8006310:	4649      	mov	r1, r9
 8006312:	f7fa f91d 	bl	8000550 <__aeabi_dmul>
 8006316:	2200      	movs	r2, #0
 8006318:	ec41 0b19 	vmov	d9, r0, r1
 800631c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006320:	4620      	mov	r0, r4
 8006322:	4629      	mov	r1, r5
 8006324:	f7f9 ff5c 	bl	80001e0 <__aeabi_dsub>
 8006328:	4602      	mov	r2, r0
 800632a:	460b      	mov	r3, r1
 800632c:	ec51 0b19 	vmov	r0, r1, d9
 8006330:	f7fa fa38 	bl	80007a4 <__aeabi_ddiv>
 8006334:	4632      	mov	r2, r6
 8006336:	4604      	mov	r4, r0
 8006338:	460d      	mov	r5, r1
 800633a:	463b      	mov	r3, r7
 800633c:	4640      	mov	r0, r8
 800633e:	4649      	mov	r1, r9
 8006340:	f7fa f906 	bl	8000550 <__aeabi_dmul>
 8006344:	4632      	mov	r2, r6
 8006346:	463b      	mov	r3, r7
 8006348:	f7f9 ff4c 	bl	80001e4 <__adddf3>
 800634c:	4602      	mov	r2, r0
 800634e:	460b      	mov	r3, r1
 8006350:	4620      	mov	r0, r4
 8006352:	4629      	mov	r1, r5
 8006354:	f7f9 ff44 	bl	80001e0 <__aeabi_dsub>
 8006358:	4642      	mov	r2, r8
 800635a:	464b      	mov	r3, r9
 800635c:	f7f9 ff40 	bl	80001e0 <__aeabi_dsub>
 8006360:	460b      	mov	r3, r1
 8006362:	4602      	mov	r2, r0
 8006364:	493a      	ldr	r1, [pc, #232]	; (8006450 <__ieee754_pow+0xa30>)
 8006366:	2000      	movs	r0, #0
 8006368:	f7f9 ff3a 	bl	80001e0 <__aeabi_dsub>
 800636c:	e9cd 0100 	strd	r0, r1, [sp]
 8006370:	9b01      	ldr	r3, [sp, #4]
 8006372:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006376:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800637a:	da2f      	bge.n	80063dc <__ieee754_pow+0x9bc>
 800637c:	4650      	mov	r0, sl
 800637e:	ed9d 0b00 	vldr	d0, [sp]
 8006382:	f000 f9cd 	bl	8006720 <scalbn>
 8006386:	ec51 0b10 	vmov	r0, r1, d0
 800638a:	ec53 2b18 	vmov	r2, r3, d8
 800638e:	f7ff bbe0 	b.w	8005b52 <__ieee754_pow+0x132>
 8006392:	4b30      	ldr	r3, [pc, #192]	; (8006454 <__ieee754_pow+0xa34>)
 8006394:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006398:	429e      	cmp	r6, r3
 800639a:	f77f af0b 	ble.w	80061b4 <__ieee754_pow+0x794>
 800639e:	4b2e      	ldr	r3, [pc, #184]	; (8006458 <__ieee754_pow+0xa38>)
 80063a0:	440b      	add	r3, r1
 80063a2:	4303      	orrs	r3, r0
 80063a4:	d00b      	beq.n	80063be <__ieee754_pow+0x99e>
 80063a6:	a326      	add	r3, pc, #152	; (adr r3, 8006440 <__ieee754_pow+0xa20>)
 80063a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ac:	ec51 0b18 	vmov	r0, r1, d8
 80063b0:	f7fa f8ce 	bl	8000550 <__aeabi_dmul>
 80063b4:	a322      	add	r3, pc, #136	; (adr r3, 8006440 <__ieee754_pow+0xa20>)
 80063b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ba:	f7ff bbca 	b.w	8005b52 <__ieee754_pow+0x132>
 80063be:	4622      	mov	r2, r4
 80063c0:	462b      	mov	r3, r5
 80063c2:	f7f9 ff0d 	bl	80001e0 <__aeabi_dsub>
 80063c6:	4642      	mov	r2, r8
 80063c8:	464b      	mov	r3, r9
 80063ca:	f7fa fb47 	bl	8000a5c <__aeabi_dcmpge>
 80063ce:	2800      	cmp	r0, #0
 80063d0:	f43f aef0 	beq.w	80061b4 <__ieee754_pow+0x794>
 80063d4:	e7e7      	b.n	80063a6 <__ieee754_pow+0x986>
 80063d6:	f04f 0a00 	mov.w	sl, #0
 80063da:	e717      	b.n	800620c <__ieee754_pow+0x7ec>
 80063dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063e0:	4619      	mov	r1, r3
 80063e2:	e7d2      	b.n	800638a <__ieee754_pow+0x96a>
 80063e4:	491a      	ldr	r1, [pc, #104]	; (8006450 <__ieee754_pow+0xa30>)
 80063e6:	2000      	movs	r0, #0
 80063e8:	f7ff bb9e 	b.w	8005b28 <__ieee754_pow+0x108>
 80063ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063f0:	f7ff bb9a 	b.w	8005b28 <__ieee754_pow+0x108>
 80063f4:	9000      	str	r0, [sp, #0]
 80063f6:	f7ff bb76 	b.w	8005ae6 <__ieee754_pow+0xc6>
 80063fa:	2100      	movs	r1, #0
 80063fc:	f7ff bb60 	b.w	8005ac0 <__ieee754_pow+0xa0>
 8006400:	00000000 	.word	0x00000000
 8006404:	3fe62e43 	.word	0x3fe62e43
 8006408:	fefa39ef 	.word	0xfefa39ef
 800640c:	3fe62e42 	.word	0x3fe62e42
 8006410:	0ca86c39 	.word	0x0ca86c39
 8006414:	be205c61 	.word	0xbe205c61
 8006418:	72bea4d0 	.word	0x72bea4d0
 800641c:	3e663769 	.word	0x3e663769
 8006420:	c5d26bf1 	.word	0xc5d26bf1
 8006424:	3ebbbd41 	.word	0x3ebbbd41
 8006428:	af25de2c 	.word	0xaf25de2c
 800642c:	3f11566a 	.word	0x3f11566a
 8006430:	16bebd93 	.word	0x16bebd93
 8006434:	3f66c16c 	.word	0x3f66c16c
 8006438:	5555553e 	.word	0x5555553e
 800643c:	3fc55555 	.word	0x3fc55555
 8006440:	c2f8f359 	.word	0xc2f8f359
 8006444:	01a56e1f 	.word	0x01a56e1f
 8006448:	3fe00000 	.word	0x3fe00000
 800644c:	000fffff 	.word	0x000fffff
 8006450:	3ff00000 	.word	0x3ff00000
 8006454:	4090cbff 	.word	0x4090cbff
 8006458:	3f6f3400 	.word	0x3f6f3400
 800645c:	652b82fe 	.word	0x652b82fe
 8006460:	3c971547 	.word	0x3c971547

08006464 <__ieee754_sqrt>:
 8006464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006468:	ec55 4b10 	vmov	r4, r5, d0
 800646c:	4e56      	ldr	r6, [pc, #344]	; (80065c8 <__ieee754_sqrt+0x164>)
 800646e:	43ae      	bics	r6, r5
 8006470:	ee10 0a10 	vmov	r0, s0
 8006474:	ee10 3a10 	vmov	r3, s0
 8006478:	4629      	mov	r1, r5
 800647a:	462a      	mov	r2, r5
 800647c:	d110      	bne.n	80064a0 <__ieee754_sqrt+0x3c>
 800647e:	ee10 2a10 	vmov	r2, s0
 8006482:	462b      	mov	r3, r5
 8006484:	f7fa f864 	bl	8000550 <__aeabi_dmul>
 8006488:	4602      	mov	r2, r0
 800648a:	460b      	mov	r3, r1
 800648c:	4620      	mov	r0, r4
 800648e:	4629      	mov	r1, r5
 8006490:	f7f9 fea8 	bl	80001e4 <__adddf3>
 8006494:	4604      	mov	r4, r0
 8006496:	460d      	mov	r5, r1
 8006498:	ec45 4b10 	vmov	d0, r4, r5
 800649c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064a0:	2d00      	cmp	r5, #0
 80064a2:	dc10      	bgt.n	80064c6 <__ieee754_sqrt+0x62>
 80064a4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80064a8:	4330      	orrs	r0, r6
 80064aa:	d0f5      	beq.n	8006498 <__ieee754_sqrt+0x34>
 80064ac:	b15d      	cbz	r5, 80064c6 <__ieee754_sqrt+0x62>
 80064ae:	ee10 2a10 	vmov	r2, s0
 80064b2:	462b      	mov	r3, r5
 80064b4:	ee10 0a10 	vmov	r0, s0
 80064b8:	f7f9 fe92 	bl	80001e0 <__aeabi_dsub>
 80064bc:	4602      	mov	r2, r0
 80064be:	460b      	mov	r3, r1
 80064c0:	f7fa f970 	bl	80007a4 <__aeabi_ddiv>
 80064c4:	e7e6      	b.n	8006494 <__ieee754_sqrt+0x30>
 80064c6:	1509      	asrs	r1, r1, #20
 80064c8:	d076      	beq.n	80065b8 <__ieee754_sqrt+0x154>
 80064ca:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80064ce:	07ce      	lsls	r6, r1, #31
 80064d0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80064d4:	bf5e      	ittt	pl
 80064d6:	0fda      	lsrpl	r2, r3, #31
 80064d8:	005b      	lslpl	r3, r3, #1
 80064da:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80064de:	0fda      	lsrs	r2, r3, #31
 80064e0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80064e4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80064e8:	2000      	movs	r0, #0
 80064ea:	106d      	asrs	r5, r5, #1
 80064ec:	005b      	lsls	r3, r3, #1
 80064ee:	f04f 0e16 	mov.w	lr, #22
 80064f2:	4684      	mov	ip, r0
 80064f4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064f8:	eb0c 0401 	add.w	r4, ip, r1
 80064fc:	4294      	cmp	r4, r2
 80064fe:	bfde      	ittt	le
 8006500:	1b12      	suble	r2, r2, r4
 8006502:	eb04 0c01 	addle.w	ip, r4, r1
 8006506:	1840      	addle	r0, r0, r1
 8006508:	0052      	lsls	r2, r2, #1
 800650a:	f1be 0e01 	subs.w	lr, lr, #1
 800650e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8006512:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006516:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800651a:	d1ed      	bne.n	80064f8 <__ieee754_sqrt+0x94>
 800651c:	4671      	mov	r1, lr
 800651e:	2720      	movs	r7, #32
 8006520:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006524:	4562      	cmp	r2, ip
 8006526:	eb04 060e 	add.w	r6, r4, lr
 800652a:	dc02      	bgt.n	8006532 <__ieee754_sqrt+0xce>
 800652c:	d113      	bne.n	8006556 <__ieee754_sqrt+0xf2>
 800652e:	429e      	cmp	r6, r3
 8006530:	d811      	bhi.n	8006556 <__ieee754_sqrt+0xf2>
 8006532:	2e00      	cmp	r6, #0
 8006534:	eb06 0e04 	add.w	lr, r6, r4
 8006538:	da43      	bge.n	80065c2 <__ieee754_sqrt+0x15e>
 800653a:	f1be 0f00 	cmp.w	lr, #0
 800653e:	db40      	blt.n	80065c2 <__ieee754_sqrt+0x15e>
 8006540:	f10c 0801 	add.w	r8, ip, #1
 8006544:	eba2 020c 	sub.w	r2, r2, ip
 8006548:	429e      	cmp	r6, r3
 800654a:	bf88      	it	hi
 800654c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006550:	1b9b      	subs	r3, r3, r6
 8006552:	4421      	add	r1, r4
 8006554:	46c4      	mov	ip, r8
 8006556:	0052      	lsls	r2, r2, #1
 8006558:	3f01      	subs	r7, #1
 800655a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800655e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006562:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006566:	d1dd      	bne.n	8006524 <__ieee754_sqrt+0xc0>
 8006568:	4313      	orrs	r3, r2
 800656a:	d006      	beq.n	800657a <__ieee754_sqrt+0x116>
 800656c:	1c4c      	adds	r4, r1, #1
 800656e:	bf13      	iteet	ne
 8006570:	3101      	addne	r1, #1
 8006572:	3001      	addeq	r0, #1
 8006574:	4639      	moveq	r1, r7
 8006576:	f021 0101 	bicne.w	r1, r1, #1
 800657a:	1043      	asrs	r3, r0, #1
 800657c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006580:	0849      	lsrs	r1, r1, #1
 8006582:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006586:	07c2      	lsls	r2, r0, #31
 8006588:	bf48      	it	mi
 800658a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800658e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8006592:	460c      	mov	r4, r1
 8006594:	463d      	mov	r5, r7
 8006596:	e77f      	b.n	8006498 <__ieee754_sqrt+0x34>
 8006598:	0ada      	lsrs	r2, r3, #11
 800659a:	3815      	subs	r0, #21
 800659c:	055b      	lsls	r3, r3, #21
 800659e:	2a00      	cmp	r2, #0
 80065a0:	d0fa      	beq.n	8006598 <__ieee754_sqrt+0x134>
 80065a2:	02d7      	lsls	r7, r2, #11
 80065a4:	d50a      	bpl.n	80065bc <__ieee754_sqrt+0x158>
 80065a6:	f1c1 0420 	rsb	r4, r1, #32
 80065aa:	fa23 f404 	lsr.w	r4, r3, r4
 80065ae:	1e4d      	subs	r5, r1, #1
 80065b0:	408b      	lsls	r3, r1
 80065b2:	4322      	orrs	r2, r4
 80065b4:	1b41      	subs	r1, r0, r5
 80065b6:	e788      	b.n	80064ca <__ieee754_sqrt+0x66>
 80065b8:	4608      	mov	r0, r1
 80065ba:	e7f0      	b.n	800659e <__ieee754_sqrt+0x13a>
 80065bc:	0052      	lsls	r2, r2, #1
 80065be:	3101      	adds	r1, #1
 80065c0:	e7ef      	b.n	80065a2 <__ieee754_sqrt+0x13e>
 80065c2:	46e0      	mov	r8, ip
 80065c4:	e7be      	b.n	8006544 <__ieee754_sqrt+0xe0>
 80065c6:	bf00      	nop
 80065c8:	7ff00000 	.word	0x7ff00000

080065cc <fabs>:
 80065cc:	ec51 0b10 	vmov	r0, r1, d0
 80065d0:	ee10 2a10 	vmov	r2, s0
 80065d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80065d8:	ec43 2b10 	vmov	d0, r2, r3
 80065dc:	4770      	bx	lr

080065de <finite>:
 80065de:	b082      	sub	sp, #8
 80065e0:	ed8d 0b00 	vstr	d0, [sp]
 80065e4:	9801      	ldr	r0, [sp, #4]
 80065e6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80065ea:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80065ee:	0fc0      	lsrs	r0, r0, #31
 80065f0:	b002      	add	sp, #8
 80065f2:	4770      	bx	lr
 80065f4:	0000      	movs	r0, r0
	...

080065f8 <nan>:
 80065f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006600 <nan+0x8>
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	00000000 	.word	0x00000000
 8006604:	7ff80000 	.word	0x7ff80000

08006608 <rint>:
 8006608:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800660a:	ec51 0b10 	vmov	r0, r1, d0
 800660e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006612:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8006616:	2e13      	cmp	r6, #19
 8006618:	ee10 4a10 	vmov	r4, s0
 800661c:	460b      	mov	r3, r1
 800661e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8006622:	dc58      	bgt.n	80066d6 <rint+0xce>
 8006624:	2e00      	cmp	r6, #0
 8006626:	da2b      	bge.n	8006680 <rint+0x78>
 8006628:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800662c:	4302      	orrs	r2, r0
 800662e:	d023      	beq.n	8006678 <rint+0x70>
 8006630:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8006634:	4302      	orrs	r2, r0
 8006636:	4254      	negs	r4, r2
 8006638:	4314      	orrs	r4, r2
 800663a:	0c4b      	lsrs	r3, r1, #17
 800663c:	0b24      	lsrs	r4, r4, #12
 800663e:	045b      	lsls	r3, r3, #17
 8006640:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8006644:	ea44 0103 	orr.w	r1, r4, r3
 8006648:	4b32      	ldr	r3, [pc, #200]	; (8006714 <rint+0x10c>)
 800664a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800664e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006652:	4602      	mov	r2, r0
 8006654:	460b      	mov	r3, r1
 8006656:	4630      	mov	r0, r6
 8006658:	4639      	mov	r1, r7
 800665a:	f7f9 fdc3 	bl	80001e4 <__adddf3>
 800665e:	e9cd 0100 	strd	r0, r1, [sp]
 8006662:	463b      	mov	r3, r7
 8006664:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006668:	4632      	mov	r2, r6
 800666a:	f7f9 fdb9 	bl	80001e0 <__aeabi_dsub>
 800666e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006672:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8006676:	4639      	mov	r1, r7
 8006678:	ec41 0b10 	vmov	d0, r0, r1
 800667c:	b003      	add	sp, #12
 800667e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006680:	4a25      	ldr	r2, [pc, #148]	; (8006718 <rint+0x110>)
 8006682:	4132      	asrs	r2, r6
 8006684:	ea01 0702 	and.w	r7, r1, r2
 8006688:	4307      	orrs	r7, r0
 800668a:	d0f5      	beq.n	8006678 <rint+0x70>
 800668c:	0851      	lsrs	r1, r2, #1
 800668e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8006692:	4314      	orrs	r4, r2
 8006694:	d00c      	beq.n	80066b0 <rint+0xa8>
 8006696:	ea23 0201 	bic.w	r2, r3, r1
 800669a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800669e:	2e13      	cmp	r6, #19
 80066a0:	fa43 f606 	asr.w	r6, r3, r6
 80066a4:	bf0c      	ite	eq
 80066a6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80066aa:	2400      	movne	r4, #0
 80066ac:	ea42 0306 	orr.w	r3, r2, r6
 80066b0:	4918      	ldr	r1, [pc, #96]	; (8006714 <rint+0x10c>)
 80066b2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80066b6:	4622      	mov	r2, r4
 80066b8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80066bc:	4620      	mov	r0, r4
 80066be:	4629      	mov	r1, r5
 80066c0:	f7f9 fd90 	bl	80001e4 <__adddf3>
 80066c4:	e9cd 0100 	strd	r0, r1, [sp]
 80066c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066cc:	4622      	mov	r2, r4
 80066ce:	462b      	mov	r3, r5
 80066d0:	f7f9 fd86 	bl	80001e0 <__aeabi_dsub>
 80066d4:	e7d0      	b.n	8006678 <rint+0x70>
 80066d6:	2e33      	cmp	r6, #51	; 0x33
 80066d8:	dd07      	ble.n	80066ea <rint+0xe2>
 80066da:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80066de:	d1cb      	bne.n	8006678 <rint+0x70>
 80066e0:	ee10 2a10 	vmov	r2, s0
 80066e4:	f7f9 fd7e 	bl	80001e4 <__adddf3>
 80066e8:	e7c6      	b.n	8006678 <rint+0x70>
 80066ea:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80066ee:	f04f 36ff 	mov.w	r6, #4294967295
 80066f2:	40d6      	lsrs	r6, r2
 80066f4:	4230      	tst	r0, r6
 80066f6:	d0bf      	beq.n	8006678 <rint+0x70>
 80066f8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 80066fc:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8006700:	bf1f      	itttt	ne
 8006702:	ea24 0101 	bicne.w	r1, r4, r1
 8006706:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800670a:	fa44 f202 	asrne.w	r2, r4, r2
 800670e:	ea41 0402 	orrne.w	r4, r1, r2
 8006712:	e7cd      	b.n	80066b0 <rint+0xa8>
 8006714:	080068b8 	.word	0x080068b8
 8006718:	000fffff 	.word	0x000fffff
 800671c:	00000000 	.word	0x00000000

08006720 <scalbn>:
 8006720:	b570      	push	{r4, r5, r6, lr}
 8006722:	ec55 4b10 	vmov	r4, r5, d0
 8006726:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800672a:	4606      	mov	r6, r0
 800672c:	462b      	mov	r3, r5
 800672e:	b99a      	cbnz	r2, 8006758 <scalbn+0x38>
 8006730:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006734:	4323      	orrs	r3, r4
 8006736:	d036      	beq.n	80067a6 <scalbn+0x86>
 8006738:	4b39      	ldr	r3, [pc, #228]	; (8006820 <scalbn+0x100>)
 800673a:	4629      	mov	r1, r5
 800673c:	ee10 0a10 	vmov	r0, s0
 8006740:	2200      	movs	r2, #0
 8006742:	f7f9 ff05 	bl	8000550 <__aeabi_dmul>
 8006746:	4b37      	ldr	r3, [pc, #220]	; (8006824 <scalbn+0x104>)
 8006748:	429e      	cmp	r6, r3
 800674a:	4604      	mov	r4, r0
 800674c:	460d      	mov	r5, r1
 800674e:	da10      	bge.n	8006772 <scalbn+0x52>
 8006750:	a32b      	add	r3, pc, #172	; (adr r3, 8006800 <scalbn+0xe0>)
 8006752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006756:	e03a      	b.n	80067ce <scalbn+0xae>
 8006758:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800675c:	428a      	cmp	r2, r1
 800675e:	d10c      	bne.n	800677a <scalbn+0x5a>
 8006760:	ee10 2a10 	vmov	r2, s0
 8006764:	4620      	mov	r0, r4
 8006766:	4629      	mov	r1, r5
 8006768:	f7f9 fd3c 	bl	80001e4 <__adddf3>
 800676c:	4604      	mov	r4, r0
 800676e:	460d      	mov	r5, r1
 8006770:	e019      	b.n	80067a6 <scalbn+0x86>
 8006772:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006776:	460b      	mov	r3, r1
 8006778:	3a36      	subs	r2, #54	; 0x36
 800677a:	4432      	add	r2, r6
 800677c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006780:	428a      	cmp	r2, r1
 8006782:	dd08      	ble.n	8006796 <scalbn+0x76>
 8006784:	2d00      	cmp	r5, #0
 8006786:	a120      	add	r1, pc, #128	; (adr r1, 8006808 <scalbn+0xe8>)
 8006788:	e9d1 0100 	ldrd	r0, r1, [r1]
 800678c:	da1c      	bge.n	80067c8 <scalbn+0xa8>
 800678e:	a120      	add	r1, pc, #128	; (adr r1, 8006810 <scalbn+0xf0>)
 8006790:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006794:	e018      	b.n	80067c8 <scalbn+0xa8>
 8006796:	2a00      	cmp	r2, #0
 8006798:	dd08      	ble.n	80067ac <scalbn+0x8c>
 800679a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800679e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80067a2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80067a6:	ec45 4b10 	vmov	d0, r4, r5
 80067aa:	bd70      	pop	{r4, r5, r6, pc}
 80067ac:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80067b0:	da19      	bge.n	80067e6 <scalbn+0xc6>
 80067b2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80067b6:	429e      	cmp	r6, r3
 80067b8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80067bc:	dd0a      	ble.n	80067d4 <scalbn+0xb4>
 80067be:	a112      	add	r1, pc, #72	; (adr r1, 8006808 <scalbn+0xe8>)
 80067c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d1e2      	bne.n	800678e <scalbn+0x6e>
 80067c8:	a30f      	add	r3, pc, #60	; (adr r3, 8006808 <scalbn+0xe8>)
 80067ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ce:	f7f9 febf 	bl	8000550 <__aeabi_dmul>
 80067d2:	e7cb      	b.n	800676c <scalbn+0x4c>
 80067d4:	a10a      	add	r1, pc, #40	; (adr r1, 8006800 <scalbn+0xe0>)
 80067d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d0b8      	beq.n	8006750 <scalbn+0x30>
 80067de:	a10e      	add	r1, pc, #56	; (adr r1, 8006818 <scalbn+0xf8>)
 80067e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067e4:	e7b4      	b.n	8006750 <scalbn+0x30>
 80067e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80067ea:	3236      	adds	r2, #54	; 0x36
 80067ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80067f0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80067f4:	4620      	mov	r0, r4
 80067f6:	4b0c      	ldr	r3, [pc, #48]	; (8006828 <scalbn+0x108>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	e7e8      	b.n	80067ce <scalbn+0xae>
 80067fc:	f3af 8000 	nop.w
 8006800:	c2f8f359 	.word	0xc2f8f359
 8006804:	01a56e1f 	.word	0x01a56e1f
 8006808:	8800759c 	.word	0x8800759c
 800680c:	7e37e43c 	.word	0x7e37e43c
 8006810:	8800759c 	.word	0x8800759c
 8006814:	fe37e43c 	.word	0xfe37e43c
 8006818:	c2f8f359 	.word	0xc2f8f359
 800681c:	81a56e1f 	.word	0x81a56e1f
 8006820:	43500000 	.word	0x43500000
 8006824:	ffff3cb0 	.word	0xffff3cb0
 8006828:	3c900000 	.word	0x3c900000

0800682c <_init>:
 800682c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800682e:	bf00      	nop
 8006830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006832:	bc08      	pop	{r3}
 8006834:	469e      	mov	lr, r3
 8006836:	4770      	bx	lr

08006838 <_fini>:
 8006838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800683a:	bf00      	nop
 800683c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800683e:	bc08      	pop	{r3}
 8006840:	469e      	mov	lr, r3
 8006842:	4770      	bx	lr
